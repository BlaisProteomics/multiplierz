# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_msparser', [dirname(__file__)])
        except ImportError:
            import _msparser
            return _msparser
        if fp is not None:
            try:
                _mod = imp.load_module('_msparser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _msparser = swig_import_helper()
    del swig_import_helper
else:
    import _msparser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _msparser.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _msparser.SwigPyIterator_value(self)
    def incr(self, n = 1): return _msparser.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _msparser.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _msparser.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _msparser.SwigPyIterator_equal(self, *args)
    def copy(self): return _msparser.SwigPyIterator_copy(self)
    def next(self): return _msparser.SwigPyIterator_next(self)
    def __next__(self): return _msparser.SwigPyIterator___next__(self)
    def previous(self): return _msparser.SwigPyIterator_previous(self)
    def advance(self, *args): return _msparser.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _msparser.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _msparser.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _msparser.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _msparser.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _msparser.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _msparser.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _msparser.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _msparser.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _msparser.vectori___nonzero__(self)
    def __bool__(self): return _msparser.vectori___bool__(self)
    def __len__(self): return _msparser.vectori___len__(self)
    def pop(self): return _msparser.vectori_pop(self)
    def __getslice__(self, *args): return _msparser.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _msparser.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _msparser.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _msparser.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _msparser.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _msparser.vectori___setitem__(self, *args)
    def append(self, *args): return _msparser.vectori_append(self, *args)
    def empty(self): return _msparser.vectori_empty(self)
    def size(self): return _msparser.vectori_size(self)
    def clear(self): return _msparser.vectori_clear(self)
    def swap(self, *args): return _msparser.vectori_swap(self, *args)
    def get_allocator(self): return _msparser.vectori_get_allocator(self)
    def begin(self): return _msparser.vectori_begin(self)
    def end(self): return _msparser.vectori_end(self)
    def rbegin(self): return _msparser.vectori_rbegin(self)
    def rend(self): return _msparser.vectori_rend(self)
    def pop_back(self): return _msparser.vectori_pop_back(self)
    def erase(self, *args): return _msparser.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _msparser.vectori_push_back(self, *args)
    def front(self): return _msparser.vectori_front(self)
    def back(self): return _msparser.vectori_back(self)
    def assign(self, *args): return _msparser.vectori_assign(self, *args)
    def resize(self, *args): return _msparser.vectori_resize(self, *args)
    def insert(self, *args): return _msparser.vectori_insert(self, *args)
    def reserve(self, *args): return _msparser.vectori_reserve(self, *args)
    def capacity(self): return _msparser.vectori_capacity(self)
    __swig_destroy__ = _msparser.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _msparser.vectori_swigregister
vectori_swigregister(vectori)

class vectorl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorl, name)
    __repr__ = _swig_repr
    def iterator(self): return _msparser.vectorl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _msparser.vectorl___nonzero__(self)
    def __bool__(self): return _msparser.vectorl___bool__(self)
    def __len__(self): return _msparser.vectorl___len__(self)
    def pop(self): return _msparser.vectorl_pop(self)
    def __getslice__(self, *args): return _msparser.vectorl___getslice__(self, *args)
    def __setslice__(self, *args): return _msparser.vectorl___setslice__(self, *args)
    def __delslice__(self, *args): return _msparser.vectorl___delslice__(self, *args)
    def __delitem__(self, *args): return _msparser.vectorl___delitem__(self, *args)
    def __getitem__(self, *args): return _msparser.vectorl___getitem__(self, *args)
    def __setitem__(self, *args): return _msparser.vectorl___setitem__(self, *args)
    def append(self, *args): return _msparser.vectorl_append(self, *args)
    def empty(self): return _msparser.vectorl_empty(self)
    def size(self): return _msparser.vectorl_size(self)
    def clear(self): return _msparser.vectorl_clear(self)
    def swap(self, *args): return _msparser.vectorl_swap(self, *args)
    def get_allocator(self): return _msparser.vectorl_get_allocator(self)
    def begin(self): return _msparser.vectorl_begin(self)
    def end(self): return _msparser.vectorl_end(self)
    def rbegin(self): return _msparser.vectorl_rbegin(self)
    def rend(self): return _msparser.vectorl_rend(self)
    def pop_back(self): return _msparser.vectorl_pop_back(self)
    def erase(self, *args): return _msparser.vectorl_erase(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_vectorl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _msparser.vectorl_push_back(self, *args)
    def front(self): return _msparser.vectorl_front(self)
    def back(self): return _msparser.vectorl_back(self)
    def assign(self, *args): return _msparser.vectorl_assign(self, *args)
    def resize(self, *args): return _msparser.vectorl_resize(self, *args)
    def insert(self, *args): return _msparser.vectorl_insert(self, *args)
    def reserve(self, *args): return _msparser.vectorl_reserve(self, *args)
    def capacity(self): return _msparser.vectorl_capacity(self)
    __swig_destroy__ = _msparser.delete_vectorl
    __del__ = lambda self : None;
vectorl_swigregister = _msparser.vectorl_swigregister
vectorl_swigregister(vectorl)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _msparser.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _msparser.vectord___nonzero__(self)
    def __bool__(self): return _msparser.vectord___bool__(self)
    def __len__(self): return _msparser.vectord___len__(self)
    def pop(self): return _msparser.vectord_pop(self)
    def __getslice__(self, *args): return _msparser.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _msparser.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _msparser.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _msparser.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _msparser.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _msparser.vectord___setitem__(self, *args)
    def append(self, *args): return _msparser.vectord_append(self, *args)
    def empty(self): return _msparser.vectord_empty(self)
    def size(self): return _msparser.vectord_size(self)
    def clear(self): return _msparser.vectord_clear(self)
    def swap(self, *args): return _msparser.vectord_swap(self, *args)
    def get_allocator(self): return _msparser.vectord_get_allocator(self)
    def begin(self): return _msparser.vectord_begin(self)
    def end(self): return _msparser.vectord_end(self)
    def rbegin(self): return _msparser.vectord_rbegin(self)
    def rend(self): return _msparser.vectord_rend(self)
    def pop_back(self): return _msparser.vectord_pop_back(self)
    def erase(self, *args): return _msparser.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _msparser.vectord_push_back(self, *args)
    def front(self): return _msparser.vectord_front(self)
    def back(self): return _msparser.vectord_back(self)
    def assign(self, *args): return _msparser.vectord_assign(self, *args)
    def resize(self, *args): return _msparser.vectord_resize(self, *args)
    def insert(self, *args): return _msparser.vectord_insert(self, *args)
    def reserve(self, *args): return _msparser.vectord_reserve(self, *args)
    def capacity(self): return _msparser.vectord_capacity(self)
    __swig_destroy__ = _msparser.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _msparser.vectord_swigregister
vectord_swigregister(vectord)

class vectorb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorb, name)
    __repr__ = _swig_repr
    def iterator(self): return _msparser.vectorb_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _msparser.vectorb___nonzero__(self)
    def __bool__(self): return _msparser.vectorb___bool__(self)
    def __len__(self): return _msparser.vectorb___len__(self)
    def pop(self): return _msparser.vectorb_pop(self)
    def __getslice__(self, *args): return _msparser.vectorb___getslice__(self, *args)
    def __setslice__(self, *args): return _msparser.vectorb___setslice__(self, *args)
    def __delslice__(self, *args): return _msparser.vectorb___delslice__(self, *args)
    def __delitem__(self, *args): return _msparser.vectorb___delitem__(self, *args)
    def __getitem__(self, *args): return _msparser.vectorb___getitem__(self, *args)
    def __setitem__(self, *args): return _msparser.vectorb___setitem__(self, *args)
    def append(self, *args): return _msparser.vectorb_append(self, *args)
    def empty(self): return _msparser.vectorb_empty(self)
    def size(self): return _msparser.vectorb_size(self)
    def clear(self): return _msparser.vectorb_clear(self)
    def swap(self, *args): return _msparser.vectorb_swap(self, *args)
    def get_allocator(self): return _msparser.vectorb_get_allocator(self)
    def begin(self): return _msparser.vectorb_begin(self)
    def end(self): return _msparser.vectorb_end(self)
    def rbegin(self): return _msparser.vectorb_rbegin(self)
    def rend(self): return _msparser.vectorb_rend(self)
    def pop_back(self): return _msparser.vectorb_pop_back(self)
    def erase(self, *args): return _msparser.vectorb_erase(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_vectorb(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _msparser.vectorb_push_back(self, *args)
    def front(self): return _msparser.vectorb_front(self)
    def back(self): return _msparser.vectorb_back(self)
    def assign(self, *args): return _msparser.vectorb_assign(self, *args)
    def resize(self, *args): return _msparser.vectorb_resize(self, *args)
    def insert(self, *args): return _msparser.vectorb_insert(self, *args)
    def reserve(self, *args): return _msparser.vectorb_reserve(self, *args)
    def capacity(self): return _msparser.vectorb_capacity(self)
    __swig_destroy__ = _msparser.delete_vectorb
    __del__ = lambda self : None;
vectorb_swigregister = _msparser.vectorb_swigregister
vectorb_swigregister(vectorb)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _msparser.VectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _msparser.VectorString___nonzero__(self)
    def __bool__(self): return _msparser.VectorString___bool__(self)
    def __len__(self): return _msparser.VectorString___len__(self)
    def pop(self): return _msparser.VectorString_pop(self)
    def __getslice__(self, *args): return _msparser.VectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _msparser.VectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _msparser.VectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _msparser.VectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _msparser.VectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _msparser.VectorString___setitem__(self, *args)
    def append(self, *args): return _msparser.VectorString_append(self, *args)
    def empty(self): return _msparser.VectorString_empty(self)
    def size(self): return _msparser.VectorString_size(self)
    def clear(self): return _msparser.VectorString_clear(self)
    def swap(self, *args): return _msparser.VectorString_swap(self, *args)
    def get_allocator(self): return _msparser.VectorString_get_allocator(self)
    def begin(self): return _msparser.VectorString_begin(self)
    def end(self): return _msparser.VectorString_end(self)
    def rbegin(self): return _msparser.VectorString_rbegin(self)
    def rend(self): return _msparser.VectorString_rend(self)
    def pop_back(self): return _msparser.VectorString_pop_back(self)
    def erase(self, *args): return _msparser.VectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _msparser.VectorString_push_back(self, *args)
    def front(self): return _msparser.VectorString_front(self)
    def back(self): return _msparser.VectorString_back(self)
    def assign(self, *args): return _msparser.VectorString_assign(self, *args)
    def resize(self, *args): return _msparser.VectorString_resize(self, *args)
    def insert(self, *args): return _msparser.VectorString_insert(self, *args)
    def reserve(self, *args): return _msparser.VectorString_reserve(self, *args)
    def capacity(self): return _msparser.VectorString_capacity(self)
    __swig_destroy__ = _msparser.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _msparser.VectorString_swigregister
VectorString_swigregister(VectorString)

class ms_errs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_errs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_errs, name)
    __repr__ = _swig_repr
    sev_fatal = _msparser.ms_errs_sev_fatal
    sev_warn = _msparser.ms_errs_sev_warn
    sev_info = _msparser.ms_errs_sev_info
    sev_debug1 = _msparser.ms_errs_sev_debug1
    sev_debug2 = _msparser.ms_errs_sev_debug2
    sev_debug3 = _msparser.ms_errs_sev_debug3
    ERR_NO_ERROR = _msparser.ms_errs_ERR_NO_ERROR
    ERR_NOMEM = _msparser.ms_errs_ERR_NOMEM
    ERR_NOSUCHFILE = _msparser.ms_errs_ERR_NOSUCHFILE
    ERR_READINGFILE = _msparser.ms_errs_ERR_READINGFILE
    ERR_QUERYOUTOFRANGE = _msparser.ms_errs_ERR_QUERYOUTOFRANGE
    ERR_MISSINGENTRY = _msparser.ms_errs_ERR_MISSINGENTRY
    ERR_PEPSUMMPEPGET = _msparser.ms_errs_ERR_PEPSUMMPEPGET
    ERR_PEPTIDESTR = _msparser.ms_errs_ERR_PEPTIDESTR
    ERR_ACCINPEPTIDESTR = _msparser.ms_errs_ERR_ACCINPEPTIDESTR
    ERR_PROTSUMM = _msparser.ms_errs_ERR_PROTSUMM
    ERR_PROTSUMMPEP = _msparser.ms_errs_ERR_PROTSUMMPEP
    ERR_ADDPEPTIDES = _msparser.ms_errs_ERR_ADDPEPTIDES
    ERR_MISSINGHIT = _msparser.ms_errs_ERR_MISSINGHIT
    ERR_MISSINGSECTION = _msparser.ms_errs_ERR_MISSINGSECTION
    ERR_MISSINGSECTIONEND = _msparser.ms_errs_ERR_MISSINGSECTIONEND
    ERR_MALFORMED_ERR_TOL = _msparser.ms_errs_ERR_MALFORMED_ERR_TOL
    ERR_NO_ERR_TOL_PARENT = _msparser.ms_errs_ERR_NO_ERR_TOL_PARENT
    ERR_NULL_ACC_PEP_SUM = _msparser.ms_errs_ERR_NULL_ACC_PEP_SUM
    ERR_NULL_ACC_PROT_SUM = _msparser.ms_errs_ERR_NULL_ACC_PROT_SUM
    ERR_DUPE_ACCESSION = _msparser.ms_errs_ERR_DUPE_ACCESSION
    ERR_UNASSIGNED_PROG = _msparser.ms_errs_ERR_UNASSIGNED_PROG
    ERR_UNASSIGNED_RANGE = _msparser.ms_errs_ERR_UNASSIGNED_RANGE
    ERR_UNASSIGNED_UNK = _msparser.ms_errs_ERR_UNASSIGNED_UNK
    ERR_NO_UNIGENE_FILE = _msparser.ms_errs_ERR_NO_UNIGENE_FILE
    ERR_DUPLICATE_KEY = _msparser.ms_errs_ERR_DUPLICATE_KEY
    ERR_OLDRESULTSFILE = _msparser.ms_errs_ERR_OLDRESULTSFILE
    ERR_MALFORMED_TAG = _msparser.ms_errs_ERR_MALFORMED_TAG
    ERR_MALFORMED_DRANGE = _msparser.ms_errs_ERR_MALFORMED_DRANGE
    ERR_INVALID_NUMQUERIES = _msparser.ms_errs_ERR_INVALID_NUMQUERIES
    ERR_MALFORMED_TERMS = _msparser.ms_errs_ERR_MALFORMED_TERMS
    ERR_INVALID_RESFILE = _msparser.ms_errs_ERR_INVALID_RESFILE
    ERR_INVALID_PROTDB = _msparser.ms_errs_ERR_INVALID_PROTDB
    ERR_UNIGENE_MULTIDB = _msparser.ms_errs_ERR_UNIGENE_MULTIDB
    ERR_INVALID_CACHE_DIR = _msparser.ms_errs_ERR_INVALID_CACHE_DIR
    ERR_FAIL_OPEN_DAT_FILE = _msparser.ms_errs_ERR_FAIL_OPEN_DAT_FILE
    ERR_MISSING_CDB_FILE = _msparser.ms_errs_ERR_MISSING_CDB_FILE
    ERR_FAIL_MK_CACHE_DIR = _msparser.ms_errs_ERR_FAIL_MK_CACHE_DIR
    ERR_FAIL_MK_CDB_FILE = _msparser.ms_errs_ERR_FAIL_MK_CDB_FILE
    ERR_FAIL_CLOSE_FILE = _msparser.ms_errs_ERR_FAIL_CLOSE_FILE
    ERR_FAIL_CDB_INIT = _msparser.ms_errs_ERR_FAIL_CDB_INIT
    ERR_INVALID_CDB_FILE = _msparser.ms_errs_ERR_INVALID_CDB_FILE
    ERR_WRITE_CDB_FILE = _msparser.ms_errs_ERR_WRITE_CDB_FILE
    ERR_CDB_TOO_LARGE = _msparser.ms_errs_ERR_CDB_TOO_LARGE
    ERR_NEED_64_BIT = _msparser.ms_errs_ERR_NEED_64_BIT
    ERR_CDB_64_BIT_REMAKE = _msparser.ms_errs_ERR_CDB_64_BIT_REMAKE
    ERR_CDB_OLD_VER_RETRY = _msparser.ms_errs_ERR_CDB_OLD_VER_RETRY
    ERR_CDB_OLD_VER_NO_RETRY = _msparser.ms_errs_ERR_CDB_OLD_VER_NO_RETRY
    ERR_CDB_INCOMPLETE_RETRY = _msparser.ms_errs_ERR_CDB_INCOMPLETE_RETRY
    ERR_CDB_INCOMPLETE_NO_RETRY = _msparser.ms_errs_ERR_CDB_INCOMPLETE_NO_RETRY
    ERR_CDB_BEING_CREATED = _msparser.ms_errs_ERR_CDB_BEING_CREATED
    ERR_CDB_FAIL_REMOVE = _msparser.ms_errs_ERR_CDB_FAIL_REMOVE
    ERR_CDB_FAIL_LOCK = _msparser.ms_errs_ERR_CDB_FAIL_LOCK
    ERR_CDB_FAIL_UNLOCK = _msparser.ms_errs_ERR_CDB_FAIL_UNLOCK
    ERR_CDB_SOURCE_CHANGE_RETRY = _msparser.ms_errs_ERR_CDB_SOURCE_CHANGE_RETRY
    ERR_CDB_SOURCE_CHANGE_NO_RETRY = _msparser.ms_errs_ERR_CDB_SOURCE_CHANGE_NO_RETRY
    ERR_MISSING_PERCOLATOR_FILE = _msparser.ms_errs_ERR_MISSING_PERCOLATOR_FILE
    ERR_CANNOT_APPEND_RESFILE = _msparser.ms_errs_ERR_CANNOT_APPEND_RESFILE
    ERR_CANNOT_APPEND_RESFILE_NO_FNAMES = _msparser.ms_errs_ERR_CANNOT_APPEND_RESFILE_NO_FNAMES
    ERR_RESULTS_NOT_CREATED = _msparser.ms_errs_ERR_RESULTS_NOT_CREATED
    ERR_MSP_FAILED_TO_OPEN_FILE = _msparser.ms_errs_ERR_MSP_FAILED_TO_OPEN_FILE
    ERR_MSP_FAILED_TO_CLOSE_FILE = _msparser.ms_errs_ERR_MSP_FAILED_TO_CLOSE_FILE
    ERR_MSP_FAIL_STAT = _msparser.ms_errs_ERR_MSP_FAIL_STAT
    ERR_MSP_GET_VOLUME_INFO = _msparser.ms_errs_ERR_MSP_GET_VOLUME_INFO
    ERR_MSP_FILE_DOESNT_EXIST = _msparser.ms_errs_ERR_MSP_FILE_DOESNT_EXIST
    ERR_MSP_FAIL_GET_PROCESS_AFFINITY = _msparser.ms_errs_ERR_MSP_FAIL_GET_PROCESS_AFFINITY
    ERR_MSP_SYSMP_FAIL = _msparser.ms_errs_ERR_MSP_SYSMP_FAIL
    ERR_MSP_FAIL_GET_SYSINFO = _msparser.ms_errs_ERR_MSP_FAIL_GET_SYSINFO
    ERR_MSP_FAILED_TO_WRITE_FILE = _msparser.ms_errs_ERR_MSP_FAILED_TO_WRITE_FILE
    ERR_MSP_FRAGMENTATION_RULES = _msparser.ms_errs_ERR_MSP_FRAGMENTATION_RULES
    ERR_MSP_IN_MASSES_FILE = _msparser.ms_errs_ERR_MSP_IN_MASSES_FILE
    ERR_MSP_INVALID_MASS_IN_MASSES_FILE = _msparser.ms_errs_ERR_MSP_INVALID_MASS_IN_MASSES_FILE
    ERR_MSP_DUPLICATE_MOD = _msparser.ms_errs_ERR_MSP_DUPLICATE_MOD
    ERR_MSP_RESIDUE_AND_TERMINUS_MOD = _msparser.ms_errs_ERR_MSP_RESIDUE_AND_TERMINUS_MOD
    ERR_MSP_TOO_MANY_MODS_IN_MOD_FILE = _msparser.ms_errs_ERR_MSP_TOO_MANY_MODS_IN_MOD_FILE
    ERR_MSP_NO_COMMAS_IN_MOD_NAME = _msparser.ms_errs_ERR_MSP_NO_COMMAS_IN_MOD_NAME
    ERR_MSP_IN_MODS_FILE = _msparser.ms_errs_ERR_MSP_IN_MODS_FILE
    ERR_MSP_MISSING_DEFINITION_END = _msparser.ms_errs_ERR_MSP_MISSING_DEFINITION_END
    ERR_MSP_NO_SUCH_MOD = _msparser.ms_errs_ERR_MSP_NO_SUCH_MOD
    ERR_MSP_ENZYME_FILE_FORMAT = _msparser.ms_errs_ERR_MSP_ENZYME_FILE_FORMAT
    ERR_MSP_MISSING_ENZYME_TITLE = _msparser.ms_errs_ERR_MSP_MISSING_ENZYME_TITLE
    ERR_MSP_ENZYME_DEFINITION_PROBLEM = _msparser.ms_errs_ERR_MSP_ENZYME_DEFINITION_PROBLEM
    ERR_MSP_ENZYME_TOO_MANY_RULES = _msparser.ms_errs_ERR_MSP_ENZYME_TOO_MANY_RULES
    ERR_MSP_MISSING_MASCOT_DAT = _msparser.ms_errs_ERR_MSP_MISSING_MASCOT_DAT
    ERR_MSP_DB_USES_MISSING_RULE = _msparser.ms_errs_ERR_MSP_DB_USES_MISSING_RULE
    ERR_MSP_COMPILE_PARSE_RULE = _msparser.ms_errs_ERR_MSP_COMPILE_PARSE_RULE
    ERR_MSP_NEED_1_EXP_IN_PARSE_RULE = _msparser.ms_errs_ERR_MSP_NEED_1_EXP_IN_PARSE_RULE
    ERR_MSP_IN_MASCOT_DAT_DB_SECT = _msparser.ms_errs_ERR_MSP_IN_MASCOT_DAT_DB_SECT
    ERR_MSP_IN_OPTIONS_SECTION = _msparser.ms_errs_ERR_MSP_IN_OPTIONS_SECTION
    ERR_MSP_IN_CLUSTER_SECTION = _msparser.ms_errs_ERR_MSP_IN_CLUSTER_SECTION
    ERR_MSP_TOO_MANY_CPUS_IN_SUB_CLUSTER = _msparser.ms_errs_ERR_MSP_TOO_MANY_CPUS_IN_SUB_CLUSTER
    ERR_MSP_CRON_TOO_MANY_JOBS = _msparser.ms_errs_ERR_MSP_CRON_TOO_MANY_JOBS
    ERR_MSP_INVALID_PARSE_RULE = _msparser.ms_errs_ERR_MSP_INVALID_PARSE_RULE
    ERR_MSP_INVALID_PARSE_RULE_NO = _msparser.ms_errs_ERR_MSP_INVALID_PARSE_RULE_NO
    ERR_MSP_RULE_NO_ALREADY_DEFINED = _msparser.ms_errs_ERR_MSP_RULE_NO_ALREADY_DEFINED
    ERR_MSP_MISSING_QUOTE_IN_PARSE_RULE = _msparser.ms_errs_ERR_MSP_MISSING_QUOTE_IN_PARSE_RULE
    ERR_MSP_PARSE_LEN_EXCEED = _msparser.ms_errs_ERR_MSP_PARSE_LEN_EXCEED
    ERR_MSP_IN_TAXONOMY_SECTION = _msparser.ms_errs_ERR_MSP_IN_TAXONOMY_SECTION
    ERR_MSP_INCOMPATIBLE_TAX_RULES = _msparser.ms_errs_ERR_MSP_INCOMPATIBLE_TAX_RULES
    ERR_MSP_MAX_PREFIX_REMOVES = _msparser.ms_errs_ERR_MSP_MAX_PREFIX_REMOVES
    ERR_MSP_MAX_SUFFIX_REMOVES = _msparser.ms_errs_ERR_MSP_MAX_SUFFIX_REMOVES
    ERR_MSP_MAX_TAX_NO_BREAKS = _msparser.ms_errs_ERR_MSP_MAX_TAX_NO_BREAKS
    ERR_MSP_CRON_INVALID_CHAR = _msparser.ms_errs_ERR_MSP_CRON_INVALID_CHAR
    ERR_MSP_CRON_INVALID_NUMBER = _msparser.ms_errs_ERR_MSP_CRON_INVALID_NUMBER
    ERR_MSP_CRON_INVALID_STAR = _msparser.ms_errs_ERR_MSP_CRON_INVALID_STAR
    ERR_MSP_CRON_NO_NUM_BEFORE_COMMA = _msparser.ms_errs_ERR_MSP_CRON_NO_NUM_BEFORE_COMMA
    ERR_MSP_CRON_NO_NUM_BEFORE_MINUS = _msparser.ms_errs_ERR_MSP_CRON_NO_NUM_BEFORE_MINUS
    ERR_MSP_INVALID_PROCESSOR_LINE = _msparser.ms_errs_ERR_MSP_INVALID_PROCESSOR_LINE
    ERR_MSP_PROCESSOR_NOT_IN_SET = _msparser.ms_errs_ERR_MSP_PROCESSOR_NOT_IN_SET
    ERR_MSP_SPECIFY_UNAVAILABLE_PROCESSOR = _msparser.ms_errs_ERR_MSP_SPECIFY_UNAVAILABLE_PROCESSOR
    ERR_MSP_TOO_MANY_PROCESSORS = _msparser.ms_errs_ERR_MSP_TOO_MANY_PROCESSORS
    ERR_MSP_TOO_MANY_TH_PROCESSORS = _msparser.ms_errs_ERR_MSP_TOO_MANY_TH_PROCESSORS
    ERR_MSP_WWW_SECTION = _msparser.ms_errs_ERR_MSP_WWW_SECTION
    ERR_MSP_DUP_TAXONOMYRULE = _msparser.ms_errs_ERR_MSP_DUP_TAXONOMYRULE
    ERR_MSP_WRONG_ICAT_FILTER = _msparser.ms_errs_ERR_MSP_WRONG_ICAT_FILTER
    ERR_MSP_EXEC_AFTER_SEARCH_INVALID = _msparser.ms_errs_ERR_MSP_EXEC_AFTER_SEARCH_INVALID
    ERR_MSP_EXEC_AFTER_SEARCH_DEPENDS = _msparser.ms_errs_ERR_MSP_EXEC_AFTER_SEARCH_DEPENDS
    ERR_MSP_EXEC_AFTER_SEARCH_LOGGING = _msparser.ms_errs_ERR_MSP_EXEC_AFTER_SEARCH_LOGGING
    ERR_MSP_REPORTBUILDERCOLARR_INVALID = _msparser.ms_errs_ERR_MSP_REPORTBUILDERCOLARR_INVALID
    ERR_MSP_UNEXPECTED_LINE_OUT_OF_SECT = _msparser.ms_errs_ERR_MSP_UNEXPECTED_LINE_OUT_OF_SECT
    ERR_MSP_MISSING_SECTION = _msparser.ms_errs_ERR_MSP_MISSING_SECTION
    ERR_MSP_NO_LICENSE_FILE = _msparser.ms_errs_ERR_MSP_NO_LICENSE_FILE
    ERR_MSP_LICENSE_DES_CHECKSUM = _msparser.ms_errs_ERR_MSP_LICENSE_DES_CHECKSUM
    ERR_MSP_LICENSE_LINE_CHECKSUM = _msparser.ms_errs_ERR_MSP_LICENSE_LINE_CHECKSUM
    ERR_MSP_LICENSE_NOT_YET_AVAIL = _msparser.ms_errs_ERR_MSP_LICENSE_NOT_YET_AVAIL
    ERR_MSP_LICENSE_EXPIRED = _msparser.ms_errs_ERR_MSP_LICENSE_EXPIRED
    ERR_MSP_LICENSE_INTERNAL_CONFIG = _msparser.ms_errs_ERR_MSP_LICENSE_INTERNAL_CONFIG
    ERR_MSP_LICENSE_LINE_INVALID = _msparser.ms_errs_ERR_MSP_LICENSE_LINE_INVALID
    ERR_MSP_XML_SYSTEM_FAILED = _msparser.ms_errs_ERR_MSP_XML_SYSTEM_FAILED
    ERR_MSP_XML_NO_ROOT_ELEMENT = _msparser.ms_errs_ERR_MSP_XML_NO_ROOT_ELEMENT
    ERR_MSP_XML_TABLE_NOTFOUND = _msparser.ms_errs_ERR_MSP_XML_TABLE_NOTFOUND
    ERR_MSP_XML_FIELD_NOTFOUND = _msparser.ms_errs_ERR_MSP_XML_FIELD_NOTFOUND
    ERR_MSP_XML_INVALID_FIELD_FORMAT = _msparser.ms_errs_ERR_MSP_XML_INVALID_FIELD_FORMAT
    ERR_MSP_XML_LOCAL_SCHEMA_NOT_STORED = _msparser.ms_errs_ERR_MSP_XML_LOCAL_SCHEMA_NOT_STORED
    ERR_MSP_XML_ELEMENT_NOT_FOUND = _msparser.ms_errs_ERR_MSP_XML_ELEMENT_NOT_FOUND
    ERR_MSP_XML_MEMORY_ERROR = _msparser.ms_errs_ERR_MSP_XML_MEMORY_ERROR
    ERR_MSP_HTTP_TRANSMISSION_FAILED = _msparser.ms_errs_ERR_MSP_HTTP_TRANSMISSION_FAILED
    ERR_MSP_HTTP_INVALID_URL = _msparser.ms_errs_ERR_MSP_HTTP_INVALID_URL
    ERR_MSP_MASCOT_NOT_RUNNING = _msparser.ms_errs_ERR_MSP_MASCOT_NOT_RUNNING
    ERR_MSP_CONFLICT_BETWEEN_MODS = _msparser.ms_errs_ERR_MSP_CONFLICT_BETWEEN_MODS
    ERR_MSP_WRONG_MOD_VECTOR = _msparser.ms_errs_ERR_MSP_WRONG_MOD_VECTOR
    ERR_MSP_MOD_MUST_BE_VAR = _msparser.ms_errs_ERR_MSP_MOD_MUST_BE_VAR
    ERR_MSP_MALFORMED_PEPTIDE = _msparser.ms_errs_ERR_MSP_MALFORMED_PEPTIDE
    ERR_MSP_DOUBLE_CHARGE_NOT_ALLOWED = _msparser.ms_errs_ERR_MSP_DOUBLE_CHARGE_NOT_ALLOWED
    ERR_MSP_NO_ENZYME_SET = _msparser.ms_errs_ERR_MSP_NO_ENZYME_SET
    ERR_MSP_EMPTY_MOD = _msparser.ms_errs_ERR_MSP_EMPTY_MOD
    ERR_MSP_TAXONOMY_NO_TITLE = _msparser.ms_errs_ERR_MSP_TAXONOMY_NO_TITLE
    ERR_MSP_TAXONOMY_NO_COMMAS = _msparser.ms_errs_ERR_MSP_TAXONOMY_NO_COMMAS
    ERR_MSP_TAXONOMY_WRONG_LINE = _msparser.ms_errs_ERR_MSP_TAXONOMY_WRONG_LINE
    ERR_MSP_TAXONOMY_DEFINITION_END = _msparser.ms_errs_ERR_MSP_TAXONOMY_DEFINITION_END
    ERR_MSP_TAXONOMY_CONFLICT_PARENTS = _msparser.ms_errs_ERR_MSP_TAXONOMY_CONFLICT_PARENTS
    ERR_MSP_TAXONOMY_INVALID_NODE_FILE = _msparser.ms_errs_ERR_MSP_TAXONOMY_INVALID_NODE_FILE
    ERR_MSP_TAXONOMY_MISSING_NODE_FILE = _msparser.ms_errs_ERR_MSP_TAXONOMY_MISSING_NODE_FILE
    ERR_MSP_SECURITY_INVALID_SESSION_ID = _msparser.ms_errs_ERR_MSP_SECURITY_INVALID_SESSION_ID
    ERR_MSP_SECURITY_NOT_ADMIN_SESSION = _msparser.ms_errs_ERR_MSP_SECURITY_NOT_ADMIN_SESSION
    ERR_MSP_SECURITY_DUPE_USER_ID = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_USER_ID
    ERR_MSP_SECURITY_DUPE_USER_NAME = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_USER_NAME
    ERR_MSP_SECURITY_BAD_USER_NAME = _msparser.ms_errs_ERR_MSP_SECURITY_BAD_USER_NAME
    ERR_MSP_SECURITY_USERNAME_NOT_FOUND = _msparser.ms_errs_ERR_MSP_SECURITY_USERNAME_NOT_FOUND
    ERR_MSP_SECURITY_USERID_NOT_FOUND = _msparser.ms_errs_ERR_MSP_SECURITY_USERID_NOT_FOUND
    ERR_MSP_SECURITY_DUPE_GROUP_ID = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_GROUP_ID
    ERR_MSP_SECURITY_DUPE_GROUP_NAME = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_GROUP_NAME
    ERR_MSP_SECURITY_BAD_GROUP_NAME = _msparser.ms_errs_ERR_MSP_SECURITY_BAD_GROUP_NAME
    ERR_MSP_SECURITY_GROUPNAME_NOT_FOUND = _msparser.ms_errs_ERR_MSP_SECURITY_GROUPNAME_NOT_FOUND
    ERR_MSP_SECURITY_GROUPID_NOT_FOUND = _msparser.ms_errs_ERR_MSP_SECURITY_GROUPID_NOT_FOUND
    ERR_MSP_SECURITY_FAIL_LOAD_SEC = _msparser.ms_errs_ERR_MSP_SECURITY_FAIL_LOAD_SEC
    ERR_MSP_SECURITY_FAIL_LOAD_USER = _msparser.ms_errs_ERR_MSP_SECURITY_FAIL_LOAD_USER
    ERR_MSP_SECURITY_FAIL_LOAD_GROUP = _msparser.ms_errs_ERR_MSP_SECURITY_FAIL_LOAD_GROUP
    ERR_MSP_SECURITY_DEL_SPECIAL_GROUP = _msparser.ms_errs_ERR_MSP_SECURITY_DEL_SPECIAL_GROUP
    ERR_MSP_SECURITY_DEL_SPECIAL_USER = _msparser.ms_errs_ERR_MSP_SECURITY_DEL_SPECIAL_USER
    ERR_MSP_SECURITY_DISABLE_ADMIN = _msparser.ms_errs_ERR_MSP_SECURITY_DISABLE_ADMIN
    ERR_MSP_SECURITY_DEL_ADMIN_RIGHTS = _msparser.ms_errs_ERR_MSP_SECURITY_DEL_ADMIN_RIGHTS
    ERR_MSP_SECURITY_DEL_ADMIN_FROM_GP = _msparser.ms_errs_ERR_MSP_SECURITY_DEL_ADMIN_FROM_GP
    ERR_MSP_SECURITY_DUPE_GROUP_NAME_U = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_GROUP_NAME_U
    ERR_MSP_SECURITY_DUPE_USER_NAME_U = _msparser.ms_errs_ERR_MSP_SECURITY_DUPE_USER_NAME_U
    ERR_MSP_SECURITY_OLD_PW_INVALID = _msparser.ms_errs_ERR_MSP_SECURITY_OLD_PW_INVALID
    ERR_MSP_SECURITY_NO_GUEST_PWD = _msparser.ms_errs_ERR_MSP_SECURITY_NO_GUEST_PWD
    ERR_MSP_SECURITY_PASSWORD_TOO_SHORT = _msparser.ms_errs_ERR_MSP_SECURITY_PASSWORD_TOO_SHORT
    ERR_MSP_SECURITY_FAIL_SAVE_SEC = _msparser.ms_errs_ERR_MSP_SECURITY_FAIL_SAVE_SEC
    ERR_MSP_SECURITY_NO_RIGHTS_UPD_USR = _msparser.ms_errs_ERR_MSP_SECURITY_NO_RIGHTS_UPD_USR
    ERR_MSP_SECURITY_INVALIDUSER = _msparser.ms_errs_ERR_MSP_SECURITY_INVALIDUSER
    ERR_MSP_SECURITY_INVALIDPASSWORD = _msparser.ms_errs_ERR_MSP_SECURITY_INVALIDPASSWORD
    ERR_MSP_SECURITY_MISSINGSESSIONFILE = _msparser.ms_errs_ERR_MSP_SECURITY_MISSINGSESSIONFILE
    ERR_MSP_SECURITY_SAVESESSIONFILE = _msparser.ms_errs_ERR_MSP_SECURITY_SAVESESSIONFILE
    ERR_MSP_SECURITY_TIMEDOUT = _msparser.ms_errs_ERR_MSP_SECURITY_TIMEDOUT
    ERR_MSP_SECURITY_DIFFERENTIPADDR = _msparser.ms_errs_ERR_MSP_SECURITY_DIFFERENTIPADDR
    ERR_MSP_SECURITY_PASSWORDEXPIRED = _msparser.ms_errs_ERR_MSP_SECURITY_PASSWORDEXPIRED
    ERR_MSP_SECURITY_NOTLOGGEDIN = _msparser.ms_errs_ERR_MSP_SECURITY_NOTLOGGEDIN
    ERR_MSP_SECURITY_INVALIDSESSION = _msparser.ms_errs_ERR_MSP_SECURITY_INVALIDSESSION
    ERR_MSP_SECURITY_NOSAVEPARAMS = _msparser.ms_errs_ERR_MSP_SECURITY_NOSAVEPARAMS
    ERR_MSP_SECURITY_SESSIONDESTROYED = _msparser.ms_errs_ERR_MSP_SECURITY_SESSIONDESTROYED
    ERR_MSP_SECURITY_NOCREATEGUEST = _msparser.ms_errs_ERR_MSP_SECURITY_NOCREATEGUEST
    ERR_MSP_SECURITY_UPDATESESS = _msparser.ms_errs_ERR_MSP_SECURITY_UPDATESESS
    ERR_MSP_SECURITY_ACCOUNT_DISABLED = _msparser.ms_errs_ERR_MSP_SECURITY_ACCOUNT_DISABLED
    ERR_MSP_SECURITY_NOTNORMALUSER = _msparser.ms_errs_ERR_MSP_SECURITY_NOTNORMALUSER
    ERR_MSP_SECURITY_SAMEPASSWORD = _msparser.ms_errs_ERR_MSP_SECURITY_SAMEPASSWORD
    ERR_MSP_SECURITY_SPOOFATTEMPT1 = _msparser.ms_errs_ERR_MSP_SECURITY_SPOOFATTEMPT1
    ERR_MSP_SECURITY_SPOOFATTEMPT2 = _msparser.ms_errs_ERR_MSP_SECURITY_SPOOFATTEMPT2
    ERR_MSP_SECURITY_SPOOFATTEMPT3 = _msparser.ms_errs_ERR_MSP_SECURITY_SPOOFATTEMPT3
    ERR_MSP_SECURITY_SPOOFATTEMPT4 = _msparser.ms_errs_ERR_MSP_SECURITY_SPOOFATTEMPT4
    ERR_MSP_SECURITY_FAILGETINTEGRAURL = _msparser.ms_errs_ERR_MSP_SECURITY_FAILGETINTEGRAURL
    ERR_MSP_SECURITY_FAILGETINTEGRA = _msparser.ms_errs_ERR_MSP_SECURITY_FAILGETINTEGRA
    ERR_MSP_SECURITY_INTEGRACONNFORMAT = _msparser.ms_errs_ERR_MSP_SECURITY_INTEGRACONNFORMAT
    ERR_MSP_SECURITY_INTEGRAINVALIDPW = _msparser.ms_errs_ERR_MSP_SECURITY_INTEGRAINVALIDPW
    ERR_MSP_SECURITY_INTEGRAINVALIDCO = _msparser.ms_errs_ERR_MSP_SECURITY_INTEGRAINVALIDCO
    ERR_MSP_SECURITY_LOADSESSIONFILE = _msparser.ms_errs_ERR_MSP_SECURITY_LOADSESSIONFILE
    ERR_MSP_SECURITY_NOT_INTEGRA_USER = _msparser.ms_errs_ERR_MSP_SECURITY_NOT_INTEGRA_USER
    ERR_MSP_SECURITY_NOT_ENABLED = _msparser.ms_errs_ERR_MSP_SECURITY_NOT_ENABLED
    ERR_MSP_SECURITY_NO_INTEGRA_LOGIN = _msparser.ms_errs_ERR_MSP_SECURITY_NO_INTEGRA_LOGIN
    ERR_MSP_SESSION_UTIME_FAIL = _msparser.ms_errs_ERR_MSP_SESSION_UTIME_FAIL
    ERR_MSP_SECURITY_ADDUSER = _msparser.ms_errs_ERR_MSP_SECURITY_ADDUSER
    ERR_MSP_SECURITY_DELUSER = _msparser.ms_errs_ERR_MSP_SECURITY_DELUSER
    ERR_MSP_SECURITY_UPDATEUSER = _msparser.ms_errs_ERR_MSP_SECURITY_UPDATEUSER
    ERR_MSP_SECURITY_UPDATEPW = _msparser.ms_errs_ERR_MSP_SECURITY_UPDATEPW
    ERR_MSP_SECURITY_ADDGROUP = _msparser.ms_errs_ERR_MSP_SECURITY_ADDGROUP
    ERR_MSP_SECURITY_DELETEGROUP = _msparser.ms_errs_ERR_MSP_SECURITY_DELETEGROUP
    ERR_MSP_SECURITY_UPDATEGROUP = _msparser.ms_errs_ERR_MSP_SECURITY_UPDATEGROUP
    ERR_MSP_SECURITY_GETALLGROUPIDS = _msparser.ms_errs_ERR_MSP_SECURITY_GETALLGROUPIDS
    ERR_MSP_SECURITY_GETGROUPOK = _msparser.ms_errs_ERR_MSP_SECURITY_GETGROUPOK
    ERR_MSP_SECURITY_GETGROUPFAIL = _msparser.ms_errs_ERR_MSP_SECURITY_GETGROUPFAIL
    ERR_MSP_SECURITY_GETUSEROK = _msparser.ms_errs_ERR_MSP_SECURITY_GETUSEROK
    ERR_MSP_SECURITY_GETUSERFAIL = _msparser.ms_errs_ERR_MSP_SECURITY_GETUSERFAIL
    ERR_MSP_SECURITY_GETUSERFROMIDOK = _msparser.ms_errs_ERR_MSP_SECURITY_GETUSERFROMIDOK
    ERR_MSP_SECURITY_GETUSERFROMIDFAIL = _msparser.ms_errs_ERR_MSP_SECURITY_GETUSERFROMIDFAIL
    ERR_MSP_SECURITY_GETALLUSERIDS = _msparser.ms_errs_ERR_MSP_SECURITY_GETALLUSERIDS
    ERR_MSP_SECURITY_GETGROUPFROMIDOK = _msparser.ms_errs_ERR_MSP_SECURITY_GETGROUPFROMIDOK
    ERR_MSP_SECURITY_GETGROUPFROMIDFAIL = _msparser.ms_errs_ERR_MSP_SECURITY_GETGROUPFROMIDFAIL
    ERR_MSP_SECURITY_GETPERMTASKSOK = _msparser.ms_errs_ERR_MSP_SECURITY_GETPERMTASKSOK
    ERR_MSP_SECURITY_GETPERMTASKSFAIL = _msparser.ms_errs_ERR_MSP_SECURITY_GETPERMTASKSFAIL
    ERR_MSP_SECURITY_UPDATEALLSESSFILES = _msparser.ms_errs_ERR_MSP_SECURITY_UPDATEALLSESSFILES
    ERR_MSP_SECURITY_GETINTEGRAUSERS1 = _msparser.ms_errs_ERR_MSP_SECURITY_GETINTEGRAUSERS1
    ERR_MSP_SECURITY_GETINTEGRAUSERS2 = _msparser.ms_errs_ERR_MSP_SECURITY_GETINTEGRAUSERS2
    ERR_MSP_SECURITY_GETINTEGRAUSERS3 = _msparser.ms_errs_ERR_MSP_SECURITY_GETINTEGRAUSERS3
    ERR_MSP_SECURITY_VALIDATEINTEGRAPW1 = _msparser.ms_errs_ERR_MSP_SECURITY_VALIDATEINTEGRAPW1
    ERR_MSP_SECURITY_VALIDATEINTEGRAPW2 = _msparser.ms_errs_ERR_MSP_SECURITY_VALIDATEINTEGRAPW2
    ERR_MSP_SECURITY_VALIDATEINTEGRAPW3 = _msparser.ms_errs_ERR_MSP_SECURITY_VALIDATEINTEGRAPW3
    ERR_MSP_SECURITY_VALIDATEINTEGRACO1 = _msparser.ms_errs_ERR_MSP_SECURITY_VALIDATEINTEGRACO1
    ERR_MSP_SECURITY_VALIDATEINTEGRACO2 = _msparser.ms_errs_ERR_MSP_SECURITY_VALIDATEINTEGRACO2
    ERR_MSP_SECURITY_MSSESSIONCTOR = _msparser.ms_errs_ERR_MSP_SECURITY_MSSESSIONCTOR
    ERR_MSP_SECURITY_MSSESSCOOKIE = _msparser.ms_errs_ERR_MSP_SECURITY_MSSESSCOOKIE
    ERR_MSP_SECURITY_LOADINGSESS = _msparser.ms_errs_ERR_MSP_SECURITY_LOADINGSESS
    ERR_MSP_SECURITY_MSSESSLOGIN = _msparser.ms_errs_ERR_MSP_SECURITY_MSSESSLOGIN
    ERR_MSP_SECURITY_MSSESSINTEGRA = _msparser.ms_errs_ERR_MSP_SECURITY_MSSESSINTEGRA
    ERR_MSP_SECURITY_MSSESSRESULTSPERM = _msparser.ms_errs_ERR_MSP_SECURITY_MSSESSRESULTSPERM
    ERR_MSP_QUANT_FAILEDLOAD = _msparser.ms_errs_ERR_MSP_QUANT_FAILEDLOAD
    ERR_MSP_QUANT_FAILEDSAVE = _msparser.ms_errs_ERR_MSP_QUANT_FAILEDSAVE
    ERR_MSP_QUANT_HELPER_FAILEDINIT = _msparser.ms_errs_ERR_MSP_QUANT_HELPER_FAILEDINIT
    ERR_MSP_QUANTITATION_FAILEDINIT = _msparser.ms_errs_ERR_MSP_QUANTITATION_FAILEDINIT
    ERR_MSP_MS2QUANTITATION_FAILEDINIT = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_FAILEDINIT
    ERR_MSP_MS2QUANTITATION_NORM_NO_SUM = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_NORM_NO_SUM
    ERR_MSP_MS2QUANTITATION_NORM_UNIMP = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_NORM_UNIMP
    ERR_MSP_MS2QUANTITATION_PROTWEIGH = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_PROTWEIGH
    ERR_MSP_MS2QUANTITATION_PROTR_UNIM = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_PROTR_UNIM
    ERR_MSP_MS2QUANTITATION_COMPONENTS = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_COMPONENTS
    ERR_MSP_MS2QUANTITATION_QUERY_SECS = _msparser.ms_errs_ERR_MSP_MS2QUANTITATION_QUERY_SECS
    ERR_MSP_CUSTQUANTITATION_FAILEDINIT = _msparser.ms_errs_ERR_MSP_CUSTQUANTITATION_FAILEDINIT
    ERR_MSP_CUSTQUANTITATION_PROTR_UNIM = _msparser.ms_errs_ERR_MSP_CUSTQUANTITATION_PROTR_UNIM
    ERR_MSP_UMOD_FAILEDLOAD = _msparser.ms_errs_ERR_MSP_UMOD_FAILEDLOAD
    ERR_MSP_UMOD_FAILEDSAVE = _msparser.ms_errs_ERR_MSP_UMOD_FAILEDSAVE
    ERR_MSP_XMLSCHEMA_FAILEDLOAD = _msparser.ms_errs_ERR_MSP_XMLSCHEMA_FAILEDLOAD
    ERR_MSP_XMLSCHEMA_FAILEDSAVE = _msparser.ms_errs_ERR_MSP_XMLSCHEMA_FAILEDSAVE
    ERR_MSP_ZIP_ENDIAN = _msparser.ms_errs_ERR_MSP_ZIP_ENDIAN
    ERR_MSP_ZIP_OUTOFMEMORY = _msparser.ms_errs_ERR_MSP_ZIP_OUTOFMEMORY
    ERR_MSP_ZIP_BUFTOOSMALL = _msparser.ms_errs_ERR_MSP_ZIP_BUFTOOSMALL
    ERR_MSP_ZIP_INVALIDDATA = _msparser.ms_errs_ERR_MSP_ZIP_INVALIDDATA
    ERR_MSP_ZIP_UNKNOWN = _msparser.ms_errs_ERR_MSP_ZIP_UNKNOWN
    ERR_MSP_ZIP_LENGTHDIFFERS = _msparser.ms_errs_ERR_MSP_ZIP_LENGTHDIFFERS
    ERR_MSP_ZIP_UNCOMPRESSEDDATATOOLONG = _msparser.ms_errs_ERR_MSP_ZIP_UNCOMPRESSEDDATATOOLONG
    ERR_MSP_ZIP_ZEROLENGTH = _msparser.ms_errs_ERR_MSP_ZIP_ZEROLENGTH
    ERR_MSP_ZIP_VERSIONERROR = _msparser.ms_errs_ERR_MSP_ZIP_VERSIONERROR
    ERR_MSP_ZIP_NOTSTREAMING = _msparser.ms_errs_ERR_MSP_ZIP_NOTSTREAMING
    ERR_MSP_ZIP_STREAMERROR = _msparser.ms_errs_ERR_MSP_ZIP_STREAMERROR
    ERR_MSP_INST_LOGICALPERPHYSICALCPU = _msparser.ms_errs_ERR_MSP_INST_LOGICALPERPHYSICALCPU
    ERR_MSP_INST_INVALIDCPUINFO = _msparser.ms_errs_ERR_MSP_INST_INVALIDCPUINFO
    ERR_MSP_INST_NUMTHREADS = _msparser.ms_errs_ERR_MSP_INST_NUMTHREADS
    ERR_MSP_INST_NOTMASCOTDATOK = _msparser.ms_errs_ERR_MSP_INST_NOTMASCOTDATOK
    ERR_MSP_INST_MASCOTDATOK = _msparser.ms_errs_ERR_MSP_INST_MASCOTDATOK
    ERR_MSP_INST_APPENDTAXONOMY = _msparser.ms_errs_ERR_MSP_INST_APPENDTAXONOMY
    ERR_MSP_INST_ADDINGSWISSPROT = _msparser.ms_errs_ERR_MSP_INST_ADDINGSWISSPROT
    ERR_MSP_INST_MISSINGSWISSPROT = _msparser.ms_errs_ERR_MSP_INST_MISSINGSWISSPROT
    ERR_MSP_INST_CHANGEDBTAXONOMY = _msparser.ms_errs_ERR_MSP_INST_CHANGEDBTAXONOMY
    ERR_MSP_INST_APPENDPARSERULE = _msparser.ms_errs_ERR_MSP_INST_APPENDPARSERULE
    ERR_MSP_INST_FAILADDPARSERULE = _msparser.ms_errs_ERR_MSP_INST_FAILADDPARSERULE
    ERR_MSP_INST_ADDOPTIONSSECTION = _msparser.ms_errs_ERR_MSP_INST_ADDOPTIONSSECTION
    ERR_MSP_INST_SETOPTIONSSECTION = _msparser.ms_errs_ERR_MSP_INST_SETOPTIONSSECTION
    ERR_MSP_INST_CLUSTERSECTION = _msparser.ms_errs_ERR_MSP_INST_CLUSTERSECTION
    ERR_MSP_INST_CANTGETHOSTNAME = _msparser.ms_errs_ERR_MSP_INST_CANTGETHOSTNAME
    ERR_MSP_INST_NOSUBCLUSTERSET = _msparser.ms_errs_ERR_MSP_INST_NOSUBCLUSTERSET
    ERR_MSP_INST_CHANGEPARSERULE = _msparser.ms_errs_ERR_MSP_INST_CHANGEPARSERULE
    ERR_MSP_HTTP_WEBAUTHERROR = _msparser.ms_errs_ERR_MSP_HTTP_WEBAUTHERROR
    ERR_MSP_HTTP_VERSIONERROR = _msparser.ms_errs_ERR_MSP_HTTP_VERSIONERROR
    ERR_MSP_HTTP_MISSINGLOGINERROR = _msparser.ms_errs_ERR_MSP_HTTP_MISSINGLOGINERROR
    ERR_MSP_HTTP_MISSINGLOGININFO = _msparser.ms_errs_ERR_MSP_HTTP_MISSINGLOGININFO
    ERR_MSP_HTTP_LOGINPARSERERROR = _msparser.ms_errs_ERR_MSP_HTTP_LOGINPARSERERROR
    ERR_MSP_HTTP_LOGINPARSERERRORINT = _msparser.ms_errs_ERR_MSP_HTTP_LOGINPARSERERRORINT
    ERR_MSP_HTTP_LOGINSERVERERROR = _msparser.ms_errs_ERR_MSP_HTTP_LOGINSERVERERROR
    ERR_MSP_HTTP_LOGINSERVERERRORINT = _msparser.ms_errs_ERR_MSP_HTTP_LOGINSERVERERRORINT
    ERR_MSP_HTTP_LOGINERROR = _msparser.ms_errs_ERR_MSP_HTTP_LOGINERROR
    ERR_MSP_HTTP_LOGINERRORINT = _msparser.ms_errs_ERR_MSP_HTTP_LOGINERRORINT
    ERR_MSP_HTTP_CHANGEPASSWORDDISABLED = _msparser.ms_errs_ERR_MSP_HTTP_CHANGEPASSWORDDISABLED
    ERR_MSP_HTTP_OPENOUTPUTFILEFAILED = _msparser.ms_errs_ERR_MSP_HTTP_OPENOUTPUTFILEFAILED
    ERR_MSP_HTTP_WRITEOUTPUTFILEFAILED = _msparser.ms_errs_ERR_MSP_HTTP_WRITEOUTPUTFILEFAILED
    ERR_MSP_HTTP_RELOGINFAILED = _msparser.ms_errs_ERR_MSP_HTTP_RELOGINFAILED
    ERR_MSP_HTTP_SETPROXYFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETPROXYFAILED
    ERR_MSP_HTTP_SETPROXYUSERNAMEFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETPROXYUSERNAMEFAILED
    ERR_MSP_HTTP_SETPROXYPASSWORDFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETPROXYPASSWORDFAILED
    ERR_MSP_HTTP_SETHTTPUSERNAMEFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETHTTPUSERNAMEFAILED
    ERR_MSP_HTTP_SETHTTPPASSWORDFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETHTTPPASSWORDFAILED
    ERR_MSP_HTTP_SETREDIRECTFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SETREDIRECTFAILED
    ERR_MSP_HTTP_URLSTRING = _msparser.ms_errs_ERR_MSP_HTTP_URLSTRING
    ERR_MSP_HTTP_NORESPONSE = _msparser.ms_errs_ERR_MSP_HTTP_NORESPONSE
    ERR_MSP_HTTP_QUERYSTATUSRESULT = _msparser.ms_errs_ERR_MSP_HTTP_QUERYSTATUSRESULT
    ERR_MSP_HTTP_QUERYSTATUSFAILED = _msparser.ms_errs_ERR_MSP_HTTP_QUERYSTATUSFAILED
    ERR_MSP_HTTP_OPENSESSIONFAILED = _msparser.ms_errs_ERR_MSP_HTTP_OPENSESSIONFAILED
    ERR_MSP_HTTP_OPENCONNECTIONFAILED = _msparser.ms_errs_ERR_MSP_HTTP_OPENCONNECTIONFAILED
    ERR_MSP_HTTP_OPENREQUESTFAILED = _msparser.ms_errs_ERR_MSP_HTTP_OPENREQUESTFAILED
    ERR_MSP_HTTP_CLOSESESSIONFAILED = _msparser.ms_errs_ERR_MSP_HTTP_CLOSESESSIONFAILED
    ERR_MSP_HTTP_CLOSECONNECTIONFAILED = _msparser.ms_errs_ERR_MSP_HTTP_CLOSECONNECTIONFAILED
    ERR_MSP_HTTP_CLOSEREQUESTFAILED = _msparser.ms_errs_ERR_MSP_HTTP_CLOSEREQUESTFAILED
    ERR_MSP_HTTP_ABORTEDBYUSER = _msparser.ms_errs_ERR_MSP_HTTP_ABORTEDBYUSER
    ERR_MSP_HTTP_MAXCONECTIONSFAILED = _msparser.ms_errs_ERR_MSP_HTTP_MAXCONECTIONSFAILED
    ERR_MSP_HTTP_MAXCONECTIONS10FAILED = _msparser.ms_errs_ERR_MSP_HTTP_MAXCONECTIONS10FAILED
    ERR_MSP_HTTP_READRESPONSEFAILED = _msparser.ms_errs_ERR_MSP_HTTP_READRESPONSEFAILED
    ERR_MSP_HTTP_SENDREQUESTFAILED = _msparser.ms_errs_ERR_MSP_HTTP_SENDREQUESTFAILED
    ERR_MSP_HTTP_QUERYDATAFAILED = _msparser.ms_errs_ERR_MSP_HTTP_QUERYDATAFAILED
    ERR_MSP_HTTP_READDATAFAILED = _msparser.ms_errs_ERR_MSP_HTTP_READDATAFAILED
    ERR_MSP_HTTP_GETPROXYFAILED = _msparser.ms_errs_ERR_MSP_HTTP_GETPROXYFAILED
    ERR_MSP_CACHE_OPENFAILED = _msparser.ms_errs_ERR_MSP_CACHE_OPENFAILED
    ERR_MSP_CACHE_READFAILED = _msparser.ms_errs_ERR_MSP_CACHE_READFAILED
    ERR_MSP_CACHE_INVALIDFORMAT = _msparser.ms_errs_ERR_MSP_CACHE_INVALIDFORMAT
    ERR_MSP_CACHE_SIGNATUREINVALID = _msparser.ms_errs_ERR_MSP_CACHE_SIGNATUREINVALID
    ERR_MSP_CACHE_DATAOFFSETINVALID = _msparser.ms_errs_ERR_MSP_CACHE_DATAOFFSETINVALID
    ERR_MSP_CACHE_FILESEEKFAILED = _msparser.ms_errs_ERR_MSP_CACHE_FILESEEKFAILED
    ERR_MSP_CACHE_INVALIDVERSION = _msparser.ms_errs_ERR_MSP_CACHE_INVALIDVERSION
    ERR_MSP_CACHE_INVALIDSTREAMID = _msparser.ms_errs_ERR_MSP_CACHE_INVALIDSTREAMID
    ERR_MSP_CACHE_INVALIDSTREAMPOSITION = _msparser.ms_errs_ERR_MSP_CACHE_INVALIDSTREAMPOSITION
    ERR_MSP_CACHE_DUPLICATESTREAMID = _msparser.ms_errs_ERR_MSP_CACHE_DUPLICATESTREAMID
    ERR_MSP_CACHE_WRITEFAILED = _msparser.ms_errs_ERR_MSP_CACHE_WRITEFAILED
    ERR_MSP_CACHE_STREAMNOTFOUND = _msparser.ms_errs_ERR_MSP_CACHE_STREAMNOTFOUND
    ERR_MSP_CACHE_WRITETRUNCATED = _msparser.ms_errs_ERR_MSP_CACHE_WRITETRUNCATED
    ERR_MSP_CACHE_MODIFYREADONLYMODE = _msparser.ms_errs_ERR_MSP_CACHE_MODIFYREADONLYMODE
    ERR_MSP_CACHE_MODIFYCLOSED = _msparser.ms_errs_ERR_MSP_CACHE_MODIFYCLOSED
    ERR_MSP_CACHE_UNINITIALISEDSTREAM = _msparser.ms_errs_ERR_MSP_CACHE_UNINITIALISEDSTREAM
    ERR_MSP_HTTP_XMLUPLOADFAILED = _msparser.ms_errs_ERR_MSP_HTTP_XMLUPLOADFAILED
    ERR_MSP_LASTONE = _msparser.ms_errs_ERR_MSP_LASTONE
    def __init__(self): 
        this = _msparser.new_ms_errs()
        try: self.this.append(this)
        except: self.this = this
    def isValid(self): return _msparser.ms_errs_isValid(self)
    def appendErrors(self, *args): return _msparser.ms_errs_appendErrors(self, *args)
    def getNumberOfErrors(self): return _msparser.ms_errs_getNumberOfErrors(self)
    def clearAllErrors(self): return _msparser.ms_errs_clearAllErrors(self)
    def getErrorNumber(self, *args): return _msparser.ms_errs_getErrorNumber(self, *args)
    def getLastError(self): return _msparser.ms_errs_getLastError(self)
    def getErrorString(self, *args): return _msparser.ms_errs_getErrorString(self, *args)
    def getLastErrorString(self): return _msparser.ms_errs_getLastErrorString(self)
    def getErrorSeverity(self, *args): return _msparser.ms_errs_getErrorSeverity(self, *args)
    def getErrorRepeats(self, *args): return _msparser.ms_errs_getErrorRepeats(self, *args)
    def setLoggingFile(self, *args): return _msparser.ms_errs_setLoggingFile(self, *args)
    def getLoggingLevel(self): return _msparser.ms_errs_getLoggingLevel(self)
    def setLoggingLevel(self, *args): return _msparser.ms_errs_setLoggingLevel(self, *args)
    def getCombineRepeats(self): return _msparser.ms_errs_getCombineRepeats(self)
    def setCombineRepeats(self, *args): return _msparser.ms_errs_setCombineRepeats(self, *args)
    __swig_destroy__ = _msparser.delete_ms_errs
    __del__ = lambda self : None;
ms_errs_swigregister = _msparser.ms_errs_swigregister
ms_errs_swigregister(ms_errs)

class ms_errors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_errors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_errors, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _msparser.new_ms_errors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_errors
    __del__ = lambda self : None;
    def appendErrors(self, *args): return _msparser.ms_errors_appendErrors(self, *args)
    def clearAllErrors(self): return _msparser.ms_errors_clearAllErrors(self)
    def isValid(self): return _msparser.ms_errors_isValid(self)
    def getLastErrorString(self): return _msparser.ms_errors_getLastErrorString(self)
    def getLastError(self): return _msparser.ms_errors_getLastError(self)
    def getErrorHandler(self, *args): return _msparser.ms_errors_getErrorHandler(self, *args)
ms_errors_swigregister = _msparser.ms_errors_swigregister
ms_errors_swigregister(ms_errors)

class ms_customproperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_customproperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_customproperty, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _msparser.new_ms_customproperty()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_customproperty
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_customproperty_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_customproperty_copyFrom(self, *args)
    def getNumberOfProperties(self): return _msparser.ms_customproperty_getNumberOfProperties(self)
    def getPropertyName(self, *args): return _msparser.ms_customproperty_getPropertyName(self, *args)
    def setPropertyName(self, *args): return _msparser.ms_customproperty_setPropertyName(self, *args)
    def findProperty(self, *args): return _msparser.ms_customproperty_findProperty(self, *args)
    def findPropertyBeginning(self, *args): return _msparser.ms_customproperty_findPropertyBeginning(self, *args)
    def getPropValStringByName(self, *args): return _msparser.ms_customproperty_getPropValStringByName(self, *args)
    def getPropValStringByNumber(self, *args): return _msparser.ms_customproperty_getPropValStringByNumber(self, *args)
    def getDelimiterByNumber(self, *args): return _msparser.ms_customproperty_getDelimiterByNumber(self, *args)
    def appendProperty(self, *args): return _msparser.ms_customproperty_appendProperty(self, *args)
    def appendText(self, *args): return _msparser.ms_customproperty_appendText(self, *args)
    def setPropValStringByName(self, *args): return _msparser.ms_customproperty_setPropValStringByName(self, *args)
    def setPropValCharByName(self, *args): return _msparser.ms_customproperty_setPropValCharByName(self, *args)
    def setPropValIntByName(self, *args): return _msparser.ms_customproperty_setPropValIntByName(self, *args)
    def setPropValInt64ByName(self, *args): return _msparser.ms_customproperty_setPropValInt64ByName(self, *args)
    def setPropValBoolByName(self, *args): return _msparser.ms_customproperty_setPropValBoolByName(self, *args)
    def setPropValFloatByName(self, *args): return _msparser.ms_customproperty_setPropValFloatByName(self, *args)
    def setPropValStringByNumber(self, *args): return _msparser.ms_customproperty_setPropValStringByNumber(self, *args)
    def getDefaultDelimiter(self): return _msparser.ms_customproperty_getDefaultDelimiter(self)
    def setDefaultDelimiter(self, *args): return _msparser.ms_customproperty_setDefaultDelimiter(self, *args)
    def delProp(self, *args): return _msparser.ms_customproperty_delProp(self, *args)
    def delPropStart(self, *args): return _msparser.ms_customproperty_delPropStart(self, *args)
    def delNonEmpty(self): return _msparser.ms_customproperty_delNonEmpty(self)
    def delPropByNumber(self, *args): return _msparser.ms_customproperty_delPropByNumber(self, *args)
    def uncommentProp(self, *args): return _msparser.ms_customproperty_uncommentProp(self, *args)
    def getPreceedingComments(self): return _msparser.ms_customproperty_getPreceedingComments(self)
    def setPreceedingComments(self, *args): return _msparser.ms_customproperty_setPreceedingComments(self, *args)
ms_customproperty_swigregister = _msparser.ms_customproperty_swigregister
ms_customproperty_swigregister(ms_customproperty)

class ms_fileutilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_fileutilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_fileutilities, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _msparser.new_ms_fileutilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["getLastModificationTime"] = lambda x: _msparser.ms_fileutilities_getLastModificationTime
    if _newclass:getLastModificationTime = staticmethod(_msparser.ms_fileutilities_getLastModificationTime)
    __swig_getmethods__["getFileSize"] = lambda x: _msparser.ms_fileutilities_getFileSize
    if _newclass:getFileSize = staticmethod(_msparser.ms_fileutilities_getFileSize)
    __swig_getmethods__["findMascotDat"] = lambda x: _msparser.ms_fileutilities_findMascotDat
    if _newclass:findMascotDat = staticmethod(_msparser.ms_fileutilities_findMascotDat)
    __swig_getmethods__["doesFileExist"] = lambda x: _msparser.ms_fileutilities_doesFileExist
    if _newclass:doesFileExist = staticmethod(_msparser.ms_fileutilities_doesFileExist)
    SAR_SUCCESS = _msparser.ms_fileutilities_SAR_SUCCESS
    SAR_FAIL_CHMOD = _msparser.ms_fileutilities_SAR_FAIL_CHMOD
    SAR_FAIL_GET_NAMED_SECURITY_INFO = _msparser.ms_fileutilities_SAR_FAIL_GET_NAMED_SECURITY_INFO
    SAR_FAIL_SET_ENTRIES_IN_ACL = _msparser.ms_fileutilities_SAR_FAIL_SET_ENTRIES_IN_ACL
    SAR_FAIL_SET_NAMED_SECURITY_INFO = _msparser.ms_fileutilities_SAR_FAIL_SET_NAMED_SECURITY_INFO
    SAR_FAIL_CHOWN = _msparser.ms_fileutilities_SAR_FAIL_CHOWN
    def setAccessRights(self, *args): return _msparser.ms_fileutilities_setAccessRights(self, *args)
    def getSARExtendedErrorCode(self): return _msparser.ms_fileutilities_getSARExtendedErrorCode(self)
    __swig_getmethods__["isDirectory"] = lambda x: _msparser.ms_fileutilities_isDirectory
    if _newclass:isDirectory = staticmethod(_msparser.ms_fileutilities_isDirectory)
    __swig_getmethods__["createDirectory"] = lambda x: _msparser.ms_fileutilities_createDirectory
    if _newclass:createDirectory = staticmethod(_msparser.ms_fileutilities_createDirectory)
    def findOpen(self, *args): return _msparser.ms_fileutilities_findOpen(self, *args)
    def findNext(self, *args): return _msparser.ms_fileutilities_findNext(self, *args)
    def findClose(self): return _msparser.ms_fileutilities_findClose(self)
    __swig_getmethods__["stripLastFolder"] = lambda x: _msparser.ms_fileutilities_stripLastFolder
    if _newclass:stripLastFolder = staticmethod(_msparser.ms_fileutilities_stripLastFolder)
    __swig_getmethods__["getMD5Sum"] = lambda x: _msparser.ms_fileutilities_getMD5Sum
    if _newclass:getMD5Sum = staticmethod(_msparser.ms_fileutilities_getMD5Sum)
    __swig_destroy__ = _msparser.delete_ms_fileutilities
    __del__ = lambda self : None;
ms_fileutilities_swigregister = _msparser.ms_fileutilities_swigregister
ms_fileutilities_swigregister(ms_fileutilities)

def ms_fileutilities_getLastModificationTime(*args):
  return _msparser.ms_fileutilities_getLastModificationTime(*args)
ms_fileutilities_getLastModificationTime = _msparser.ms_fileutilities_getLastModificationTime

def ms_fileutilities_getFileSize(*args):
  return _msparser.ms_fileutilities_getFileSize(*args)
ms_fileutilities_getFileSize = _msparser.ms_fileutilities_getFileSize

def ms_fileutilities_findMascotDat(*args):
  return _msparser.ms_fileutilities_findMascotDat(*args)
ms_fileutilities_findMascotDat = _msparser.ms_fileutilities_findMascotDat

def ms_fileutilities_doesFileExist(*args):
  return _msparser.ms_fileutilities_doesFileExist(*args)
ms_fileutilities_doesFileExist = _msparser.ms_fileutilities_doesFileExist

def ms_fileutilities_isDirectory(*args):
  return _msparser.ms_fileutilities_isDirectory(*args)
ms_fileutilities_isDirectory = _msparser.ms_fileutilities_isDirectory

def ms_fileutilities_createDirectory(*args):
  return _msparser.ms_fileutilities_createDirectory(*args)
ms_fileutilities_createDirectory = _msparser.ms_fileutilities_createDirectory

def ms_fileutilities_stripLastFolder(*args):
  return _msparser.ms_fileutilities_stripLastFolder(*args)
ms_fileutilities_stripLastFolder = _msparser.ms_fileutilities_stripLastFolder

def ms_fileutilities_getMD5Sum(*args):
  return _msparser.ms_fileutilities_getMD5Sum(*args)
ms_fileutilities_getMD5Sum = _msparser.ms_fileutilities_getMD5Sum

class ms_connection_settings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_connection_settings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_connection_settings, name)
    __repr__ = _swig_repr
    PROXY_TYPE_NO_PROXY = _msparser.ms_connection_settings_PROXY_TYPE_NO_PROXY
    PROXY_TYPE_FROM_REGISTRY = _msparser.ms_connection_settings_PROXY_TYPE_FROM_REGISTRY
    PROXY_TYPE_SPECIFY = _msparser.ms_connection_settings_PROXY_TYPE_SPECIFY
    PROXY_TYPE_WPAD = _msparser.ms_connection_settings_PROXY_TYPE_WPAD
    PROXY_TYPE_AUTO = _msparser.ms_connection_settings_PROXY_TYPE_AUTO
    HTTP_1_0 = _msparser.ms_connection_settings_HTTP_1_0
    HTTP_1_1 = _msparser.ms_connection_settings_HTTP_1_1
    HTTP_SYSTEM_DEFAULT = _msparser.ms_connection_settings_HTTP_SYSTEM_DEFAULT
    REDIRECT_POLICY_ALWAYS = _msparser.ms_connection_settings_REDIRECT_POLICY_ALWAYS
    REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = _msparser.ms_connection_settings_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP
    REDIRECT_POLICY_NEVER = _msparser.ms_connection_settings_REDIRECT_POLICY_NEVER
    def __init__(self, *args): 
        this = _msparser.new_ms_connection_settings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_connection_settings
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_connection_settings_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_connection_settings_copyFrom(self, *args)
    def setSessionID(self, *args): return _msparser.ms_connection_settings_setSessionID(self, *args)
    def setProxyServerType(self, *args): return _msparser.ms_connection_settings_setProxyServerType(self, *args)
    def getProxyServerType(self): return _msparser.ms_connection_settings_getProxyServerType(self)
    def setHttpProtocol(self, *args): return _msparser.ms_connection_settings_setHttpProtocol(self, *args)
    def getHttpProtocol(self): return _msparser.ms_connection_settings_getHttpProtocol(self)
    def setProxyServer(self, *args): return _msparser.ms_connection_settings_setProxyServer(self, *args)
    def setProxyUsername(self, *args): return _msparser.ms_connection_settings_setProxyUsername(self, *args)
    def setProxyPassword(self, *args): return _msparser.ms_connection_settings_setProxyPassword(self, *args)
    def setUserAgent(self, *args): return _msparser.ms_connection_settings_setUserAgent(self, *args)
    def getSessionID(self): return _msparser.ms_connection_settings_getSessionID(self)
    def getProxyServer(self): return _msparser.ms_connection_settings_getProxyServer(self)
    def getProxyUsername(self): return _msparser.ms_connection_settings_getProxyUsername(self)
    def getProxyPassword(self): return _msparser.ms_connection_settings_getProxyPassword(self)
    def getProxyUserAndPassword(self): return _msparser.ms_connection_settings_getProxyUserAndPassword(self)
    def getUserAgent(self): return _msparser.ms_connection_settings_getUserAgent(self)
    def setConnectionTimeout(self, *args): return _msparser.ms_connection_settings_setConnectionTimeout(self, *args)
    def getConnectionTimeout(self): return _msparser.ms_connection_settings_getConnectionTimeout(self)
    def setHttpUsername(self, *args): return _msparser.ms_connection_settings_setHttpUsername(self, *args)
    def getHttpUsername(self): return _msparser.ms_connection_settings_getHttpUsername(self)
    def setHttpPassword(self, *args): return _msparser.ms_connection_settings_setHttpPassword(self, *args)
    def getHttpPassword(self): return _msparser.ms_connection_settings_getHttpPassword(self)
    def setRedirectPolicy(self, *args): return _msparser.ms_connection_settings_setRedirectPolicy(self, *args)
    def getRedirectPolicy(self): return _msparser.ms_connection_settings_getRedirectPolicy(self)
ms_connection_settings_swigregister = _msparser.ms_connection_settings_swigregister
ms_connection_settings_swigregister(ms_connection_settings)

CDBIDX_DUPE_ACCESSION = _msparser.CDBIDX_DUPE_ACCESSION
CDBIDX_VERSION = _msparser.CDBIDX_VERSION
CDBIDX_FILE_TOO_LARGE = _msparser.CDBIDX_FILE_TOO_LARGE
CDBIDX_SRC_FILE_SIZE = _msparser.CDBIDX_SRC_FILE_SIZE
CDBIDX_SRC_FILE_DATE = _msparser.CDBIDX_SRC_FILE_DATE
CDBIDX_BUGFIX_10627 = _msparser.CDBIDX_BUGFIX_10627
MAX_CDB_SIZE = _msparser.MAX_CDB_SIZE
MAX_CDB_SIZE_STR = _msparser.MAX_CDB_SIZE_STR
OLD_MAX_CDB_SIZE_STR_4GB = _msparser.OLD_MAX_CDB_SIZE_STR_4GB
OLD_MAX_32_BIT_CDB_SIZE = _msparser.OLD_MAX_32_BIT_CDB_SIZE
OLD_MAX_32_BIT_CDB_SIZE_STR = _msparser.OLD_MAX_32_BIT_CDB_SIZE_STR
class ms_tinycdb(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_tinycdb, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_tinycdb, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_tinycdb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_tinycdb
    __del__ = lambda self : None;
    def getIndexFileName(self): return _msparser.ms_tinycdb_getIndexFileName(self)
    def setIndexFileName(self, *args): return _msparser.ms_tinycdb_setIndexFileName(self, *args)
    def openIndexFile(self, *args): return _msparser.ms_tinycdb_openIndexFile(self, *args)
    def closeIndexFile(self): return _msparser.ms_tinycdb_closeIndexFile(self)
    def isPossibleToCreate(self): return _msparser.ms_tinycdb_isPossibleToCreate(self)
    def isOpenForReading(self): return _msparser.ms_tinycdb_isOpenForReading(self)
    def prepareToCreate(self): return _msparser.ms_tinycdb_prepareToCreate(self)
    def saveValueForKey(self, *args): return _msparser.ms_tinycdb_saveValueForKey(self, *args)
    def finishCreate(self): return _msparser.ms_tinycdb_finishCreate(self)
    def getValueFromKey(self, *args): return _msparser.ms_tinycdb_getValueFromKey(self, *args)
    def getFileOffsetFromKey(self, *args): return _msparser.ms_tinycdb_getFileOffsetFromKey(self, *args)
    def saveFileOffsetForKey(self, *args): return _msparser.ms_tinycdb_saveFileOffsetForKey(self, *args)
    def getIntFromKey(self, *args): return _msparser.ms_tinycdb_getIntFromKey(self, *args)
    def saveIntForKey(self, *args): return _msparser.ms_tinycdb_saveIntForKey(self, *args)
    def makeExists(self, *args): return _msparser.ms_tinycdb_makeExists(self, *args)
ms_tinycdb_swigregister = _msparser.ms_tinycdb_swigregister
ms_tinycdb_swigregister(ms_tinycdb)

class ms_computeraddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_computeraddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_computeraddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_computeraddress(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_computeraddress
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_computeraddress_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_computeraddress_copyFrom(self, *args)
    def getInetAddress(self): return _msparser.ms_computeraddress_getInetAddress(self)
    def setInetAddress(self, *args): return _msparser.ms_computeraddress_setInetAddress(self, *args)
    def getHostName(self): return _msparser.ms_computeraddress_getHostName(self)
    def setHostName(self, *args): return _msparser.ms_computeraddress_setHostName(self, *args)
    def getPort(self): return _msparser.ms_computeraddress_getPort(self)
    def setPort(self, *args): return _msparser.ms_computeraddress_setPort(self, *args)
ms_computeraddress_swigregister = _msparser.ms_computeraddress_swigregister
ms_computeraddress_swigregister(ms_computeraddress)

class ms_mascotfiles(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_mascotfiles, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_mascotfiles, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_mascotfiles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_mascotfiles
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_mascotfiles_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_mascotfiles_copyFrom(self, *args)
    def getModifications(self): return _msparser.ms_mascotfiles_getModifications(self)
    def setModifications(self, *args): return _msparser.ms_mascotfiles_setModifications(self, *args)
    def getEnzymes(self): return _msparser.ms_mascotfiles_getEnzymes(self)
    def setEnzymes(self, *args): return _msparser.ms_mascotfiles_setEnzymes(self, *args)
    def getFrequencies(self): return _msparser.ms_mascotfiles_getFrequencies(self)
    def setFrequencies(self, *args): return _msparser.ms_mascotfiles_setFrequencies(self, *args)
    def getNodeListFile(self): return _msparser.ms_mascotfiles_getNodeListFile(self)
    def setNodeListFile(self, *args): return _msparser.ms_mascotfiles_setNodeListFile(self, *args)
ms_mascotfiles_swigregister = _msparser.ms_mascotfiles_swigregister
ms_mascotfiles_swigregister(ms_mascotfiles)

_OS_AIX = _msparser._OS_AIX
_OS_UNKNOWN = _msparser._OS_UNKNOWN
_OS_WINDOWS_NT = _msparser._OS_WINDOWS_NT
_OS_IRIX = _msparser._OS_IRIX
_OS_ALPHA_TRUE64 = _msparser._OS_ALPHA_TRUE64
_OS_SOLARIS = _msparser._OS_SOLARIS
_OS_LINUX = _msparser._OS_LINUX
_OS_LINUXALPHA = _msparser._OS_LINUXALPHA
_OS_FREE_BSD_ = _msparser._OS_FREE_BSD_
_OS_NUM_OPERATING_SYS = _msparser._OS_NUM_OPERATING_SYS
class ms_clusterparams(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_clusterparams, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_clusterparams, name)
    __repr__ = _swig_repr
    NUM_PROCESSORS_AUTO_DETECT = _msparser.ms_clusterparams_NUM_PROCESSORS_AUTO_DETECT
    def __init__(self, *args): 
        this = _msparser.new_ms_clusterparams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_clusterparams
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_clusterparams_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_clusterparams_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_clusterparams_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_clusterparams_setSectionAvailable(self, *args)
    def isEnabled(self): return _msparser.ms_clusterparams_isEnabled(self)
    def setEnabled(self, *args): return _msparser.ms_clusterparams_setEnabled(self, *args)
    def getMasterComputer(self): return _msparser.ms_clusterparams_getMasterComputer(self)
    def setMasterComputer(self, *args): return _msparser.ms_clusterparams_setMasterComputer(self, *args)
    def getDefaultNodeOS(self): return _msparser.ms_clusterparams_getDefaultNodeOS(self)
    def setDefaultNodeOS(self, *args): return _msparser.ms_clusterparams_setDefaultNodeOS(self, *args)
    def getDefaultNodeHomeDir(self): return _msparser.ms_clusterparams_getDefaultNodeHomeDir(self)
    def setDefaultNodeHomeDir(self, *args): return _msparser.ms_clusterparams_setDefaultNodeHomeDir(self, *args)
    def getDefaultPort(self): return _msparser.ms_clusterparams_getDefaultPort(self)
    def setDefaultPort(self, *args): return _msparser.ms_clusterparams_setDefaultPort(self, *args)
    def getDefaultNodeHomeDirFromMaster(self): return _msparser.ms_clusterparams_getDefaultNodeHomeDirFromMaster(self)
    def setDefaultNodeHomeDirFromMaster(self, *args): return _msparser.ms_clusterparams_setDefaultNodeHomeDirFromMaster(self, *args)
    def getMascotNodeScript(self): return _msparser.ms_clusterparams_getMascotNodeScript(self)
    def setMascotNodeScript(self, *args): return _msparser.ms_clusterparams_setMascotNodeScript(self, *args)
    def getMascotNodeRebootScript(self): return _msparser.ms_clusterparams_getMascotNodeRebootScript(self)
    def setMascotNodeRebootScript(self, *args): return _msparser.ms_clusterparams_setMascotNodeRebootScript(self, *args)
    def getNumberOfSubClusters(self): return _msparser.ms_clusterparams_getNumberOfSubClusters(self)
    def clearSubClusters(self): return _msparser.ms_clusterparams_clearSubClusters(self)
    def getSubClusterID(self, *args): return _msparser.ms_clusterparams_getSubClusterID(self, *args)
    def getSubClusterMaxCPU(self, *args): return _msparser.ms_clusterparams_getSubClusterMaxCPU(self, *args)
    def appendSubCluster(self, *args): return _msparser.ms_clusterparams_appendSubCluster(self, *args)
    def getThisSubClusterID(self): return _msparser.ms_clusterparams_getThisSubClusterID(self)
    def setThisSubClusterID(self, *args): return _msparser.ms_clusterparams_setThisSubClusterID(self, *args)
    def getIPCTimeout(self): return _msparser.ms_clusterparams_getIPCTimeout(self)
    def setIPCTimeout(self, *args): return _msparser.ms_clusterparams_setIPCTimeout(self, *args)
    def getIPCLogging(self): return _msparser.ms_clusterparams_getIPCLogging(self)
    def setIPCLogging(self, *args): return _msparser.ms_clusterparams_setIPCLogging(self, *args)
    def getIPCLogfile(self): return _msparser.ms_clusterparams_getIPCLogfile(self)
    def setIPCLogfile(self, *args): return _msparser.ms_clusterparams_setIPCLogfile(self, *args)
    def getCheckNodesAliveFreq(self): return _msparser.ms_clusterparams_getCheckNodesAliveFreq(self)
    def setCheckNodesAliveFreq(self, *args): return _msparser.ms_clusterparams_setCheckNodesAliveFreq(self, *args)
    def getSecsToWaitForNodeAtStartup(self): return _msparser.ms_clusterparams_getSecsToWaitForNodeAtStartup(self)
    def setSecsToWaitForNodeAtStartup(self, *args): return _msparser.ms_clusterparams_setSecsToWaitForNodeAtStartup(self, *args)
ms_clusterparams_swigregister = _msparser.ms_clusterparams_swigregister
ms_clusterparams_swigregister(ms_clusterparams)

class ms_unigeneoptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_unigeneoptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_unigeneoptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_unigeneoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_unigeneoptions
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_unigeneoptions_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_unigeneoptions_defaultValues(self)
    def isSectionAvailable(self): return _msparser.ms_unigeneoptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_unigeneoptions_setSectionAvailable(self, *args)
ms_unigeneoptions_swigregister = _msparser.ms_unigeneoptions_swigregister
ms_unigeneoptions_swigregister(ms_unigeneoptions)

class ms_cronjob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_cronjob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_cronjob, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_cronjob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_cronjob
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_cronjob_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_cronjob_copyFrom(self, *args)
    def isEnabled(self): return _msparser.ms_cronjob_isEnabled(self)
    def setEnabled(self, *args): return _msparser.ms_cronjob_setEnabled(self, *args)
    def isMinute(self, *args): return _msparser.ms_cronjob_isMinute(self, *args)
    def setMinute(self, *args): return _msparser.ms_cronjob_setMinute(self, *args)
    def isHour(self, *args): return _msparser.ms_cronjob_isHour(self, *args)
    def setHour(self, *args): return _msparser.ms_cronjob_setHour(self, *args)
    def isDayOfMonth(self, *args): return _msparser.ms_cronjob_isDayOfMonth(self, *args)
    def setDayOfMonth(self, *args): return _msparser.ms_cronjob_setDayOfMonth(self, *args)
    def isMonthOfYear(self, *args): return _msparser.ms_cronjob_isMonthOfYear(self, *args)
    def setMonthOfYear(self, *args): return _msparser.ms_cronjob_setMonthOfYear(self, *args)
    def isDayOfWeek(self, *args): return _msparser.ms_cronjob_isDayOfWeek(self, *args)
    def setDayOfWeek(self, *args): return _msparser.ms_cronjob_setDayOfWeek(self, *args)
    def getCommandStr(self): return _msparser.ms_cronjob_getCommandStr(self)
    def setCommandStr(self, *args): return _msparser.ms_cronjob_setCommandStr(self, *args)
    def getStringValue(self): return _msparser.ms_cronjob_getStringValue(self)
ms_cronjob_swigregister = _msparser.ms_cronjob_swigregister
ms_cronjob_swigregister(ms_cronjob)

class ms_cronoptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_cronoptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_cronoptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_cronoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_cronoptions
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_cronoptions_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_cronoptions_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_cronoptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_cronoptions_setSectionAvailable(self, *args)
    def isCronEnabled(self): return _msparser.ms_cronoptions_isCronEnabled(self)
    def setCronEnabled(self, *args): return _msparser.ms_cronoptions_setCronEnabled(self, *args)
    def getNumberOfCronJobs(self): return _msparser.ms_cronoptions_getNumberOfCronJobs(self)
    def getCronJob(self, *args): return _msparser.ms_cronoptions_getCronJob(self, *args)
    def setCronJob(self, *args): return _msparser.ms_cronoptions_setCronJob(self, *args)
    def deleteCronJob(self, *args): return _msparser.ms_cronoptions_deleteCronJob(self, *args)
    def clearCronJobs(self): return _msparser.ms_cronoptions_clearCronJobs(self)
    def appendCronJob(self, *args): return _msparser.ms_cronoptions_appendCronJob(self, *args)
    def getLoggingLevel(self): return _msparser.ms_cronoptions_getLoggingLevel(self)
    def setLoggingLevel(self, *args): return _msparser.ms_cronoptions_setLoggingLevel(self, *args)
    def getLogFileName(self): return _msparser.ms_cronoptions_getLogFileName(self)
    def setLogFileName(self, *args): return _msparser.ms_cronoptions_setLogFileName(self, *args)
ms_cronoptions_swigregister = _msparser.ms_cronoptions_swigregister
ms_cronoptions_swigregister(ms_cronoptions)

AA = _msparser.AA
NA = _msparser.NA
class ms_databaseoptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_databaseoptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_databaseoptions, name)
    __repr__ = _swig_repr
    NUM_THREADS_AUTO_DETECT = _msparser.ms_databaseoptions_NUM_THREADS_AUTO_DETECT
    def __init__(self, *args): 
        this = _msparser.new_ms_databaseoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_databaseoptions
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_databaseoptions_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_databaseoptions_copyFrom(self, *args)
    def isActive(self): return _msparser.ms_databaseoptions_isActive(self)
    def setActive(self, *args): return _msparser.ms_databaseoptions_setActive(self, *args)
    def getName(self): return _msparser.ms_databaseoptions_getName(self)
    def setName(self, *args): return _msparser.ms_databaseoptions_setName(self, *args)
    def getPath(self): return _msparser.ms_databaseoptions_getPath(self)
    def setPath(self, *args): return _msparser.ms_databaseoptions_setPath(self, *args)
    def getDBType(self): return _msparser.ms_databaseoptions_getDBType(self)
    def setDBType(self, *args): return _msparser.ms_databaseoptions_setDBType(self, *args)
    def isMemoryMapFiles(self): return _msparser.ms_databaseoptions_isMemoryMapFiles(self)
    def setMemoryMapFiles(self, *args): return _msparser.ms_databaseoptions_setMemoryMapFiles(self, *args)
    def getNumberOfThreads(self): return _msparser.ms_databaseoptions_getNumberOfThreads(self)
    def setNumberOfThreads(self, *args): return _msparser.ms_databaseoptions_setNumberOfThreads(self, *args)
    def isLockMemory(self): return _msparser.ms_databaseoptions_isLockMemory(self)
    def setLockMemory(self, *args): return _msparser.ms_databaseoptions_setLockMemory(self, *args)
    def isLocalRefFile(self): return _msparser.ms_databaseoptions_isLocalRefFile(self)
    def setLocalRefFile(self, *args): return _msparser.ms_databaseoptions_setLocalRefFile(self, *args)
    def getAccessionParseRuleIndex(self): return _msparser.ms_databaseoptions_getAccessionParseRuleIndex(self)
    def setAccessionParseRuleIndex(self, *args): return _msparser.ms_databaseoptions_setAccessionParseRuleIndex(self, *args)
    def getDescriptionParseRuleIndex(self): return _msparser.ms_databaseoptions_getDescriptionParseRuleIndex(self)
    def setDescriptionParseRuleIndex(self, *args): return _msparser.ms_databaseoptions_setDescriptionParseRuleIndex(self, *args)
    def getAccessionRefParseRuleIndex(self): return _msparser.ms_databaseoptions_getAccessionRefParseRuleIndex(self)
    def setAccessionRefParseRuleIndex(self, *args): return _msparser.ms_databaseoptions_setAccessionRefParseRuleIndex(self, *args)
    def getTaxonomyParseRuleIndex(self): return _msparser.ms_databaseoptions_getTaxonomyParseRuleIndex(self)
    def setTaxonomyParseRuleIndex(self, *args): return _msparser.ms_databaseoptions_setTaxonomyParseRuleIndex(self, *args)
    def isBlastIndexFiles(self): return _msparser.ms_databaseoptions_isBlastIndexFiles(self)
    def setBlastIndexFiles(self, *args): return _msparser.ms_databaseoptions_setBlastIndexFiles(self, *args)
    def getStringValue(self): return _msparser.ms_databaseoptions_getStringValue(self)
ms_databaseoptions_swigregister = _msparser.ms_databaseoptions_swigregister
ms_databaseoptions_swigregister(ms_databaseoptions)

class ms_databases(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_databases, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_databases, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_databases(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_databases
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_databases_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_databases_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_databases_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_databases_setSectionAvailable(self, *args)
    def getNumberOfDatabases(self): return _msparser.ms_databases_getNumberOfDatabases(self)
    def getDatabase(self, *args): return _msparser.ms_databases_getDatabase(self, *args)
    def clearDatabases(self): return _msparser.ms_databases_clearDatabases(self)
    def appendDatabase(self, *args): return _msparser.ms_databases_appendDatabase(self, *args)
    def findDatabase(self, *args): return _msparser.ms_databases_findDatabase(self, *args)
    def updateDatabaseByNumber(self, *args): return _msparser.ms_databases_updateDatabaseByNumber(self, *args)
    def updateDatabaseByName(self, *args): return _msparser.ms_databases_updateDatabaseByName(self, *args)
    def deleteDatabaseByNumber(self, *args): return _msparser.ms_databases_deleteDatabaseByNumber(self, *args)
    def deleteDatabaseByName(self, *args): return _msparser.ms_databases_deleteDatabaseByName(self, *args)
ms_databases_swigregister = _msparser.ms_databases_swigregister
ms_databases_swigregister(ms_databases)

class ms_parserule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_parserule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_parserule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_parserule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_parserule
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_parserule_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_parserule_copyFrom(self, *args)
    def isAvailable(self): return _msparser.ms_parserule_isAvailable(self)
    def setAvailable(self, *args): return _msparser.ms_parserule_setAvailable(self, *args)
    def getRuleStr(self): return _msparser.ms_parserule_getRuleStr(self)
    def setRuleStr(self, *args): return _msparser.ms_parserule_setRuleStr(self, *args)
ms_parserule_swigregister = _msparser.ms_parserule_swigregister
ms_parserule_swigregister(ms_parserule)

class ms_parseoptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_parseoptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_parseoptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_parseoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_parseoptions
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_parseoptions_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_parseoptions_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_parseoptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_parseoptions_setSectionAvailable(self, *args)
    def getNumberOfParseRules(self): return _msparser.ms_parseoptions_getNumberOfParseRules(self)
    def clearParseRules(self): return _msparser.ms_parseoptions_clearParseRules(self)
    def getParseRule(self, *args): return _msparser.ms_parseoptions_getParseRule(self, *args)
    def setParseRule(self, *args): return _msparser.ms_parseoptions_setParseRule(self, *args)
    def dropParseRule(self, *args): return _msparser.ms_parseoptions_dropParseRule(self, *args)
    def findOrAddParseRule(self, *args): return _msparser.ms_parseoptions_findOrAddParseRule(self, *args)
ms_parseoptions_swigregister = _msparser.ms_parseoptions_swigregister
ms_parseoptions_swigregister(ms_parseoptions)

class ms_dbprocessors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_dbprocessors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_dbprocessors, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_dbprocessors(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_dbprocessors
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_dbprocessors_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_dbprocessors_copyFrom(self, *args)
    def getName(self): return _msparser.ms_dbprocessors_getName(self)
    def setName(self, *args): return _msparser.ms_dbprocessors_setName(self, *args)
    def getNumberOfThreads(self): return _msparser.ms_dbprocessors_getNumberOfThreads(self)
    def clearThreads(self): return _msparser.ms_dbprocessors_clearThreads(self)
    def getThreadProcessorID(self, *args): return _msparser.ms_dbprocessors_getThreadProcessorID(self, *args)
    def appendThreadProcessorID(self, *args): return _msparser.ms_dbprocessors_appendThreadProcessorID(self, *args)
ms_dbprocessors_swigregister = _msparser.ms_dbprocessors_swigregister
ms_dbprocessors_swigregister(ms_dbprocessors)

class ms_processoroptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_processoroptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_processoroptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_processoroptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_processoroptions
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_processoroptions_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_processoroptions_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_processoroptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_processoroptions_setSectionAvailable(self, *args)
    def getNumberOfProcessors(self): return _msparser.ms_processoroptions_getNumberOfProcessors(self)
    def clearProcessors(self): return _msparser.ms_processoroptions_clearProcessors(self)
    def getProcessor(self, *args): return _msparser.ms_processoroptions_getProcessor(self, *args)
    def appendProcessor(self, *args): return _msparser.ms_processoroptions_appendProcessor(self, *args)
    def getNumberOfDatabases(self): return _msparser.ms_processoroptions_getNumberOfDatabases(self)
    def getDatabase(self, *args): return _msparser.ms_processoroptions_getDatabase(self, *args)
    def clearDatabases(self): return _msparser.ms_processoroptions_clearDatabases(self)
    def appendDatabase(self, *args): return _msparser.ms_processoroptions_appendDatabase(self, *args)
ms_processoroptions_swigregister = _msparser.ms_processoroptions_swigregister
ms_processoroptions_swigregister(ms_processoroptions)

TAX_SPECIES_NCBI = _msparser.TAX_SPECIES_NCBI
TAX_SPECIES_SWISSPROT = _msparser.TAX_SPECIES_SWISSPROT
TAX_SPECIES_PDB = _msparser.TAX_SPECIES_PDB
TAX_SPECIES_GI2TAXID = _msparser.TAX_SPECIES_GI2TAXID
TAX_SPECIES_ACC2TAXID = _msparser.TAX_SPECIES_ACC2TAXID
TAX_SPECIES_EXPLICIT = _msparser.TAX_SPECIES_EXPLICIT
TAX_SPECIES_FORMAT_COUNT = _msparser.TAX_SPECIES_FORMAT_COUNT
class ms_taxspeciesfiles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxspeciesfiles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxspeciesfiles, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxspeciesfiles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxspeciesfiles
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_taxspeciesfiles_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_taxspeciesfiles_copyFrom(self, *args)
    def getFormat(self): return _msparser.ms_taxspeciesfiles_getFormat(self)
    def setFormat(self, *args): return _msparser.ms_taxspeciesfiles_setFormat(self, *args)
    def getFileName(self): return _msparser.ms_taxspeciesfiles_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_taxspeciesfiles_setFileName(self, *args)
ms_taxspeciesfiles_swigregister = _msparser.ms_taxspeciesfiles_swigregister
ms_taxspeciesfiles_swigregister(ms_taxspeciesfiles)

TAX_NODE_NCBI = _msparser.TAX_NODE_NCBI
TAX_NODE_GENCODE = _msparser.TAX_NODE_GENCODE
class ms_taxnodesfiles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxnodesfiles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxnodesfiles, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxnodesfiles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxnodesfiles
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_taxnodesfiles_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_taxnodesfiles_copyFrom(self, *args)
    def getFormat(self): return _msparser.ms_taxnodesfiles_getFormat(self)
    def setFormat(self, *args): return _msparser.ms_taxnodesfiles_setFormat(self, *args)
    def getFileName(self): return _msparser.ms_taxnodesfiles_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_taxnodesfiles_setFileName(self, *args)
ms_taxnodesfiles_swigregister = _msparser.ms_taxnodesfiles_swigregister
ms_taxnodesfiles_swigregister(ms_taxnodesfiles)

class ms_parserule_plus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_parserule_plus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_parserule_plus, name)
    __repr__ = _swig_repr
    TAX_CHOP_PREFIX = _msparser.ms_parserule_plus_TAX_CHOP_PREFIX
    TAX_CHOP_SUFFIX = _msparser.ms_parserule_plus_TAX_CHOP_SUFFIX
    TAX_CHOP_WORDS = _msparser.ms_parserule_plus_TAX_CHOP_WORDS
    def __init__(self, *args): 
        this = _msparser.new_ms_parserule_plus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_parserule_plus
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_parserule_plus_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_parserule_plus_copyFrom(self, *args)
    def getFileTypeToSearch(self): return _msparser.ms_parserule_plus_getFileTypeToSearch(self)
    def setFileTypeToSearch(self, *args): return _msparser.ms_parserule_plus_setFileTypeToSearch(self, *args)
    def getRule(self): return _msparser.ms_parserule_plus_getRule(self)
    def setRule(self, *args): return _msparser.ms_parserule_plus_setRule(self, *args)
    def getChopSource(self): return _msparser.ms_parserule_plus_getChopSource(self)
    def setChopSource(self, *args): return _msparser.ms_parserule_plus_setChopSource(self, *args)
    def getNameOfDB(self): return _msparser.ms_parserule_plus_getNameOfDB(self)
    def setNameOfDB(self, *args): return _msparser.ms_parserule_plus_setNameOfDB(self, *args)
ms_parserule_plus_swigregister = _msparser.ms_parserule_plus_swigregister
ms_parserule_plus_swigregister(ms_parserule_plus)

class ms_taxonomyrules(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxonomyrules, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxonomyrules, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxonomyrules(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxonomyrules
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_taxonomyrules_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_taxonomyrules_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_taxonomyrules_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_taxonomyrules_setSectionAvailable(self, *args)
    def isEnabled(self): return _msparser.ms_taxonomyrules_isEnabled(self)
    def setEnabled(self, *args): return _msparser.ms_taxonomyrules_setEnabled(self, *args)
    def getIdentifier(self): return _msparser.ms_taxonomyrules_getIdentifier(self)
    def setIdentifier(self, *args): return _msparser.ms_taxonomyrules_setIdentifier(self, *args)
    def getErrorLevel(self): return _msparser.ms_taxonomyrules_getErrorLevel(self)
    def setErrorLevel(self, *args): return _msparser.ms_taxonomyrules_setErrorLevel(self, *args)
    def isFromRefFile(self): return _msparser.ms_taxonomyrules_isFromRefFile(self)
    def setFromRefFile(self, *args): return _msparser.ms_taxonomyrules_setFromRefFile(self, *args)
    def isConcatRefFileLines(self): return _msparser.ms_taxonomyrules_isConcatRefFileLines(self)
    def setConcatRefFileLines(self, *args): return _msparser.ms_taxonomyrules_setConcatRefFileLines(self, *args)
    def getDescriptionLineSep(self): return _msparser.ms_taxonomyrules_getDescriptionLineSep(self)
    def setDescriptionLineSep(self, *args): return _msparser.ms_taxonomyrules_setDescriptionLineSep(self, *args)
    def getNumberOfNoBreakDescLineIf(self): return _msparser.ms_taxonomyrules_getNumberOfNoBreakDescLineIf(self)
    def getNoBreakDescLineIf(self, *args): return _msparser.ms_taxonomyrules_getNoBreakDescLineIf(self, *args)
    def clearNoBreakDescLineIf(self): return _msparser.ms_taxonomyrules_clearNoBreakDescLineIf(self)
    def appendNoBreakDescLineIf(self, *args): return _msparser.ms_taxonomyrules_appendNoBreakDescLineIf(self, *args)
    def getNumberOfSpeciesFiles(self): return _msparser.ms_taxonomyrules_getNumberOfSpeciesFiles(self)
    def getSpeciesFile(self, *args): return _msparser.ms_taxonomyrules_getSpeciesFile(self, *args)
    def clearSpeciesFiles(self): return _msparser.ms_taxonomyrules_clearSpeciesFiles(self)
    def appendSpeciesFile(self, *args): return _msparser.ms_taxonomyrules_appendSpeciesFile(self, *args)
    def getNumberOfStrFiles(self): return _msparser.ms_taxonomyrules_getNumberOfStrFiles(self)
    def getStrFile(self, *args): return _msparser.ms_taxonomyrules_getStrFile(self, *args)
    def clearStrFiles(self): return _msparser.ms_taxonomyrules_clearStrFiles(self)
    def appendStrFile(self, *args): return _msparser.ms_taxonomyrules_appendStrFile(self, *args)
    def getStrRule(self): return _msparser.ms_taxonomyrules_getStrRule(self)
    def setStrRule(self, *args): return _msparser.ms_taxonomyrules_setStrRule(self, *args)
    def getNumberOfNodesFiles(self): return _msparser.ms_taxonomyrules_getNumberOfNodesFiles(self)
    def getNodesFile(self, *args): return _msparser.ms_taxonomyrules_getNodesFile(self, *args)
    def clearNodesFiles(self): return _msparser.ms_taxonomyrules_clearNodesFiles(self)
    def appendNodesFile(self, *args): return _msparser.ms_taxonomyrules_appendNodesFile(self, *args)
    def getNumberOfGencodeFiles(self): return _msparser.ms_taxonomyrules_getNumberOfGencodeFiles(self)
    def getGencodeFile(self, *args): return _msparser.ms_taxonomyrules_getGencodeFile(self, *args)
    def clearGencodeFiles(self): return _msparser.ms_taxonomyrules_clearGencodeFiles(self)
    def appendGencodeFile(self, *args): return _msparser.ms_taxonomyrules_appendGencodeFile(self, *args)
    def getDefaultRule(self): return _msparser.ms_taxonomyrules_getDefaultRule(self)
    def setDefaultRule(self, *args): return _msparser.ms_taxonomyrules_setDefaultRule(self, *args)
    def getNumberOfPrefixRemoves(self): return _msparser.ms_taxonomyrules_getNumberOfPrefixRemoves(self)
    def getPrefixRemove(self, *args): return _msparser.ms_taxonomyrules_getPrefixRemove(self, *args)
    def clearPrefixRemoves(self): return _msparser.ms_taxonomyrules_clearPrefixRemoves(self)
    def appendPrefixRemove(self, *args): return _msparser.ms_taxonomyrules_appendPrefixRemove(self, *args)
    def getNumberOfSuffixRemoves(self): return _msparser.ms_taxonomyrules_getNumberOfSuffixRemoves(self)
    def getSuffixRemove(self, *args): return _msparser.ms_taxonomyrules_getSuffixRemove(self, *args)
    def clearSuffixRemoves(self): return _msparser.ms_taxonomyrules_clearSuffixRemoves(self)
    def appendSuffixRemove(self, *args): return _msparser.ms_taxonomyrules_appendSuffixRemove(self, *args)
    def getSrcDatabaseRule(self): return _msparser.ms_taxonomyrules_getSrcDatabaseRule(self)
    def setSrcDatabaseRule(self, *args): return _msparser.ms_taxonomyrules_setSrcDatabaseRule(self, *args)
    def getNumberOfPerDbSrcRules(self): return _msparser.ms_taxonomyrules_getNumberOfPerDbSrcRules(self)
    def getPerDbSrcRule(self, *args): return _msparser.ms_taxonomyrules_getPerDbSrcRule(self, *args)
    def clearPerDbSrcRules(self): return _msparser.ms_taxonomyrules_clearPerDbSrcRules(self)
    def appendPerDbSrcRule(self, *args): return _msparser.ms_taxonomyrules_appendPerDbSrcRule(self, *args)
    def getDoThisRuleFirst(self): return _msparser.ms_taxonomyrules_getDoThisRuleFirst(self)
    def setDoThisRuleFirst(self, *args): return _msparser.ms_taxonomyrules_setDoThisRuleFirst(self, *args)
    def getAccFromSpeciesLine(self): return _msparser.ms_taxonomyrules_getAccFromSpeciesLine(self)
    def setAccFromSpeciesLine(self, *args): return _msparser.ms_taxonomyrules_setAccFromSpeciesLine(self, *args)
    def getQuickRefSearch(self): return _msparser.ms_taxonomyrules_getQuickRefSearch(self)
    def setQuickRefSearch(self, *args): return _msparser.ms_taxonomyrules_setQuickRefSearch(self, *args)
    def getDBLevelTaxId(self): return _msparser.ms_taxonomyrules_getDBLevelTaxId(self)
    def setDBLevelTaxId(self, *args): return _msparser.ms_taxonomyrules_setDBLevelTaxId(self, *args)
    def isDBLevelTaxId(self): return _msparser.ms_taxonomyrules_isDBLevelTaxId(self)
    def clearDBLevelTaxId(self): return _msparser.ms_taxonomyrules_clearDBLevelTaxId(self)
    def isMitochondrialTranslation(self): return _msparser.ms_taxonomyrules_isMitochondrialTranslation(self)
    def setMitochondrialTranslation(self, *args): return _msparser.ms_taxonomyrules_setMitochondrialTranslation(self, *args)
    def getSpeciesFormatRegex(self, *args): return _msparser.ms_taxonomyrules_getSpeciesFormatRegex(self, *args)
    def setSpeciesFormatRegex(self, *args): return _msparser.ms_taxonomyrules_setSpeciesFormatRegex(self, *args)
ms_taxonomyrules_swigregister = _msparser.ms_taxonomyrules_swigregister
ms_taxonomyrules_swigregister(ms_taxonomyrules)

class ms_taxonomytree(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxonomytree, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxonomytree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxonomytree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxonomytree
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_taxonomytree_copyFrom(self, *args)
    def isSpeciesDescendantOf(self, *args): return _msparser.ms_taxonomytree_isSpeciesDescendantOf(self, *args)
    def getParent(self, *args): return _msparser.ms_taxonomytree_getParent(self, *args)
    def isIncludedIn(self, *args): return _msparser.ms_taxonomytree_isIncludedIn(self, *args)
ms_taxonomytree_swigregister = _msparser.ms_taxonomytree_swigregister
ms_taxonomytree_swigregister(ms_taxonomytree)

WWW_SEQ = _msparser.WWW_SEQ
WWW_REP = _msparser.WWW_REP
class ms_wwwentry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_wwwentry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_wwwentry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_wwwentry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_wwwentry
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_wwwentry_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_wwwentry_copyFrom(self, *args)
    def getName(self): return _msparser.ms_wwwentry_getName(self)
    def setName(self, *args): return _msparser.ms_wwwentry_setName(self, *args)
    def getType(self): return _msparser.ms_wwwentry_getType(self)
    def setType(self, *args): return _msparser.ms_wwwentry_setType(self, *args)
    def getParseRule(self): return _msparser.ms_wwwentry_getParseRule(self)
    def setParseRule(self, *args): return _msparser.ms_wwwentry_setParseRule(self, *args)
    def getHostName(self): return _msparser.ms_wwwentry_getHostName(self)
    def setHostName(self, *args): return _msparser.ms_wwwentry_setHostName(self, *args)
    def getPortNumber(self): return _msparser.ms_wwwentry_getPortNumber(self)
    def setPortNumber(self, *args): return _msparser.ms_wwwentry_setPortNumber(self, *args)
    def getPath(self): return _msparser.ms_wwwentry_getPath(self)
    def setPath(self, *args): return _msparser.ms_wwwentry_setPath(self, *args)
ms_wwwentry_swigregister = _msparser.ms_wwwentry_swigregister
ms_wwwentry_swigregister(ms_wwwentry)

class ms_wwwoptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_wwwoptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_wwwoptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_wwwoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_wwwoptions
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_wwwoptions_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_wwwoptions_copyFrom(self, *args)
    def isSectionAvailable(self): return _msparser.ms_wwwoptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_wwwoptions_setSectionAvailable(self, *args)
    def getNumberOfEntries(self): return _msparser.ms_wwwoptions_getNumberOfEntries(self)
    def getEntry(self, *args): return _msparser.ms_wwwoptions_getEntry(self, *args)
    def getSeqEntryByName(self, *args): return _msparser.ms_wwwoptions_getSeqEntryByName(self, *args)
    def getRepEntryByName(self, *args): return _msparser.ms_wwwoptions_getRepEntryByName(self, *args)
    def clearEntries(self): return _msparser.ms_wwwoptions_clearEntries(self)
    def appendEntry(self, *args): return _msparser.ms_wwwoptions_appendEntry(self, *args)
    def setEntry(self, *args): return _msparser.ms_wwwoptions_setEntry(self, *args)
    def dropEntry(self, *args): return _msparser.ms_wwwoptions_dropEntry(self, *args)
ms_wwwoptions_swigregister = _msparser.ms_wwwoptions_swigregister
ms_wwwoptions_swigregister(ms_wwwoptions)

class ms_blastaccession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_blastaccession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_blastaccession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_blastaccession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_blastaccession
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_blastaccession_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_blastaccession_copyFrom(self, *args)
    def isUseRegex(self): return _msparser.ms_blastaccession_isUseRegex(self)
    def setUseRegex(self, *args): return _msparser.ms_blastaccession_setUseRegex(self, *args)
    def getMinLength(self): return _msparser.ms_blastaccession_getMinLength(self)
    def setMinLength(self, *args): return _msparser.ms_blastaccession_setMinLength(self, *args)
    def getStart(self): return _msparser.ms_blastaccession_getStart(self)
    def getStop(self): return _msparser.ms_blastaccession_getStop(self)
ms_blastaccession_swigregister = _msparser.ms_blastaccession_swigregister
ms_blastaccession_swigregister(ms_blastaccession)

class ms_mascotoptions(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_mascotoptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_mascotoptions, name)
    __repr__ = _swig_repr
    MS_REVIEW_COL_JOB = _msparser.ms_mascotoptions_MS_REVIEW_COL_JOB
    MS_REVIEW_COL_PID = _msparser.ms_mascotoptions_MS_REVIEW_COL_PID
    MS_REVIEW_COL_DATABASE = _msparser.ms_mascotoptions_MS_REVIEW_COL_DATABASE
    MS_REVIEW_COL_USERNAME = _msparser.ms_mascotoptions_MS_REVIEW_COL_USERNAME
    MS_REVIEW_COL_USEREMAIL = _msparser.ms_mascotoptions_MS_REVIEW_COL_USEREMAIL
    MS_REVIEW_COL_TITLE = _msparser.ms_mascotoptions_MS_REVIEW_COL_TITLE
    MS_REVIEW_COL_RESULTS_FILE = _msparser.ms_mascotoptions_MS_REVIEW_COL_RESULTS_FILE
    MS_REVIEW_COL_START_TIME = _msparser.ms_mascotoptions_MS_REVIEW_COL_START_TIME
    MS_REVIEW_COL_DURATION = _msparser.ms_mascotoptions_MS_REVIEW_COL_DURATION
    MS_REVIEW_COL_STATUS = _msparser.ms_mascotoptions_MS_REVIEW_COL_STATUS
    MS_REVIEW_COL_PRIORITY = _msparser.ms_mascotoptions_MS_REVIEW_COL_PRIORITY
    MS_REVIEW_COL_SEARCHTYPE = _msparser.ms_mascotoptions_MS_REVIEW_COL_SEARCHTYPE
    MS_REVIEW_COL_ENZYMEUSED = _msparser.ms_mascotoptions_MS_REVIEW_COL_ENZYMEUSED
    MS_REVIEW_COL_IPADDRESS = _msparser.ms_mascotoptions_MS_REVIEW_COL_IPADDRESS
    MS_REVIEW_COL_USERID = _msparser.ms_mascotoptions_MS_REVIEW_COL_USERID
    MS_REVIEW_COL____LAST___ = _msparser.ms_mascotoptions_MS_REVIEW_COL____LAST___
    PERC_EXE_RT_USE_DEFAULT = _msparser.ms_mascotoptions_PERC_EXE_RT_USE_DEFAULT
    PERC_EXE_RT_FORCE_ON = _msparser.ms_mascotoptions_PERC_EXE_RT_FORCE_ON
    PERC_EXE_RT_FORCE_OFF = _msparser.ms_mascotoptions_PERC_EXE_RT_FORCE_OFF
    DECOY_ALGORITHM_NONE = _msparser.ms_mascotoptions_DECOY_ALGORITHM_NONE
    DECOY_PROTEIN_REVERSE = _msparser.ms_mascotoptions_DECOY_PROTEIN_REVERSE
    DECOY_PEPTIDE_REVERSE = _msparser.ms_mascotoptions_DECOY_PEPTIDE_REVERSE
    DECOY_PROTEIN_RANDOM = _msparser.ms_mascotoptions_DECOY_PROTEIN_RANDOM
    DECOY_PEPTIDE_RANDOM = _msparser.ms_mascotoptions_DECOY_PEPTIDE_RANDOM
    DECOY_PROTEIN_RANDOM_DIPEP = _msparser.ms_mascotoptions_DECOY_PROTEIN_RANDOM_DIPEP
    DECOY_PEPTIDE_RANDOM_DIPEP = _msparser.ms_mascotoptions_DECOY_PEPTIDE_RANDOM_DIPEP
    DECOY_PROTEIN_SHUFFLE = _msparser.ms_mascotoptions_DECOY_PROTEIN_SHUFFLE
    DECOY_PEPTIDE_SHUFFLE = _msparser.ms_mascotoptions_DECOY_PEPTIDE_SHUFFLE
    DECOY_PROTEIN_BASED_MASK = _msparser.ms_mascotoptions_DECOY_PROTEIN_BASED_MASK
    MAX_EXEC_AFTER_SEARCH = _msparser.ms_mascotoptions_MAX_EXEC_AFTER_SEARCH
    MAX_REPORTBUILDER_COL_ARR = _msparser.ms_mascotoptions_MAX_REPORTBUILDER_COL_ARR
    def __init__(self, *args): 
        this = _msparser.new_ms_mascotoptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_mascotoptions
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_mascotoptions_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_mascotoptions_defaultValues(self)
    def isSectionAvailable(self): return _msparser.ms_mascotoptions_isSectionAvailable(self)
    def setSectionAvailable(self, *args): return _msparser.ms_mascotoptions_setSectionAvailable(self, *args)
    def isSaveLastQueryAsc(self): return _msparser.ms_mascotoptions_isSaveLastQueryAsc(self)
    def setSaveLastQueryAsc(self, *args): return _msparser.ms_mascotoptions_setSaveLastQueryAsc(self, *args)
    def isSaveEveryLastQueryAsc(self): return _msparser.ms_mascotoptions_isSaveEveryLastQueryAsc(self)
    def setSaveEveryLastQueryAsc(self, *args): return _msparser.ms_mascotoptions_setSaveEveryLastQueryAsc(self, *args)
    def getLastQueryAscFile(self): return _msparser.ms_mascotoptions_getLastQueryAscFile(self)
    def setLastQueryAscFile(self, *args): return _msparser.ms_mascotoptions_setLastQueryAscFile(self, *args)
    def getErrorLogFile(self): return _msparser.ms_mascotoptions_getErrorLogFile(self)
    def setErrorLogFile(self, *args): return _msparser.ms_mascotoptions_setErrorLogFile(self, *args)
    def getSearchLogFile(self): return _msparser.ms_mascotoptions_getSearchLogFile(self)
    def setSearchLogFile(self, *args): return _msparser.ms_mascotoptions_setSearchLogFile(self, *args)
    def getMonitorLogFile(self): return _msparser.ms_mascotoptions_getMonitorLogFile(self)
    def setMonitorLogFile(self, *args): return _msparser.ms_mascotoptions_setMonitorLogFile(self, *args)
    def getInterFileBasePath(self): return _msparser.ms_mascotoptions_getInterFileBasePath(self)
    def setInterFileBasePath(self, *args): return _msparser.ms_mascotoptions_setInterFileBasePath(self, *args)
    def getInterFileRelPath(self): return _msparser.ms_mascotoptions_getInterFileRelPath(self)
    def setInterFileRelPath(self, *args): return _msparser.ms_mascotoptions_setInterFileRelPath(self, *args)
    def getMascotCmdLine(self): return _msparser.ms_mascotoptions_getMascotCmdLine(self)
    def setMascotCmdLine(self, *args): return _msparser.ms_mascotoptions_setMascotCmdLine(self, *args)
    def getTestDirectory(self): return _msparser.ms_mascotoptions_getTestDirectory(self)
    def setTestDirectory(self, *args): return _msparser.ms_mascotoptions_setTestDirectory(self, *args)
    def getMascotControlFile(self): return _msparser.ms_mascotoptions_getMascotControlFile(self)
    def setMascotControlFile(self, *args): return _msparser.ms_mascotoptions_setMascotControlFile(self, *args)
    def getMascNodeCtrlFile(self): return _msparser.ms_mascotoptions_getMascNodeCtrlFile(self)
    def setMascNodeCtrlFile(self, *args): return _msparser.ms_mascotoptions_setMascNodeCtrlFile(self, *args)
    def getMascotJobIdFile(self): return _msparser.ms_mascotoptions_getMascotJobIdFile(self)
    def setMascotJobIdFile(self, *args): return _msparser.ms_mascotoptions_setMascotJobIdFile(self, *args)
    def getGetSeqJobIdFile(self): return _msparser.ms_mascotoptions_getGetSeqJobIdFile(self)
    def setGetSeqJobIdFile(self, *args): return _msparser.ms_mascotoptions_setGetSeqJobIdFile(self, *args)
    def getUniqueJobStartNumber(self): return _msparser.ms_mascotoptions_getUniqueJobStartNumber(self)
    def setUniqueJobStartNumber(self, *args): return _msparser.ms_mascotoptions_setUniqueJobStartNumber(self, *args)
    def getResultsPerlScript(self): return _msparser.ms_mascotoptions_getResultsPerlScript(self)
    def setResultsPerlScript(self, *args): return _msparser.ms_mascotoptions_setResultsPerlScript(self, *args)
    def getNoResultsScript(self): return _msparser.ms_mascotoptions_getNoResultsScript(self)
    def setNoResultsScript(self, *args): return _msparser.ms_mascotoptions_setNoResultsScript(self, *args)
    def getResultsFullURL(self): return _msparser.ms_mascotoptions_getResultsFullURL(self)
    def setResultsFullURL(self, *args): return _msparser.ms_mascotoptions_setResultsFullURL(self, *args)
    def getLogoImageFile(self): return _msparser.ms_mascotoptions_getLogoImageFile(self)
    def setLogoImageFile(self, *args): return _msparser.ms_mascotoptions_setLogoImageFile(self, *args)
    def getMassDecimalPlaces(self): return _msparser.ms_mascotoptions_getMassDecimalPlaces(self)
    def setMassDecimalPlaces(self, *args): return _msparser.ms_mascotoptions_setMassDecimalPlaces(self, *args)
    def getIonsDecimalPlaces(self): return _msparser.ms_mascotoptions_getIonsDecimalPlaces(self)
    def setIonsDecimalPlaces(self, *args): return _msparser.ms_mascotoptions_setIonsDecimalPlaces(self, *args)
    def getIntensitySigFigs(self): return _msparser.ms_mascotoptions_getIntensitySigFigs(self)
    def setIntensitySigFigs(self, *args): return _msparser.ms_mascotoptions_setIntensitySigFigs(self, *args)
    def isEmailUsersEnabled(self): return _msparser.ms_mascotoptions_isEmailUsersEnabled(self)
    def setEmailUsersEnabled(self, *args): return _msparser.ms_mascotoptions_setEmailUsersEnabled(self, *args)
    def isEmailErrorsEnabled(self): return _msparser.ms_mascotoptions_isEmailErrorsEnabled(self)
    def setEmailErrorsEnabled(self, *args): return _msparser.ms_mascotoptions_setEmailErrorsEnabled(self, *args)
    def getMailTransport(self): return _msparser.ms_mascotoptions_getMailTransport(self)
    def setMailTransport(self, *args): return _msparser.ms_mascotoptions_setMailTransport(self, *args)
    def getEmailService(self): return _msparser.ms_mascotoptions_getEmailService(self)
    def setEmailService(self, *args): return _msparser.ms_mascotoptions_setEmailService(self, *args)
    def getEmailPassword(self): return _msparser.ms_mascotoptions_getEmailPassword(self)
    def setEmailPassword(self, *args): return _msparser.ms_mascotoptions_setEmailPassword(self, *args)
    def getEmailProfile(self): return _msparser.ms_mascotoptions_getEmailProfile(self)
    def setEmailProfile(self, *args): return _msparser.ms_mascotoptions_setEmailProfile(self, *args)
    def getSendmailPath(self): return _msparser.ms_mascotoptions_getSendmailPath(self)
    def setSendmailPath(self, *args): return _msparser.ms_mascotoptions_setSendmailPath(self, *args)
    def getEmailFromUser(self): return _msparser.ms_mascotoptions_getEmailFromUser(self)
    def setEmailFromUser(self, *args): return _msparser.ms_mascotoptions_setEmailFromUser(self, *args)
    def getEmailFromTextName(self): return _msparser.ms_mascotoptions_getEmailFromTextName(self)
    def setEmailFromTextName(self, *args): return _msparser.ms_mascotoptions_setEmailFromTextName(self, *args)
    def getEmailTimeOutPeriod(self): return _msparser.ms_mascotoptions_getEmailTimeOutPeriod(self)
    def setEmailTimeOutPeriod(self, *args): return _msparser.ms_mascotoptions_setEmailTimeOutPeriod(self, *args)
    def getMonitorEmailCheckFreq(self): return _msparser.ms_mascotoptions_getMonitorEmailCheckFreq(self)
    def setMonitorEmailCheckFreq(self, *args): return _msparser.ms_mascotoptions_setMonitorEmailCheckFreq(self, *args)
    def getMailTempFile(self): return _msparser.ms_mascotoptions_getMailTempFile(self)
    def setMailTempFile(self, *args): return _msparser.ms_mascotoptions_setMailTempFile(self, *args)
    def getErrMessageEmailTo(self): return _msparser.ms_mascotoptions_getErrMessageEmailTo(self)
    def setErrMessageEmailTo(self, *args): return _msparser.ms_mascotoptions_setErrMessageEmailTo(self, *args)
    def getMonitorTestTimeout(self): return _msparser.ms_mascotoptions_getMonitorTestTimeout(self)
    def setMonitorTestTimeout(self, *args): return _msparser.ms_mascotoptions_setMonitorTestTimeout(self, *args)
    def getNTMonitorGroup(self): return _msparser.ms_mascotoptions_getNTMonitorGroup(self)
    def setNTMonitorGroup(self, *args): return _msparser.ms_mascotoptions_setNTMonitorGroup(self, *args)
    def getNTIUserGroup(self): return _msparser.ms_mascotoptions_getNTIUserGroup(self)
    def setNTIUserGroup(self, *args): return _msparser.ms_mascotoptions_setNTIUserGroup(self, *args)
    def getUnixWebUserGroup(self): return _msparser.ms_mascotoptions_getUnixWebUserGroup(self)
    def setUnixWebUserGroup(self, *args): return _msparser.ms_mascotoptions_setUnixWebUserGroup(self, *args)
    def isForkForUnixApache(self): return _msparser.ms_mascotoptions_isForkForUnixApache(self)
    def setForkForUnixApache(self, *args): return _msparser.ms_mascotoptions_setForkForUnixApache(self, *args)
    def getSeparateLockMem(self): return _msparser.ms_mascotoptions_getSeparateLockMem(self)
    def setSeparateLockMem(self, *args): return _msparser.ms_mascotoptions_setSeparateLockMem(self, *args)
    def getFormVersion(self): return _msparser.ms_mascotoptions_getFormVersion(self)
    def setFormVersion(self, *args): return _msparser.ms_mascotoptions_setFormVersion(self, *args)
    def getMaxSequenceLen(self): return _msparser.ms_mascotoptions_getMaxSequenceLen(self)
    def setMaxSequenceLen(self, *args): return _msparser.ms_mascotoptions_setMaxSequenceLen(self, *args)
    def getMaxConcurrentSearches(self): return _msparser.ms_mascotoptions_getMaxConcurrentSearches(self)
    def setMaxConcurrentSearches(self, *args): return _msparser.ms_mascotoptions_setMaxConcurrentSearches(self, *args)
    def getMaxSearchesPerUser(self): return _msparser.ms_mascotoptions_getMaxSearchesPerUser(self)
    def setMaxSearchesPerUser(self, *args): return _msparser.ms_mascotoptions_setMaxSearchesPerUser(self, *args)
    def getCentroidWidth(self): return _msparser.ms_mascotoptions_getCentroidWidth(self)
    def setCentroidWidth(self, *args): return _msparser.ms_mascotoptions_setCentroidWidth(self, *args)
    def getCentroidWidthCount(self): return _msparser.ms_mascotoptions_getCentroidWidthCount(self)
    def setCentroidWidthCount(self, *args): return _msparser.ms_mascotoptions_setCentroidWidthCount(self, *args)
    def getMaxDescriptionLen(self): return _msparser.ms_mascotoptions_getMaxDescriptionLen(self)
    def setMaxDescriptionLen(self, *args): return _msparser.ms_mascotoptions_setMaxDescriptionLen(self, *args)
    def getMaxNumPeptides(self): return _msparser.ms_mascotoptions_getMaxNumPeptides(self)
    def setMaxNumPeptides(self, *args): return _msparser.ms_mascotoptions_setMaxNumPeptides(self, *args)
    def getVmemory(self): return _msparser.ms_mascotoptions_getVmemory(self)
    def setVmemory(self, *args): return _msparser.ms_mascotoptions_setVmemory(self, *args)
    def getNumberOfReportNumberChoices(self): return _msparser.ms_mascotoptions_getNumberOfReportNumberChoices(self)
    def clearReportNumberChoices(self): return _msparser.ms_mascotoptions_clearReportNumberChoices(self)
    def getReportNumberChoice(self, *args): return _msparser.ms_mascotoptions_getReportNumberChoice(self, *args)
    def setReportNumberChoice(self, *args): return _msparser.ms_mascotoptions_setReportNumberChoice(self, *args)
    def appendReportNumberChoice(self, *args): return _msparser.ms_mascotoptions_appendReportNumberChoice(self, *args)
    def getNumberOfTargetFDRPercentages(self): return _msparser.ms_mascotoptions_getNumberOfTargetFDRPercentages(self)
    def clearTargetFDRPercentages(self): return _msparser.ms_mascotoptions_clearTargetFDRPercentages(self)
    def getTargetFDRPercentage(self, *args): return _msparser.ms_mascotoptions_getTargetFDRPercentage(self, *args)
    def setTargetFDRPercentage(self, *args): return _msparser.ms_mascotoptions_setTargetFDRPercentage(self, *args)
    def appendTargetFDRPercentage(self, *args): return _msparser.ms_mascotoptions_appendTargetFDRPercentage(self, *args)
    def isDefaultTargetFDRPercentage(self, *args): return _msparser.ms_mascotoptions_isDefaultTargetFDRPercentage(self, *args)
    def setDefaultTargetFDRPercentage(self, *args): return _msparser.ms_mascotoptions_setDefaultTargetFDRPercentage(self, *args)
    def getReviewColWidth(self, *args): return _msparser.ms_mascotoptions_getReviewColWidth(self, *args)
    def setReviewColWidth(self, *args): return _msparser.ms_mascotoptions_setReviewColWidth(self, *args)
    def getReportBuilderColumnArrangement(self, *args): return _msparser.ms_mascotoptions_getReportBuilderColumnArrangement(self, *args)
    def getMaxNumOfReportBuilderColumnArrangements(self): return _msparser.ms_mascotoptions_getMaxNumOfReportBuilderColumnArrangements(self)
    def setReportBuilderColumnArrangement(self, *args): return _msparser.ms_mascotoptions_setReportBuilderColumnArrangement(self, *args)
    def getProxyServer(self): return _msparser.ms_mascotoptions_getProxyServer(self)
    def setProxyServer(self, *args): return _msparser.ms_mascotoptions_setProxyServer(self, *args)
    def getProxyUsername(self): return _msparser.ms_mascotoptions_getProxyUsername(self)
    def setProxyUsername(self, *args): return _msparser.ms_mascotoptions_setProxyUsername(self, *args)
    def getProxyPassword(self): return _msparser.ms_mascotoptions_getProxyPassword(self)
    def setProxyPassword(self, *args): return _msparser.ms_mascotoptions_setProxyPassword(self, *args)
    def getMinPepLenInPepSummary(self): return _msparser.ms_mascotoptions_getMinPepLenInPepSummary(self)
    def setMinPepLenInPepSummary(self, *args): return _msparser.ms_mascotoptions_setMinPepLenInPepSummary(self, *args)
    def getMaxQueries(self): return _msparser.ms_mascotoptions_getMaxQueries(self)
    def setMaxQueries(self, *args): return _msparser.ms_mascotoptions_setMaxQueries(self, *args)
    def isShowSubsets(self): return _msparser.ms_mascotoptions_isShowSubsets(self)
    def getShowSubsets(self): return _msparser.ms_mascotoptions_getShowSubsets(self)
    def setShowSubsets(self, *args): return _msparser.ms_mascotoptions_setShowSubsets(self, *args)
    def isRequireBoldRed(self): return _msparser.ms_mascotoptions_isRequireBoldRed(self)
    def setRequireBoldRed(self, *args): return _msparser.ms_mascotoptions_setRequireBoldRed(self, *args)
    def getSigThreshold(self): return _msparser.ms_mascotoptions_getSigThreshold(self)
    def setSigThreshold(self, *args): return _msparser.ms_mascotoptions_setSigThreshold(self, *args)
    def getSiteAnalysisMD10Prob(self): return _msparser.ms_mascotoptions_getSiteAnalysisMD10Prob(self)
    def setSiteAnalysisMD10Prob(self, *args): return _msparser.ms_mascotoptions_setSiteAnalysisMD10Prob(self, *args)
    def getMaxVarMods(self): return _msparser.ms_mascotoptions_getMaxVarMods(self)
    def setMaxVarMods(self, *args): return _msparser.ms_mascotoptions_setMaxVarMods(self, *args)
    def getMaxEtVarMods(self): return _msparser.ms_mascotoptions_getMaxEtVarMods(self)
    def setMaxEtVarMods(self, *args): return _msparser.ms_mascotoptions_setMaxEtVarMods(self, *args)
    def getErrTolMaxAccessions(self): return _msparser.ms_mascotoptions_getErrTolMaxAccessions(self)
    def setErrTolMaxAccessions(self, *args): return _msparser.ms_mascotoptions_setErrTolMaxAccessions(self, *args)
    def isLabelAll(self): return _msparser.ms_mascotoptions_isLabelAll(self)
    def setLabelAll(self, *args): return _msparser.ms_mascotoptions_setLabelAll(self, *args)
    def isShowAllFromErrorTolerant(self): return _msparser.ms_mascotoptions_isShowAllFromErrorTolerant(self)
    def setShowAllFromErrorTolerant(self, *args): return _msparser.ms_mascotoptions_setShowAllFromErrorTolerant(self, *args)
    def getIgnoreIonsScoreBelow(self): return _msparser.ms_mascotoptions_getIgnoreIonsScoreBelow(self)
    def setIgnoreIonsScoreBelow(self, *args): return _msparser.ms_mascotoptions_setIgnoreIonsScoreBelow(self, *args)
    def getMonitorPidFile(self): return _msparser.ms_mascotoptions_getMonitorPidFile(self)
    def setMonitorPidFile(self, *args): return _msparser.ms_mascotoptions_setMonitorPidFile(self, *args)
    def isStoreModPermutations(self): return _msparser.ms_mascotoptions_isStoreModPermutations(self)
    def setStoreModPermutations(self, *args): return _msparser.ms_mascotoptions_setStoreModPermutations(self, *args)
    def getProteinsInResultsFile(self): return _msparser.ms_mascotoptions_getProteinsInResultsFile(self)
    def setProteinsInResultsFile(self, *args): return _msparser.ms_mascotoptions_setProteinsInResultsFile(self, *args)
    def getMascotMessage(self): return _msparser.ms_mascotoptions_getMascotMessage(self)
    def setMascotMessage(self, *args): return _msparser.ms_mascotoptions_setMascotMessage(self, *args)
    def getSplitNumberOfQueries(self): return _msparser.ms_mascotoptions_getSplitNumberOfQueries(self)
    def setSplitNumberOfQueries(self, *args): return _msparser.ms_mascotoptions_setSplitNumberOfQueries(self, *args)
    def getSplitDataFileSize(self): return _msparser.ms_mascotoptions_getSplitDataFileSize(self)
    def setSplitDataFileSize(self, *args): return _msparser.ms_mascotoptions_setSplitDataFileSize(self, *args)
    def isMoveOldDbToOldDir(self): return _msparser.ms_mascotoptions_isMoveOldDbToOldDir(self)
    def setMoveOldDbToOldDir(self, *args): return _msparser.ms_mascotoptions_setMoveOldDbToOldDir(self, *args)
    def isRemoveOldIndexFiles(self): return _msparser.ms_mascotoptions_isRemoveOldIndexFiles(self)
    def setRemoveOldIndexFiles(self, *args): return _msparser.ms_mascotoptions_setRemoveOldIndexFiles(self, *args)
    def getFeatureTableLength(self): return _msparser.ms_mascotoptions_getFeatureTableLength(self)
    def setFeatureTableLength(self, *args): return _msparser.ms_mascotoptions_setFeatureTableLength(self, *args)
    def getFeatureTableMinScore(self): return _msparser.ms_mascotoptions_getFeatureTableMinScore(self)
    def setFeatureTableMinScore(self, *args): return _msparser.ms_mascotoptions_setFeatureTableMinScore(self, *args)
    def getICATLight(self): return _msparser.ms_mascotoptions_getICATLight(self)
    def setICATLight(self, *args): return _msparser.ms_mascotoptions_setICATLight(self, *args)
    def getICATHeavy(self): return _msparser.ms_mascotoptions_getICATHeavy(self)
    def setICATHeavy(self, *args): return _msparser.ms_mascotoptions_setICATHeavy(self, *args)
    def getICATFilter(self): return _msparser.ms_mascotoptions_getICATFilter(self)
    def setICATFilter(self, *args): return _msparser.ms_mascotoptions_setICATFilter(self, *args)
    def getICATQuantitationMethod(self): return _msparser.ms_mascotoptions_getICATQuantitationMethod(self)
    def setICATQuantitationMethod(self, *args): return _msparser.ms_mascotoptions_setICATQuantitationMethod(self, *args)
    def getNumberOfIgnoreDupeAccessions(self): return _msparser.ms_mascotoptions_getNumberOfIgnoreDupeAccessions(self)
    def clearIgnoreDupeAccessions(self): return _msparser.ms_mascotoptions_clearIgnoreDupeAccessions(self)
    def getIgnoreDupeAccession(self, *args): return _msparser.ms_mascotoptions_getIgnoreDupeAccession(self, *args)
    def setIgnoreDupeAccession(self, *args): return _msparser.ms_mascotoptions_setIgnoreDupeAccession(self, *args)
    def appendIgnoreDupeAccession(self, *args): return _msparser.ms_mascotoptions_appendIgnoreDupeAccession(self, *args)
    def isInIgnoreDupeAccessionList(self, *args): return _msparser.ms_mascotoptions_isInIgnoreDupeAccessionList(self, *args)
    def getUnixDirPerm(self): return _msparser.ms_mascotoptions_getUnixDirPerm(self)
    def setUnixDirPerm(self, *args): return _msparser.ms_mascotoptions_setUnixDirPerm(self, *args)
    def isUnixDirPermDefined(self): return _msparser.ms_mascotoptions_isUnixDirPermDefined(self)
    def getMudpit(self): return _msparser.ms_mascotoptions_getMudpit(self)
    def setMudpit(self, *args): return _msparser.ms_mascotoptions_setMudpit(self, *args)
    def getPrecursorCutOutLowerLimit(self): return _msparser.ms_mascotoptions_getPrecursorCutOutLowerLimit(self)
    def setPrecursorCutOutLowerLimit(self, *args): return _msparser.ms_mascotoptions_setPrecursorCutOutLowerLimit(self, *args)
    def getPrecursorCutOutUpperLimit(self): return _msparser.ms_mascotoptions_getPrecursorCutOutUpperLimit(self)
    def setPrecursorCutOutUpperLimit(self, *args): return _msparser.ms_mascotoptions_setPrecursorCutOutUpperLimit(self, *args)
    def isAutoSelectCharge(self): return _msparser.ms_mascotoptions_isAutoSelectCharge(self)
    def setAutoSelectCharge(self, *args): return _msparser.ms_mascotoptions_setAutoSelectCharge(self, *args)
    def getTaxBrowserUrl(self): return _msparser.ms_mascotoptions_getTaxBrowserUrl(self)
    def setTaxBrowserUrl(self, *args): return _msparser.ms_mascotoptions_setTaxBrowserUrl(self, *args)
    def getMinPepLenInSearch(self): return _msparser.ms_mascotoptions_getMinPepLenInSearch(self)
    def setMinPepLenInSearch(self, *args): return _msparser.ms_mascotoptions_setMinPepLenInSearch(self, *args)
    def getMaxPepNumVarMods(self): return _msparser.ms_mascotoptions_getMaxPepNumVarMods(self)
    def setMaxPepNumVarMods(self, *args): return _msparser.ms_mascotoptions_setMaxPepNumVarMods(self, *args)
    def isIteratePMFIntensities(self): return _msparser.ms_mascotoptions_isIteratePMFIntensities(self)
    def setIteratePMFIntensities(self, *args): return _msparser.ms_mascotoptions_setIteratePMFIntensities(self, *args)
    def getMinEtagMassDelta(self): return _msparser.ms_mascotoptions_getMinEtagMassDelta(self)
    def setMinEtagMassDelta(self, *args): return _msparser.ms_mascotoptions_setMinEtagMassDelta(self, *args)
    def getMaxEtagMassDelta(self): return _msparser.ms_mascotoptions_getMaxEtagMassDelta(self)
    def setMaxEtagMassDelta(self, *args): return _msparser.ms_mascotoptions_setMaxEtagMassDelta(self, *args)
    def getResultsFileFormatVersion(self): return _msparser.ms_mascotoptions_getResultsFileFormatVersion(self)
    def setResultsFileFormatVersion(self, *args): return _msparser.ms_mascotoptions_setResultsFileFormatVersion(self, *args)
    def getSortUnassigned(self): return _msparser.ms_mascotoptions_getSortUnassigned(self)
    def setSortUnassigned(self, *args): return _msparser.ms_mascotoptions_setSortUnassigned(self, *args)
    def getSelectSwitch(self): return _msparser.ms_mascotoptions_getSelectSwitch(self)
    def setSelectSwitch(self, *args): return _msparser.ms_mascotoptions_setSelectSwitch(self, *args)
    def getMudpitSwitch(self): return _msparser.ms_mascotoptions_getMudpitSwitch(self)
    def setMudpitSwitch(self, *args): return _msparser.ms_mascotoptions_setMudpitSwitch(self, *args)
    def getMaxDatabases(self): return _msparser.ms_mascotoptions_getMaxDatabases(self)
    def setMaxDatabases(self, *args): return _msparser.ms_mascotoptions_setMaxDatabases(self, *args)
    def getCacheDirectory(self): return _msparser.ms_mascotoptions_getCacheDirectory(self)
    def setCacheDirectory(self, *args): return _msparser.ms_mascotoptions_setCacheDirectory(self, *args)
    def getResfileCache(self): return _msparser.ms_mascotoptions_getResfileCache(self)
    def setResfileCache(self, *args): return _msparser.ms_mascotoptions_setResfileCache(self, *args)
    def getResultsCache(self): return _msparser.ms_mascotoptions_getResultsCache(self)
    def setResultsCache(self, *args): return _msparser.ms_mascotoptions_setResultsCache(self, *args)
    def isPercolator(self): return _msparser.ms_mascotoptions_isPercolator(self)
    def setPercolator(self, *args): return _msparser.ms_mascotoptions_setPercolator(self, *args)
    def getPercolatorFeatures(self): return _msparser.ms_mascotoptions_getPercolatorFeatures(self)
    def setPercolatorFeatures(self, *args): return _msparser.ms_mascotoptions_setPercolatorFeatures(self, *args)
    def getPercolatorMinQueries(self): return _msparser.ms_mascotoptions_getPercolatorMinQueries(self)
    def setPercolatorMinQueries(self, *args): return _msparser.ms_mascotoptions_setPercolatorMinQueries(self, *args)
    def getPercolatorMinSequences(self): return _msparser.ms_mascotoptions_getPercolatorMinSequences(self)
    def setPercolatorMinSequences(self, *args): return _msparser.ms_mascotoptions_setPercolatorMinSequences(self, *args)
    def isPercolatorUseProteins(self): return _msparser.ms_mascotoptions_isPercolatorUseProteins(self)
    def setPercolatorUseProteins(self, *args): return _msparser.ms_mascotoptions_setPercolatorUseProteins(self, *args)
    def isPercolatorUseRT(self): return _msparser.ms_mascotoptions_isPercolatorUseRT(self)
    def setPercolatorUseRT(self, *args): return _msparser.ms_mascotoptions_setPercolatorUseRT(self, *args)
    def setPercolatorExeFlags(self, *args): return _msparser.ms_mascotoptions_setPercolatorExeFlags(self, *args)
    def setExecAfterSearch(self, *args): return _msparser.ms_mascotoptions_setExecAfterSearch(self, *args)
    def getResultsPerlScript_2(self): return _msparser.ms_mascotoptions_getResultsPerlScript_2(self)
    def setResultsPerlScript_2(self, *args): return _msparser.ms_mascotoptions_setResultsPerlScript_2(self, *args)
    def getResultsFullURL_2(self): return _msparser.ms_mascotoptions_getResultsFullURL_2(self)
    def setResultsFullURL_2(self, *args): return _msparser.ms_mascotoptions_setResultsFullURL_2(self, *args)
    def getProteinFamilySwitch(self): return _msparser.ms_mascotoptions_getProteinFamilySwitch(self)
    def setProteinFamilySwitch(self, *args): return _msparser.ms_mascotoptions_setProteinFamilySwitch(self, *args)
    def getDecoyTypeSpecific(self): return _msparser.ms_mascotoptions_getDecoyTypeSpecific(self)
    def setDecoyTypeSpecific(self, *args): return _msparser.ms_mascotoptions_setDecoyTypeSpecific(self, *args)
    def getDecoyTypeNoEnzyme(self): return _msparser.ms_mascotoptions_getDecoyTypeNoEnzyme(self)
    def setDecoyTypeNoEnzyme(self, *args): return _msparser.ms_mascotoptions_setDecoyTypeNoEnzyme(self, *args)
    def getGetSeqBlastAccession(self): return _msparser.ms_mascotoptions_getGetSeqBlastAccession(self)
    def setGetSeqBlastAccession(self, *args): return _msparser.ms_mascotoptions_setGetSeqBlastAccession(self, *args)
    def getMinPeakIteration(self): return _msparser.ms_mascotoptions_getMinPeakIteration(self)
    def setMinPeakIteration(self, *args): return _msparser.ms_mascotoptions_setMinPeakIteration(self, *args)
    def isEncryptURL(self): return _msparser.ms_mascotoptions_isEncryptURL(self)
    def setEncryptURL(self, *args): return _msparser.ms_mascotoptions_setEncryptURL(self, *args)
    def getPercolatorExeFlags(self, *args): return _msparser.ms_mascotoptions_getPercolatorExeFlags(self, *args)
    def getExecAfterSearch(self, *args): return _msparser.ms_mascotoptions_getExecAfterSearch(self, *args)
    def checkExecAfterSearch(self, *args): return _msparser.ms_mascotoptions_checkExecAfterSearch(self, *args)
    def checkReportBuilderColumnArrangement(self, *args): return _msparser.ms_mascotoptions_checkReportBuilderColumnArrangement(self, *args)
ms_mascotoptions_swigregister = _msparser.ms_mascotoptions_swigregister
ms_mascotoptions_swigregister(ms_mascotoptions)

class ms_datfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_datfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_datfile, name)
    __repr__ = _swig_repr
    WST_APACHE = _msparser.ms_datfile_WST_APACHE
    WST_IIS = _msparser.ms_datfile_WST_IIS
    SEQDB_INSTALL_SHOULD_QUERY_USER = _msparser.ms_datfile_SEQDB_INSTALL_SHOULD_QUERY_USER
    SEQDB_INSTALL_CUSTOMISED = _msparser.ms_datfile_SEQDB_INSTALL_CUSTOMISED
    SEQDB_INSTALL_INACTIVE = _msparser.ms_datfile_SEQDB_INSTALL_INACTIVE
    SEQDB_INSTALL_INVALID_CONFIG = _msparser.ms_datfile_SEQDB_INSTALL_INVALID_CONFIG
    SEQDB_INSTALL_EXISTING_LARGER = _msparser.ms_datfile_SEQDB_INSTALL_EXISTING_LARGER
    SEQDB_INSTALL_INVALID_DBNAME = _msparser.ms_datfile_SEQDB_INSTALL_INVALID_DBNAME
    SEQDB_INSTALL_MUST_UPDATE_CFG = _msparser.ms_datfile_SEQDB_INSTALL_MUST_UPDATE_CFG
    SEQDB_INSTALL_MISSING_CONFIG = _msparser.ms_datfile_SEQDB_INSTALL_MISSING_CONFIG
    SEQDB_INSTALL_OLD_RULES = _msparser.ms_datfile_SEQDB_INSTALL_OLD_RULES
    SEQDB_INSTALL_WRONG_WILDCARD = _msparser.ms_datfile_SEQDB_INSTALL_WRONG_WILDCARD
    SEQDB_INSTALL_CURRENT_RULES = _msparser.ms_datfile_SEQDB_INSTALL_CURRENT_RULES
    IFLG_UPDATETAXONOMY = _msparser.ms_datfile_IFLG_UPDATETAXONOMY
    IFLG_UPDATEPARSERULES = _msparser.ms_datfile_IFLG_UPDATEPARSERULES
    IFLG_UPDATESWISSPROT = _msparser.ms_datfile_IFLG_UPDATESWISSPROT
    IFLG_UPDATECLUSTER = _msparser.ms_datfile_IFLG_UPDATECLUSTER
    IFLG_UPDATEESTTAX = _msparser.ms_datfile_IFLG_UPDATEESTTAX
    IFLG_ADDMISSINGOPTIONS = _msparser.ms_datfile_IFLG_ADDMISSINGOPTIONS
    IFLG_ADDREPORTAUTO = _msparser.ms_datfile_IFLG_ADDREPORTAUTO
    IFLG_UPDATEAPACHEFORKOPT = _msparser.ms_datfile_IFLG_UPDATEAPACHEFORKOPT
    IFLG_ADDPERCOLATOROPT = _msparser.ms_datfile_IFLG_ADDPERCOLATOROPT
    IFLG_DEFAULTNEWINSTALL = _msparser.ms_datfile_IFLG_DEFAULTNEWINSTALL
    IFLG_DEFAULTUPGRADE = _msparser.ms_datfile_IFLG_DEFAULTUPGRADE
    def __init__(self, *args): 
        this = _msparser.new_ms_datfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_datfile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_datfile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_datfile_copyFrom(self, *args)
    def getFileName(self): return _msparser.ms_datfile_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_datfile_setFileName(self, *args)
    def setConnectionSettings(self, *args): return _msparser.ms_datfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_datfile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_datfile_read_file(self)
    def save_file(self): return _msparser.ms_datfile_save_file(self)
    def getDatabases(self): return _msparser.ms_datfile_getDatabases(self)
    def setDatabases(self, *args): return _msparser.ms_datfile_setDatabases(self, *args)
    def getParseOptions(self): return _msparser.ms_datfile_getParseOptions(self)
    def setParseOptions(self, *args): return _msparser.ms_datfile_setParseOptions(self, *args)
    def getWWWOptions(self): return _msparser.ms_datfile_getWWWOptions(self)
    def setWWWOptions(self, *args): return _msparser.ms_datfile_setWWWOptions(self, *args)
    def getProcessors(self): return _msparser.ms_datfile_getProcessors(self)
    def setProcessors(self, *args): return _msparser.ms_datfile_setProcessors(self, *args)
    def getTaxonomyRules(self, *args): return _msparser.ms_datfile_getTaxonomyRules(self, *args)
    def setTaxonomyRules(self, *args): return _msparser.ms_datfile_setTaxonomyRules(self, *args)
    def getMaxTaxonomyRules(self): return _msparser.ms_datfile_getMaxTaxonomyRules(self)
    def getClusterParams(self): return _msparser.ms_datfile_getClusterParams(self)
    def setClusterParams(self, *args): return _msparser.ms_datfile_setClusterParams(self, *args)
    def getUniGeneOptions(self): return _msparser.ms_datfile_getUniGeneOptions(self)
    def setUniGeneOptions(self, *args): return _msparser.ms_datfile_setUniGeneOptions(self, *args)
    def getMascotOptions(self): return _msparser.ms_datfile_getMascotOptions(self)
    def setMascotOptions(self, *args): return _msparser.ms_datfile_setMascotOptions(self, *args)
    def getCronOptions(self): return _msparser.ms_datfile_getCronOptions(self)
    def setCronOptions(self, *args): return _msparser.ms_datfile_setCronOptions(self, *args)
    def getMascotFiles(self): return _msparser.ms_datfile_getMascotFiles(self)
    def setMascotFiles(self, *args): return _msparser.ms_datfile_setMascotFiles(self, *args)
    def setFindFileTimeout(self, *args): return _msparser.ms_datfile_setFindFileTimeout(self, *args)
    def getFindFileTimeout(self): return _msparser.ms_datfile_getFindFileTimeout(self)
    def checkSeqDBInstallRequest(self, *args): return _msparser.ms_datfile_checkSeqDBInstallRequest(self, *args)
    def updateForInstaller(self, *args): return _msparser.ms_datfile_updateForInstaller(self, *args)
    def getHeaderComments(self): return _msparser.ms_datfile_getHeaderComments(self)
    def setHeaderComments(self, *args): return _msparser.ms_datfile_setHeaderComments(self, *args)
ms_datfile_swigregister = _msparser.ms_datfile_swigregister
ms_datfile_swigregister(ms_datfile)

class ms_enzyme(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_enzyme, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_enzyme, name)
    __repr__ = _swig_repr
    UNDEFINED_CUTTER = _msparser.ms_enzyme_UNDEFINED_CUTTER
    NTERM_CUTTER = _msparser.ms_enzyme_NTERM_CUTTER
    CTERM_CUTTER = _msparser.ms_enzyme_CTERM_CUTTER
    def __init__(self, *args): 
        this = _msparser.new_ms_enzyme(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_enzyme
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_enzyme_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_enzyme_copyFrom(self, *args)
    def isValid(self): return _msparser.ms_enzyme_isValid(self)
    def verifyEnzyme(self, *args): return _msparser.ms_enzyme_verifyEnzyme(self, *args)
    def getTitle(self): return _msparser.ms_enzyme_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_enzyme_setTitle(self, *args)
    def isSemiSpecific(self): return _msparser.ms_enzyme_isSemiSpecific(self)
    def setSemiSpecific(self, *args): return _msparser.ms_enzyme_setSemiSpecific(self, *args)
    def isIndependent(self): return _msparser.ms_enzyme_isIndependent(self)
    def setIndependent(self, *args): return _msparser.ms_enzyme_setIndependent(self, *args)
    def getNumberOfCutters(self): return _msparser.ms_enzyme_getNumberOfCutters(self)
    def clearAllCutters(self): return _msparser.ms_enzyme_clearAllCutters(self)
    def addCutter(self, *args): return _msparser.ms_enzyme_addCutter(self, *args)
    def getCutterType(self, *args): return _msparser.ms_enzyme_getCutterType(self, *args)
    def getCleave(self, *args): return _msparser.ms_enzyme_getCleave(self, *args)
    def getRestrict(self, *args): return _msparser.ms_enzyme_getRestrict(self, *args)
    def canCleave(self, *args): return _msparser.ms_enzyme_canCleave(self, *args)
ms_enzyme_swigregister = _msparser.ms_enzyme_swigregister
ms_enzyme_swigregister(ms_enzyme)

class ms_enzymefile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_enzymefile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_enzymefile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_enzymefile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_enzymefile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_enzymefile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_enzymefile_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_enzymefile_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_enzymefile_getFileName(self)
    def setConnectionSettings(self, *args): return _msparser.ms_enzymefile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_enzymefile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_enzymefile_read_file(self)
    def read_buffer(self, *args): return _msparser.ms_enzymefile_read_buffer(self, *args)
    def save_file(self): return _msparser.ms_enzymefile_save_file(self)
    def getNumberOfEnzymes(self): return _msparser.ms_enzymefile_getNumberOfEnzymes(self)
    def clearEnzymes(self): return _msparser.ms_enzymefile_clearEnzymes(self)
    def appendEnzyme(self, *args): return _msparser.ms_enzymefile_appendEnzyme(self, *args)
    def getEnzymeByNumber(self, *args): return _msparser.ms_enzymefile_getEnzymeByNumber(self, *args)
    def getEnzymeByName(self, *args): return _msparser.ms_enzymefile_getEnzymeByName(self, *args)
    def isNoneFound(self): return _msparser.ms_enzymefile_isNoneFound(self)
    def updateEnzymeByNumber(self, *args): return _msparser.ms_enzymefile_updateEnzymeByNumber(self, *args)
    def updateEnzymeByName(self, *args): return _msparser.ms_enzymefile_updateEnzymeByName(self, *args)
    def deleteEnzymeByNumber(self, *args): return _msparser.ms_enzymefile_deleteEnzymeByNumber(self, *args)
    def deleteEnzymeByName(self, *args): return _msparser.ms_enzymefile_deleteEnzymeByName(self, *args)
ms_enzymefile_swigregister = _msparser.ms_enzymefile_swigregister
ms_enzymefile_swigregister(ms_enzymefile)

class ms_fragmentationrules(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_fragmentationrules, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_fragmentationrules, name)
    __repr__ = _swig_repr
    FRAG_IMMONIUM = _msparser.ms_fragmentationrules_FRAG_IMMONIUM
    FRAG_A_SERIES = _msparser.ms_fragmentationrules_FRAG_A_SERIES
    FRAG_A_MINUS_NH3 = _msparser.ms_fragmentationrules_FRAG_A_MINUS_NH3
    FRAG_A_MINUS_H2O = _msparser.ms_fragmentationrules_FRAG_A_MINUS_H2O
    FRAG_B_SERIES = _msparser.ms_fragmentationrules_FRAG_B_SERIES
    FRAG_B_MINUS_NH3 = _msparser.ms_fragmentationrules_FRAG_B_MINUS_NH3
    FRAG_B_MINUS_H2O = _msparser.ms_fragmentationrules_FRAG_B_MINUS_H2O
    FRAG_C_SERIES = _msparser.ms_fragmentationrules_FRAG_C_SERIES
    FRAG_X_SERIES = _msparser.ms_fragmentationrules_FRAG_X_SERIES
    FRAG_Y_SERIES = _msparser.ms_fragmentationrules_FRAG_Y_SERIES
    FRAG_Y_MINUS_NH3 = _msparser.ms_fragmentationrules_FRAG_Y_MINUS_NH3
    FRAG_Y_MINUS_H2O = _msparser.ms_fragmentationrules_FRAG_Y_MINUS_H2O
    FRAG_Z_SERIES = _msparser.ms_fragmentationrules_FRAG_Z_SERIES
    FRAG_INTERNAL_YB = _msparser.ms_fragmentationrules_FRAG_INTERNAL_YB
    FRAG_INTERNAL_YA = _msparser.ms_fragmentationrules_FRAG_INTERNAL_YA
    FRAG_Z_PLUS_1 = _msparser.ms_fragmentationrules_FRAG_Z_PLUS_1
    FRAG_D_SERIES = _msparser.ms_fragmentationrules_FRAG_D_SERIES
    FRAG_V_SERIES = _msparser.ms_fragmentationrules_FRAG_V_SERIES
    FRAG_W_SERIES = _msparser.ms_fragmentationrules_FRAG_W_SERIES
    FRAG_Z_PLUS_2 = _msparser.ms_fragmentationrules_FRAG_Z_PLUS_2
    def __init__(self, *args): 
        this = _msparser.new_ms_fragmentationrules(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_fragmentationrules
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_fragmentationrules_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_fragmentationrules_copyFrom(self, *args)
    def getTitle(self): return _msparser.ms_fragmentationrules_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_fragmentationrules_setTitle(self, *args)
    __swig_getmethods__["getFirstSeries"] = lambda x: _msparser.ms_fragmentationrules_getFirstSeries
    if _newclass:getFirstSeries = staticmethod(_msparser.ms_fragmentationrules_getFirstSeries)
    __swig_getmethods__["getFirstSerie"] = lambda x: _msparser.ms_fragmentationrules_getFirstSerie
    if _newclass:getFirstSerie = staticmethod(_msparser.ms_fragmentationrules_getFirstSerie)
    __swig_getmethods__["getLastSeries"] = lambda x: _msparser.ms_fragmentationrules_getLastSeries
    if _newclass:getLastSeries = staticmethod(_msparser.ms_fragmentationrules_getLastSeries)
    __swig_getmethods__["getLastSerie"] = lambda x: _msparser.ms_fragmentationrules_getLastSerie
    if _newclass:getLastSerie = staticmethod(_msparser.ms_fragmentationrules_getLastSerie)
    def isSinglyCharged(self): return _msparser.ms_fragmentationrules_isSinglyCharged(self)
    def setSinglyCharged(self, *args): return _msparser.ms_fragmentationrules_setSinglyCharged(self, *args)
    def isCharged2Plus(self): return _msparser.ms_fragmentationrules_isCharged2Plus(self)
    def setCharged2Plus(self, *args): return _msparser.ms_fragmentationrules_setCharged2Plus(self, *args)
    def isCharged3Plus(self): return _msparser.ms_fragmentationrules_isCharged3Plus(self)
    def setCharged3Plus(self, *args): return _msparser.ms_fragmentationrules_setCharged3Plus(self, *args)
    def isSeriesUsed(self, *args): return _msparser.ms_fragmentationrules_isSeriesUsed(self, *args)
    def clearSeries(self): return _msparser.ms_fragmentationrules_clearSeries(self)
    def setSeriesUsed(self, *args): return _msparser.ms_fragmentationrules_setSeriesUsed(self, *args)
    def isValid(self): return _msparser.ms_fragmentationrules_isValid(self)
    def verifyRule(self, *args): return _msparser.ms_fragmentationrules_verifyRule(self, *args)
    __swig_getmethods__["getSeriesDescription"] = lambda x: _msparser.ms_fragmentationrules_getSeriesDescription
    if _newclass:getSeriesDescription = staticmethod(_msparser.ms_fragmentationrules_getSeriesDescription)
    def getMinInternalMass(self): return _msparser.ms_fragmentationrules_getMinInternalMass(self)
    def setMinInternalMass(self, *args): return _msparser.ms_fragmentationrules_setMinInternalMass(self, *args)
    def getMaxInternalMass(self): return _msparser.ms_fragmentationrules_getMaxInternalMass(self)
    def setMaxInternalMass(self, *args): return _msparser.ms_fragmentationrules_setMaxInternalMass(self, *args)
    __swig_getmethods__["getSeriesName"] = lambda x: _msparser.ms_fragmentationrules_getSeriesName
    if _newclass:getSeriesName = staticmethod(_msparser.ms_fragmentationrules_getSeriesName)
    __swig_getmethods__["isBackboneSeries"] = lambda x: _msparser.ms_fragmentationrules_isBackboneSeries
    if _newclass:isBackboneSeries = staticmethod(_msparser.ms_fragmentationrules_isBackboneSeries)
    __swig_getmethods__["isNeutralLossSeries"] = lambda x: _msparser.ms_fragmentationrules_isNeutralLossSeries
    if _newclass:isNeutralLossSeries = staticmethod(_msparser.ms_fragmentationrules_isNeutralLossSeries)
    def anyNLseriesUsed(self, *args): return _msparser.ms_fragmentationrules_anyNLseriesUsed(self, *args)
    __swig_getmethods__["getTotalSeriesOutput"] = lambda x: _msparser.ms_fragmentationrules_getTotalSeriesOutput
    if _newclass:getTotalSeriesOutput = staticmethod(_msparser.ms_fragmentationrules_getTotalSeriesOutput)
ms_fragmentationrules_swigregister = _msparser.ms_fragmentationrules_swigregister
ms_fragmentationrules_swigregister(ms_fragmentationrules)

def ms_fragmentationrules_getFirstSeries():
  return _msparser.ms_fragmentationrules_getFirstSeries()
ms_fragmentationrules_getFirstSeries = _msparser.ms_fragmentationrules_getFirstSeries

def ms_fragmentationrules_getFirstSerie():
  return _msparser.ms_fragmentationrules_getFirstSerie()
ms_fragmentationrules_getFirstSerie = _msparser.ms_fragmentationrules_getFirstSerie

def ms_fragmentationrules_getLastSeries():
  return _msparser.ms_fragmentationrules_getLastSeries()
ms_fragmentationrules_getLastSeries = _msparser.ms_fragmentationrules_getLastSeries

def ms_fragmentationrules_getLastSerie():
  return _msparser.ms_fragmentationrules_getLastSerie()
ms_fragmentationrules_getLastSerie = _msparser.ms_fragmentationrules_getLastSerie

def ms_fragmentationrules_getSeriesDescription(*args):
  return _msparser.ms_fragmentationrules_getSeriesDescription(*args)
ms_fragmentationrules_getSeriesDescription = _msparser.ms_fragmentationrules_getSeriesDescription

def ms_fragmentationrules_getSeriesName(*args):
  return _msparser.ms_fragmentationrules_getSeriesName(*args)
ms_fragmentationrules_getSeriesName = _msparser.ms_fragmentationrules_getSeriesName

def ms_fragmentationrules_isBackboneSeries(*args):
  return _msparser.ms_fragmentationrules_isBackboneSeries(*args)
ms_fragmentationrules_isBackboneSeries = _msparser.ms_fragmentationrules_isBackboneSeries

def ms_fragmentationrules_isNeutralLossSeries(*args):
  return _msparser.ms_fragmentationrules_isNeutralLossSeries(*args)
ms_fragmentationrules_isNeutralLossSeries = _msparser.ms_fragmentationrules_isNeutralLossSeries

def ms_fragmentationrules_getTotalSeriesOutput():
  return _msparser.ms_fragmentationrules_getTotalSeriesOutput()
ms_fragmentationrules_getTotalSeriesOutput = _msparser.ms_fragmentationrules_getTotalSeriesOutput

class ms_fragrulesfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_fragrulesfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_fragrulesfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_fragrulesfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_fragrulesfile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_fragrulesfile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_fragrulesfile_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_fragrulesfile_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_fragrulesfile_getFileName(self)
    def setConnectionSettings(self, *args): return _msparser.ms_fragrulesfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_fragrulesfile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_fragrulesfile_read_file(self)
    def save_file(self): return _msparser.ms_fragrulesfile_save_file(self)
    def getNumberOfInstruments(self): return _msparser.ms_fragrulesfile_getNumberOfInstruments(self)
    def clearInstruments(self): return _msparser.ms_fragrulesfile_clearInstruments(self)
    def appendInstrument(self, *args): return _msparser.ms_fragrulesfile_appendInstrument(self, *args)
    def getInstrumentName(self, *args): return _msparser.ms_fragrulesfile_getInstrumentName(self, *args)
    def getInstrumentByName(self, *args): return _msparser.ms_fragrulesfile_getInstrumentByName(self, *args)
    def getInstrumentByNumber(self, *args): return _msparser.ms_fragrulesfile_getInstrumentByNumber(self, *args)
    def updateInstrumentByNumber(self, *args): return _msparser.ms_fragrulesfile_updateInstrumentByNumber(self, *args)
    def updateInstrumentByName(self, *args): return _msparser.ms_fragrulesfile_updateInstrumentByName(self, *args)
    def deleteInstrumentByNumber(self, *args): return _msparser.ms_fragrulesfile_deleteInstrumentByNumber(self, *args)
    def deleteInstrumentByName(self, *args): return _msparser.ms_fragrulesfile_deleteInstrumentByName(self, *args)
ms_fragrulesfile_swigregister = _msparser.ms_fragrulesfile_swigregister
ms_fragrulesfile_swigregister(ms_fragrulesfile)

class ms_license(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_license, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_license, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_license(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_license
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_license_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_license_copyFrom(self, *args)
    def getFileName(self): return _msparser.ms_license_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_license_setFileName(self, *args)
    def read_file(self): return _msparser.ms_license_read_file(self)
    def isLicenseValid(self): return _msparser.ms_license_isLicenseValid(self)
    def getLicenseString(self): return _msparser.ms_license_getLicenseString(self)
    def getLicenseVersion(self): return _msparser.ms_license_getLicenseVersion(self)
    def getStartDate(self): return _msparser.ms_license_getStartDate(self)
    def getEndDate(self): return _msparser.ms_license_getEndDate(self)
    def getNumProcessorsLicensed(self): return _msparser.ms_license_getNumProcessorsLicensed(self)
    def getLicensee(self): return _msparser.ms_license_getLicensee(self)
    def getDistributor(self): return _msparser.ms_license_getDistributor(self)
    def getFeatures(self): return _msparser.ms_license_getFeatures(self)
    def getInternalConfigurationCode(self): return _msparser.ms_license_getInternalConfigurationCode(self)
ms_license_swigregister = _msparser.ms_license_swigregister
ms_license_swigregister(ms_license)

class ms_umod_configfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_configfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_configfile, name)
    __repr__ = _swig_repr
    MODFILE_FLAGS_EMPTY = _msparser.ms_umod_configfile_MODFILE_FLAGS_EMPTY
    MODFILE_FLAGS_REGULAR = _msparser.ms_umod_configfile_MODFILE_FLAGS_REGULAR
    MODFILE_FLAGS_HIDDEN = _msparser.ms_umod_configfile_MODFILE_FLAGS_HIDDEN
    MODFILE_FLAGS_AASUBST = _msparser.ms_umod_configfile_MODFILE_FLAGS_AASUBST
    MODFILE_FLAGS_ALL = _msparser.ms_umod_configfile_MODFILE_FLAGS_ALL
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_configfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_configfile
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_umod_configfile_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_umod_configfile_defaultValues(self)
    def updateMasses(self): return _msparser.ms_umod_configfile_updateMasses(self)
    def getFileName(self): return _msparser.ms_umod_configfile_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_umod_configfile_setFileName(self, *args)
    def setSchemaFileName(self, *args): return _msparser.ms_umod_configfile_setSchemaFileName(self, *args)
    def getSchemaFileName(self): return _msparser.ms_umod_configfile_getSchemaFileName(self)
    def setConnectionSettings(self, *args): return _msparser.ms_umod_configfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_umod_configfile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_umod_configfile_read_file(self)
    def save_file(self): return _msparser.ms_umod_configfile_save_file(self)
    def read_buffer(self, *args): return _msparser.ms_umod_configfile_read_buffer(self, *args)
    def save_buffer(self, validateAgainstSchema = True): return _msparser.ms_umod_configfile_save_buffer(self, validateAgainstSchema)
    def validateDocument(self): return _msparser.ms_umod_configfile_validateDocument(self)
    def getNumberOfElements(self): return _msparser.ms_umod_configfile_getNumberOfElements(self)
    def clearElements(self): return _msparser.ms_umod_configfile_clearElements(self)
    def appendElement(self, *args): return _msparser.ms_umod_configfile_appendElement(self, *args)
    def getElementByNumber(self, *args): return _msparser.ms_umod_configfile_getElementByNumber(self, *args)
    def getElementByName(self, *args): return _msparser.ms_umod_configfile_getElementByName(self, *args)
    def updateElementByNumber(self, *args): return _msparser.ms_umod_configfile_updateElementByNumber(self, *args)
    def updateElementByName(self, *args): return _msparser.ms_umod_configfile_updateElementByName(self, *args)
    def deleteElementByNumber(self, *args): return _msparser.ms_umod_configfile_deleteElementByNumber(self, *args)
    def deleteElementByName(self, *args): return _msparser.ms_umod_configfile_deleteElementByName(self, *args)
    def getModFileList(self, *args): return _msparser.ms_umod_configfile_getModFileList(self, *args)
    def findModFileName(self, *args): return _msparser.ms_umod_configfile_findModFileName(self, *args)
    def findModification(self, *args): return _msparser.ms_umod_configfile_findModification(self, *args)
    def getNumberOfModifications(self): return _msparser.ms_umod_configfile_getNumberOfModifications(self)
    def clearModifications(self): return _msparser.ms_umod_configfile_clearModifications(self)
    def appendModification(self, *args): return _msparser.ms_umod_configfile_appendModification(self, *args)
    def getModificationByNumber(self, *args): return _msparser.ms_umod_configfile_getModificationByNumber(self, *args)
    def getModificationByName(self, *args): return _msparser.ms_umod_configfile_getModificationByName(self, *args)
    def updateModificationByNumber(self, *args): return _msparser.ms_umod_configfile_updateModificationByNumber(self, *args)
    def updateModificationByName(self, *args): return _msparser.ms_umod_configfile_updateModificationByName(self, *args)
    def deleteModificationByNumber(self, *args): return _msparser.ms_umod_configfile_deleteModificationByNumber(self, *args)
    def deleteModificationByName(self, *args): return _msparser.ms_umod_configfile_deleteModificationByName(self, *args)
    def getNumberOfAminoAcids(self): return _msparser.ms_umod_configfile_getNumberOfAminoAcids(self)
    def clearAminoAcids(self): return _msparser.ms_umod_configfile_clearAminoAcids(self)
    def appendAminoAcid(self, *args): return _msparser.ms_umod_configfile_appendAminoAcid(self, *args)
    def getAminoAcidByNumber(self, *args): return _msparser.ms_umod_configfile_getAminoAcidByNumber(self, *args)
    def getAminoAcidByName(self, *args): return _msparser.ms_umod_configfile_getAminoAcidByName(self, *args)
    def updateAminoAcidByNumber(self, *args): return _msparser.ms_umod_configfile_updateAminoAcidByNumber(self, *args)
    def updateAminoAcidByName(self, *args): return _msparser.ms_umod_configfile_updateAminoAcidByName(self, *args)
    def deleteAminoAcidByNumber(self, *args): return _msparser.ms_umod_configfile_deleteAminoAcidByNumber(self, *args)
    def deleteAminoAcidByName(self, *args): return _msparser.ms_umod_configfile_deleteAminoAcidByName(self, *args)
    def getNumberOfModBricks(self): return _msparser.ms_umod_configfile_getNumberOfModBricks(self)
    def clearModBricks(self): return _msparser.ms_umod_configfile_clearModBricks(self)
    def appendModBrick(self, *args): return _msparser.ms_umod_configfile_appendModBrick(self, *args)
    def getModBrickByNumber(self, *args): return _msparser.ms_umod_configfile_getModBrickByNumber(self, *args)
    def getModBrickByName(self, *args): return _msparser.ms_umod_configfile_getModBrickByName(self, *args)
    def updateModBrickByNumber(self, *args): return _msparser.ms_umod_configfile_updateModBrickByNumber(self, *args)
    def updateModBrickByName(self, *args): return _msparser.ms_umod_configfile_updateModBrickByName(self, *args)
    def deleteModBrickByNumber(self, *args): return _msparser.ms_umod_configfile_deleteModBrickByNumber(self, *args)
    def deleteModBrickByName(self, *args): return _msparser.ms_umod_configfile_deleteModBrickByName(self, *args)
    def getMajorVersion(self): return _msparser.ms_umod_configfile_getMajorVersion(self)
    def getMinorVersion(self): return _msparser.ms_umod_configfile_getMinorVersion(self)
ms_umod_configfile_swigregister = _msparser.ms_umod_configfile_swigregister
ms_umod_configfile_swigregister(ms_umod_configfile)

MOD_TYPE_RESIDUE = _msparser.MOD_TYPE_RESIDUE
MOD_TYPE_N_TERM = _msparser.MOD_TYPE_N_TERM
MOD_TYPE_C_TERM = _msparser.MOD_TYPE_C_TERM
MOD_TYPE_N_PROTEIN = _msparser.MOD_TYPE_N_PROTEIN
MOD_TYPE_C_PROTEIN = _msparser.MOD_TYPE_C_PROTEIN
MOD_TYPE_N_TERM_RESIDUE = _msparser.MOD_TYPE_N_TERM_RESIDUE
MOD_TYPE_C_TERM_RESIDUE = _msparser.MOD_TYPE_C_TERM_RESIDUE
MOD_TYPE_N_PROTEIN_RESIDUE = _msparser.MOD_TYPE_N_PROTEIN_RESIDUE
MOD_TYPE_C_PROTEIN_RESIDUE = _msparser.MOD_TYPE_C_PROTEIN_RESIDUE
MOD_TYPE_______LAST = _msparser.MOD_TYPE_______LAST
MASS_TYPE_MONO = _msparser.MASS_TYPE_MONO
MASS_TYPE_AVE = _msparser.MASS_TYPE_AVE
MAX_VAR_MODS = _msparser.MAX_VAR_MODS
class ms_modification(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_modification, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_modification, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_modification(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_modification
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_modification_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_modification_copyFrom(self, *args)
    def getFromUnimod(self, *args): return _msparser.ms_modification_getFromUnimod(self, *args)
    def setMassFile(self, *args): return _msparser.ms_modification_setMassFile(self, *args)
    def getMassFile(self): return _msparser.ms_modification_getMassFile(self)
    def copyMassFile(self, *args): return _msparser.ms_modification_copyMassFile(self, *args)
    def getTitle(self): return _msparser.ms_modification_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_modification_setTitle(self, *args)
    def getModificationType(self): return _msparser.ms_modification_getModificationType(self)
    def setModificationType(self, *args): return _msparser.ms_modification_setModificationType(self, *args)
    def isHidden(self): return _msparser.ms_modification_isHidden(self)
    def setHidden(self, *args): return _msparser.ms_modification_setHidden(self, *args)
    def isSubstitution(self): return _msparser.ms_modification_isSubstitution(self)
    def getDelta(self, *args): return _msparser.ms_modification_getDelta(self, *args)
    def setDelta(self, *args): return _msparser.ms_modification_setDelta(self, *args)
    def getNeutralLoss(self, *args): return _msparser.ms_modification_getNeutralLoss(self, *args)
    def getNeutralLossRequired(self): return _msparser.ms_modification_getNeutralLossRequired(self)
    def setNeutralLoss(self, *args): return _msparser.ms_modification_setNeutralLoss(self, *args)
    def getNumberOfModifiedResidues(self): return _msparser.ms_modification_getNumberOfModifiedResidues(self)
    def getModifiedResidue(self, *args): return _msparser.ms_modification_getModifiedResidue(self, *args)
    def isResidueModified(self, *args): return _msparser.ms_modification_isResidueModified(self, *args)
    def getResidueMass(self, *args): return _msparser.ms_modification_getResidueMass(self, *args)
    def clearModifiedResidues(self): return _msparser.ms_modification_clearModifiedResidues(self)
    def appendModifiedResidue(self, *args): return _msparser.ms_modification_appendModifiedResidue(self, *args)
    def getNTerminusMass(self, *args): return _msparser.ms_modification_getNTerminusMass(self, *args)
    def setNTerminusMass(self, *args): return _msparser.ms_modification_setNTerminusMass(self, *args)
    def getCTerminusMass(self, *args): return _msparser.ms_modification_getCTerminusMass(self, *args)
    def setCTerminusMass(self, *args): return _msparser.ms_modification_setCTerminusMass(self, *args)
    def getNumberOfIgnoreMasses(self): return _msparser.ms_modification_getNumberOfIgnoreMasses(self)
    def getIgnoreMass(self, *args): return _msparser.ms_modification_getIgnoreMass(self, *args)
    def clearIgnoreMasses(self): return _msparser.ms_modification_clearIgnoreMasses(self)
    def appendIgnoreMass(self, *args): return _msparser.ms_modification_appendIgnoreMass(self, *args)
    def getReqPepNeutralLoss(self, *args): return _msparser.ms_modification_getReqPepNeutralLoss(self, *args)
    def setReqPepNeutralLoss(self, *args): return _msparser.ms_modification_setReqPepNeutralLoss(self, *args)
    def getPepNeutralLoss(self, *args): return _msparser.ms_modification_getPepNeutralLoss(self, *args)
    def setPepNeutralLoss(self, *args): return _msparser.ms_modification_setPepNeutralLoss(self, *args)
ms_modification_swigregister = _msparser.ms_modification_swigregister
ms_modification_swigregister(ms_modification)

class ms_modvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_modvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_modvector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_modvector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_modvector
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_modvector_copyFrom(self, *args)
    def getNumberOfModifications(self): return _msparser.ms_modvector_getNumberOfModifications(self)
    def clearModifications(self): return _msparser.ms_modvector_clearModifications(self)
    def appendModification(self, *args): return _msparser.ms_modvector_appendModification(self, *args)
    def getModificationByNumber(self, *args): return _msparser.ms_modvector_getModificationByNumber(self, *args)
ms_modvector_swigregister = _msparser.ms_modvector_swigregister
ms_modvector_swigregister(ms_modvector)

class ms_modfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_modfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_modfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_modfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_modfile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_modfile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_modfile_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_modfile_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_modfile_getFileName(self)
    def setConnectionSettings(self, *args): return _msparser.ms_modfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_modfile_getConnectionSettings(self)
    def setMassFile(self, *args): return _msparser.ms_modfile_setMassFile(self, *args)
    def getMassFile(self): return _msparser.ms_modfile_getMassFile(self)
    def isFromSubstitutions(self): return _msparser.ms_modfile_isFromSubstitutions(self)
    def setFromSubstitutions(self, *args): return _msparser.ms_modfile_setFromSubstitutions(self, *args)
    def read_file(self): return _msparser.ms_modfile_read_file(self)
    def save_file(self): return _msparser.ms_modfile_save_file(self)
    def sortModifications(self): return _msparser.ms_modfile_sortModifications(self)
    def getNumberOfModifications(self): return _msparser.ms_modfile_getNumberOfModifications(self)
    def clearModifications(self): return _msparser.ms_modfile_clearModifications(self)
    def appendModification(self, *args): return _msparser.ms_modfile_appendModification(self, *args)
    def getModificationByNumber(self, *args): return _msparser.ms_modfile_getModificationByNumber(self, *args)
    def getModificationByName(self, *args): return _msparser.ms_modfile_getModificationByName(self, *args)
    def updateModificationByNumber(self, *args): return _msparser.ms_modfile_updateModificationByNumber(self, *args)
    def updateModificationByName(self, *args): return _msparser.ms_modfile_updateModificationByName(self, *args)
    def deleteModificationByNumber(self, *args): return _msparser.ms_modfile_deleteModificationByNumber(self, *args)
    def deleteModificationByName(self, *args): return _msparser.ms_modfile_deleteModificationByName(self, *args)
ms_modfile_swigregister = _msparser.ms_modfile_swigregister
ms_modfile_swigregister(ms_modfile)

class ms_masses(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_masses, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_masses, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_masses(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_masses
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_masses_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_masses_copyFrom(self, *args)
    def applyFixedMods(self, *args): return _msparser.ms_masses_applyFixedMods(self, *args)
    def applyIsotopes(self, *args): return _msparser.ms_masses_applyIsotopes(self, *args)
    def isSame(self, *args): return _msparser.ms_masses_isSame(self, *args)
    def getFileName(self): return _msparser.ms_masses_getFileName(self)
    def setFileName(self, *args): return _msparser.ms_masses_setFileName(self, *args)
    def setConnectionSettings(self, *args): return _msparser.ms_masses_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_masses_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_masses_read_file(self)
    def save_file(self): return _msparser.ms_masses_save_file(self)
    def getResidueMass(self, *args): return _msparser.ms_masses_getResidueMass(self, *args)
    def setResidueMasses(self, *args): return _msparser.ms_masses_setResidueMasses(self, *args)
    def getNtermDelta(self, *args): return _msparser.ms_masses_getNtermDelta(self, *args)
    def getNterminalMass(self, *args): return _msparser.ms_masses_getNterminalMass(self, *args)
    def getNtermNeutralLoss(self, *args): return _msparser.ms_masses_getNtermNeutralLoss(self, *args)
    def setNtermModification(self, *args): return _msparser.ms_masses_setNtermModification(self, *args)
    def getCtermDelta(self, *args): return _msparser.ms_masses_getCtermDelta(self, *args)
    def getCterminalMass(self, *args): return _msparser.ms_masses_getCterminalMass(self, *args)
    def getCtermNeutralLoss(self, *args): return _msparser.ms_masses_getCtermNeutralLoss(self, *args)
    def setCtermModification(self, *args): return _msparser.ms_masses_setCtermModification(self, *args)
    def getFragResidueMass(self, *args): return _msparser.ms_masses_getFragResidueMass(self, *args)
    def isResidueModified(self, *args): return _msparser.ms_masses_isResidueModified(self, *args)
    def setResidueModification(self, *args): return _msparser.ms_masses_setResidueModification(self, *args)
    def getHydrogenMass(self, *args): return _msparser.ms_masses_getHydrogenMass(self, *args)
    def setHydrogenMass(self, *args): return _msparser.ms_masses_setHydrogenMass(self, *args)
    def getCarbonMass(self, *args): return _msparser.ms_masses_getCarbonMass(self, *args)
    def setCarbonMass(self, *args): return _msparser.ms_masses_setCarbonMass(self, *args)
    def getNitrogenMass(self, *args): return _msparser.ms_masses_getNitrogenMass(self, *args)
    def setNitrogenMass(self, *args): return _msparser.ms_masses_setNitrogenMass(self, *args)
    def getOxygenMass(self, *args): return _msparser.ms_masses_getOxygenMass(self, *args)
    def setOxygenMass(self, *args): return _msparser.ms_masses_setOxygenMass(self, *args)
    def getElectronMass(self): return _msparser.ms_masses_getElectronMass(self)
    def setElectronMass(self, *args): return _msparser.ms_masses_setElectronMass(self, *args)
    def setStorage(self, *args): return _msparser.ms_masses_setStorage(self, *args)
    def defaultMasses(self, *args): return _msparser.ms_masses_defaultMasses(self, *args)
ms_masses_swigregister = _msparser.ms_masses_swigregister
ms_masses_swigregister(ms_masses)

class ms_processors(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_processors, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_processors, name)
    __repr__ = _swig_repr
    HT_NOT_CAPABLE = _msparser.ms_processors_HT_NOT_CAPABLE
    HT_ENABLED = _msparser.ms_processors_HT_ENABLED
    HT_DISABLED = _msparser.ms_processors_HT_DISABLED
    HT_SUPPORTED_NOT_ENABLED = _msparser.ms_processors_HT_SUPPORTED_NOT_ENABLED
    HT_CANNOT_DETECT = _msparser.ms_processors_HT_CANNOT_DETECT
    MAX_CORES_PER_LICENSE = _msparser.ms_processors_MAX_CORES_PER_LICENSE
    def __init__(self, *args): 
        this = _msparser.new_ms_processors(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_processors
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_processors_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_processors_copyFrom(self, *args)
    def getNumOnSystem(self): return _msparser.ms_processors_getNumOnSystem(self)
    def getNumAvailableToProcess(self): return _msparser.ms_processors_getNumAvailableToProcess(self)
    def isProcessAffinitySupported(self): return _msparser.ms_processors_isProcessAffinitySupported(self)
    def isUseProcessesNotThreads(self): return _msparser.ms_processors_isUseProcessesNotThreads(self)
    def getWhichAvailableForMascot(self): return _msparser.ms_processors_getWhichAvailableForMascot(self)
    def getWhichAvailableForMascot2(self): return _msparser.ms_processors_getWhichAvailableForMascot2(self)
    def isLogicalCPUAvailableForMascot(self, *args): return _msparser.ms_processors_isLogicalCPUAvailableForMascot(self, *args)
    def getNumPhysicalOnSystem(self): return _msparser.ms_processors_getNumPhysicalOnSystem(self)
    def getHyperThreadingState(self): return _msparser.ms_processors_getHyperThreadingState(self)
    def getNumLogicalPerPhysical(self): return _msparser.ms_processors_getNumLogicalPerPhysical(self)
    def getNumCores(self, *args): return _msparser.ms_processors_getNumCores(self, *args)
    def getPhysicalFromLogical(self, *args): return _msparser.ms_processors_getPhysicalFromLogical(self, *args)
    def getProcessorName(self): return _msparser.ms_processors_getProcessorName(self)
    def getMultithreadedName(self): return _msparser.ms_processors_getMultithreadedName(self)
    def getHyperThreadedCPUsMask(self): return _msparser.ms_processors_getHyperThreadedCPUsMask(self)
    def isPrimaryLogicalProcessor(self, *args): return _msparser.ms_processors_isPrimaryLogicalProcessor(self, *args)
    def isThreadedLogicalProcessor(self, *args): return _msparser.ms_processors_isThreadedLogicalProcessor(self, *args)
    def getCoreFromLogical(self, *args): return _msparser.ms_processors_getCoreFromLogical(self, *args)
    def getHT_IDFromLogical(self, *args): return _msparser.ms_processors_getHT_IDFromLogical(self, *args)
    def getAutoDetectNumThreads(self, *args): return _msparser.ms_processors_getAutoDetectNumThreads(self, *args)
    def GetAPIC_ID(self, *args): return _msparser.ms_processors_GetAPIC_ID(self, *args)
ms_processors_swigregister = _msparser.ms_processors_swigregister
ms_processors_swigregister(ms_processors)

class ms_taxonomychoice(ms_customproperty):
    __swig_setmethods__ = {}
    for _s in [ms_customproperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxonomychoice, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_customproperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxonomychoice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxonomychoice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxonomychoice
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_taxonomychoice_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_taxonomychoice_copyFrom(self, *args)
    def getTitle(self): return _msparser.ms_taxonomychoice_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_taxonomychoice_setTitle(self, *args)
    def getNumberOfIncludeTaxonomies(self): return _msparser.ms_taxonomychoice_getNumberOfIncludeTaxonomies(self)
    def getIncludeTaxonomy(self, *args): return _msparser.ms_taxonomychoice_getIncludeTaxonomy(self, *args)
    def clearIncludeTaxonomies(self): return _msparser.ms_taxonomychoice_clearIncludeTaxonomies(self)
    def appendIncludeTaxonomy(self, *args): return _msparser.ms_taxonomychoice_appendIncludeTaxonomy(self, *args)
    def getNumberOfExcludeTaxonomies(self): return _msparser.ms_taxonomychoice_getNumberOfExcludeTaxonomies(self)
    def getExcludeTaxonomy(self, *args): return _msparser.ms_taxonomychoice_getExcludeTaxonomy(self, *args)
    def clearExcludeTaxonomies(self): return _msparser.ms_taxonomychoice_clearExcludeTaxonomies(self)
    def appendExcludeTaxonomy(self, *args): return _msparser.ms_taxonomychoice_appendExcludeTaxonomy(self, *args)
ms_taxonomychoice_swigregister = _msparser.ms_taxonomychoice_swigregister
ms_taxonomychoice_swigregister(ms_taxonomychoice)

class ms_taxonomyfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_taxonomyfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_taxonomyfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_taxonomyfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_taxonomyfile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_taxonomyfile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_taxonomyfile_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_taxonomyfile_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_taxonomyfile_getFileName(self)
    def setConnectionSettings(self, *args): return _msparser.ms_taxonomyfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_taxonomyfile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_taxonomyfile_read_file(self)
    def read_buffer(self, *args): return _msparser.ms_taxonomyfile_read_buffer(self, *args)
    def save_file(self): return _msparser.ms_taxonomyfile_save_file(self)
    def getNumberOfEntries(self): return _msparser.ms_taxonomyfile_getNumberOfEntries(self)
    def clearEntries(self): return _msparser.ms_taxonomyfile_clearEntries(self)
    def appendEntry(self, *args): return _msparser.ms_taxonomyfile_appendEntry(self, *args)
    def getEntryByNumber(self, *args): return _msparser.ms_taxonomyfile_getEntryByNumber(self, *args)
    def getEntryByName(self, *args): return _msparser.ms_taxonomyfile_getEntryByName(self, *args)
ms_taxonomyfile_swigregister = _msparser.ms_taxonomyfile_swigregister
ms_taxonomyfile_swigregister(ms_taxonomyfile)

class ms_fragment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_fragment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_fragment, name)
    __repr__ = _swig_repr
    def copyFrom(self, *args): return _msparser.ms_fragment_copyFrom(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_ms_fragment(*args)
        try: self.this.append(this)
        except: self.this = this
    def isRegular(self): return _msparser.ms_fragment_isRegular(self)
    def isNTerminal(self): return _msparser.ms_fragment_isNTerminal(self)
    def isCTerminal(self): return _msparser.ms_fragment_isCTerminal(self)
    def isInternal(self): return _msparser.ms_fragment_isInternal(self)
    def isImmonium(self): return _msparser.ms_fragment_isImmonium(self)
    def getMass(self): return _msparser.ms_fragment_getMass(self)
    def getNeutralLoss(self): return _msparser.ms_fragment_getNeutralLoss(self)
    def getLabel(self): return _msparser.ms_fragment_getLabel(self)
    def getSeriesName(self): return _msparser.ms_fragment_getSeriesName(self)
    def getColumn(self): return _msparser.ms_fragment_getColumn(self)
    def getStart(self): return _msparser.ms_fragment_getStart(self)
    def getEnd(self): return _msparser.ms_fragment_getEnd(self)
    def getCharge(self): return _msparser.ms_fragment_getCharge(self)
    def clearMatchedIon(self): return _msparser.ms_fragment_clearMatchedIon(self)
    def setMatchedIon(self, *args): return _msparser.ms_fragment_setMatchedIon(self, *args)
    def getMatchedIonMass(self): return _msparser.ms_fragment_getMatchedIonMass(self)
    def getMatchedIonIntensity(self): return _msparser.ms_fragment_getMatchedIonIntensity(self)
    def getAllMatchedIons(self, *args): return _msparser.ms_fragment_getAllMatchedIons(self, *args)
    __swig_destroy__ = _msparser.delete_ms_fragment
    __del__ = lambda self : None;
ms_fragment_swigregister = _msparser.ms_fragment_swigregister
ms_fragment_swigregister(ms_fragment)

class ms_fragmentvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_fragmentvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_fragmentvector, name)
    __repr__ = _swig_repr
    MATCH_MOST_INTENSE_PEAK = _msparser.ms_fragmentvector_MATCH_MOST_INTENSE_PEAK
    MATCH_CLOSEST_PEAK = _msparser.ms_fragmentvector_MATCH_CLOSEST_PEAK
    def __init__(self, *args): 
        this = _msparser.new_ms_fragmentvector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_fragmentvector
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_fragmentvector_copyFrom(self, *args)
    def getNumberOfFragments(self): return _msparser.ms_fragmentvector_getNumberOfFragments(self)
    def clearFragments(self): return _msparser.ms_fragmentvector_clearFragments(self)
    def appendFragment(self, *args): return _msparser.ms_fragmentvector_appendFragment(self, *args)
    def getFragmentByNumber(self, *args): return _msparser.ms_fragmentvector_getFragmentByNumber(self, *args)
    def getVector(self): return _msparser.ms_fragmentvector_getVector(self)
    def addExperimentalData(self, *args): return _msparser.ms_fragmentvector_addExperimentalData(self, *args)
ms_fragmentvector_swigregister = _msparser.ms_fragmentvector_swigregister
ms_fragmentvector_swigregister(ms_fragmentvector)

class ms_security_task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_security_task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_security_task, name)
    __repr__ = _swig_repr
    TYPE_BOOL = _msparser.ms_security_task_TYPE_BOOL
    TYPE_EQ_LONG = _msparser.ms_security_task_TYPE_EQ_LONG
    TYPE_LTE_LONG = _msparser.ms_security_task_TYPE_LTE_LONG
    TYPE_GTE_LONG = _msparser.ms_security_task_TYPE_GTE_LONG
    TYPE_LONG_ARRAY = _msparser.ms_security_task_TYPE_LONG_ARRAY
    TYPE_EQ_DOUBLE = _msparser.ms_security_task_TYPE_EQ_DOUBLE
    TYPE_LTE_DOUBLE = _msparser.ms_security_task_TYPE_LTE_DOUBLE
    TYPE_GTE_DOUBLE = _msparser.ms_security_task_TYPE_GTE_DOUBLE
    TYPE_DOUBLE_ARRAY = _msparser.ms_security_task_TYPE_DOUBLE_ARRAY
    TYPE_EQ_STRING = _msparser.ms_security_task_TYPE_EQ_STRING
    TYPE_STRING_ARRAY = _msparser.ms_security_task_TYPE_STRING_ARRAY
    TYPE_USERS_ARRAY = _msparser.ms_security_task_TYPE_USERS_ARRAY
    TYPE_ALL_USERS_ARRAY = _msparser.ms_security_task_TYPE_ALL_USERS_ARRAY
    __swig_destroy__ = _msparser.delete_ms_security_task
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _msparser.new_ms_security_task(*args)
        try: self.this.append(this)
        except: self.this = this
    def getID(self): return _msparser.ms_security_task_getID(self)
    def setID(self, *args): return _msparser.ms_security_task_setID(self, *args)
    def getConstantName(self): return _msparser.ms_security_task_getConstantName(self)
    def setConstantName(self, *args): return _msparser.ms_security_task_setConstantName(self, *args)
    def getNotes(self): return _msparser.ms_security_task_getNotes(self)
    def setNotes(self, *args): return _msparser.ms_security_task_setNotes(self, *args)
    def getDescription(self): return _msparser.ms_security_task_getDescription(self)
    def setDescription(self, *args): return _msparser.ms_security_task_setDescription(self, *args)
    def getType(self): return _msparser.ms_security_task_getType(self)
    def setType(self, *args): return _msparser.ms_security_task_setType(self, *args)
    def clearParams(self): return _msparser.ms_security_task_clearParams(self)
    def setParams(self, *args): return _msparser.ms_security_task_setParams(self, *args)
    def addLongParam(self, *args): return _msparser.ms_security_task_addLongParam(self, *args)
    def addDoubleParam(self, *args): return _msparser.ms_security_task_addDoubleParam(self, *args)
    def addStringParam(self, *args): return _msparser.ms_security_task_addStringParam(self, *args)
    def getLongParams(self): return _msparser.ms_security_task_getLongParams(self)
    def getDoubleParams(self): return _msparser.ms_security_task_getDoubleParams(self)
    def getStringParams(self): return _msparser.ms_security_task_getStringParams(self)
    def getAllParamsAsString(self): return _msparser.ms_security_task_getAllParamsAsString(self)
    def isPermitted(self): return _msparser.ms_security_task_isPermitted(self)
    def isPermitted_long(self, *args): return _msparser.ms_security_task_isPermitted_long(self, *args)
    def isPermitted_double(self, *args): return _msparser.ms_security_task_isPermitted_double(self, *args)
    def isPermitted_string(self, *args): return _msparser.ms_security_task_isPermitted_string(self, *args)
ms_security_task_swigregister = _msparser.ms_security_task_swigregister
ms_security_task_swigregister(ms_security_task)

class ms_security_tasks(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_security_tasks, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_security_tasks, name)
    __repr__ = _swig_repr
    SECTASK_ALLOWPMF = _msparser.ms_security_tasks_SECTASK_ALLOWPMF
    SECTASK_ALLOWMSMS = _msparser.ms_security_tasks_SECTASK_ALLOWMSMS
    SECTASK_ALLOWMSMSNOENZYME = _msparser.ms_security_tasks_SECTASK_ALLOWMSMSNOENZYME
    SECTASK_ALLOWPMFNOENZYME = _msparser.ms_security_tasks_SECTASK_ALLOWPMFNOENZYME
    SECTASK_MAXCONCURRENTSEARCHES = _msparser.ms_security_tasks_SECTASK_MAXCONCURRENTSEARCHES
    SECTASK_MAXJOBPRIORITY = _msparser.ms_security_tasks_SECTASK_MAXJOBPRIORITY
    SECTASK_MAXQUERIES = _msparser.ms_security_tasks_SECTASK_MAXQUERIES
    SECTASK_MAXEXECUTIONTIME = _msparser.ms_security_tasks_SECTASK_MAXEXECUTIONTIME
    SECTASK_ALLFASTA = _msparser.ms_security_tasks_SECTASK_ALLFASTA
    SECTASK_NAMEDFASTA = _msparser.ms_security_tasks_SECTASK_NAMEDFASTA
    SECTASK_MAXVARMODS = _msparser.ms_security_tasks_SECTASK_MAXVARMODS
    SECTASK_MAXETVARMODS = _msparser.ms_security_tasks_SECTASK_MAXETVARMODS
    SECTASK_SEESEARCHINGROUP = _msparser.ms_security_tasks_SECTASK_SEESEARCHINGROUP
    SECTASK_SEEALLSEARCHESWITHUSERID = _msparser.ms_security_tasks_SECTASK_SEEALLSEARCHESWITHUSERID
    SECTASK_SEEOLDSEARCHES = _msparser.ms_security_tasks_SECTASK_SEEOLDSEARCHES
    SECTASK_USEMSREVIEWEXE = _msparser.ms_security_tasks_SECTASK_USEMSREVIEWEXE
    SECTASK_VIEWCONFIGUSINGMSSTATUS = _msparser.ms_security_tasks_SECTASK_VIEWCONFIGUSINGMSSTATUS
    SECTASK_MODIFYOWNPROFILE = _msparser.ms_security_tasks_SECTASK_MODIFYOWNPROFILE
    SECTASK_DAEMONCLIENT = _msparser.ms_security_tasks_SECTASK_DAEMONCLIENT
    SECTASK_DISTILLERCLIENT = _msparser.ms_security_tasks_SECTASK_DISTILLERCLIENT
    SECTASK_ALLOWSPOOFOTHERUSER = _msparser.ms_security_tasks_SECTASK_ALLOWSPOOFOTHERUSER
    SECTASK_INTEGRASYSTEMACCOUNT = _msparser.ms_security_tasks_SECTASK_INTEGRASYSTEMACCOUNT
    SECTASK_BIOTOOLSBATCH = _msparser.ms_security_tasks_SECTASK_BIOTOOLSBATCH
    SECTASK_SPOOFNAMEDGROUPSONLY = _msparser.ms_security_tasks_SECTASK_SPOOFNAMEDGROUPSONLY
    SECTASK_DOWNLOAD_DISTILLER_XML = _msparser.ms_security_tasks_SECTASK_DOWNLOAD_DISTILLER_XML
    SECTASK_UPLOAD_DISTILLER_XML = _msparser.ms_security_tasks_SECTASK_UPLOAD_DISTILLER_XML
    SECTASK_ADMINPAGES = _msparser.ms_security_tasks_SECTASK_ADMINPAGES
    SECTASK_ACCESSDBSETUP = _msparser.ms_security_tasks_SECTASK_ACCESSDBSETUP
    SECTASK_USEMSSTATUSEXE = _msparser.ms_security_tasks_SECTASK_USEMSSTATUSEXE
    SECTASK_MSSTATUSEXECLUSTER = _msparser.ms_security_tasks_SECTASK_MSSTATUSEXECLUSTER
    SECTASK_MSSTATUSEXERETRYDB = _msparser.ms_security_tasks_SECTASK_MSSTATUSEXERETRYDB
    SECTASK_KILLTASKINGROUP = _msparser.ms_security_tasks_SECTASK_KILLTASKINGROUP
    SECTASK_KILLALLTASK = _msparser.ms_security_tasks_SECTASK_KILLALLTASK
    SECTASK_VIEWCONFIG = _msparser.ms_security_tasks_SECTASK_VIEWCONFIG
    SECTASK_EDITCONFIG = _msparser.ms_security_tasks_SECTASK_EDITCONFIG
    SECTASK_MAXETACCESSIONS = _msparser.ms_security_tasks_SECTASK_MAXETACCESSIONS
    SECTASK_MAXNOENZQUERIES = _msparser.ms_security_tasks_SECTASK_MAXNOENZQUERIES
    SECTASK_MAXFASTAFILES = _msparser.ms_security_tasks_SECTASK_MAXFASTAFILES
    SECTASK_DENYQUANT = _msparser.ms_security_tasks_SECTASK_DENYQUANT
    SECTASK_SEESEARCHINANYGROUP = _msparser.ms_security_tasks_SECTASK_SEESEARCHINANYGROUP
    MISECTASK_ACCESS = _msparser.ms_security_tasks_MISECTASK_ACCESS
    MISECTASK_PROTEINAPPROVAL = _msparser.ms_security_tasks_MISECTASK_PROTEINAPPROVAL
    MISECTASK_ADDIMPORTFILTER = _msparser.ms_security_tasks_MISECTASK_ADDIMPORTFILTER
    MISECTASK_ADMIN = _msparser.ms_security_tasks_MISECTASK_ADMIN
    MISECTASK_ADDCUSTOMREPORT = _msparser.ms_security_tasks_MISECTASK_ADDCUSTOMREPORT
    MISECTASK_DELETECUSTOMREPORT = _msparser.ms_security_tasks_MISECTASK_DELETECUSTOMREPORT
    MISECTASK_ADDEXCLUSIONFILE = _msparser.ms_security_tasks_MISECTASK_ADDEXCLUSIONFILE
    MISECTASK_DELETEEXCLUSIONFILE = _msparser.ms_security_tasks_MISECTASK_DELETEEXCLUSIONFILE
    MISECTASK_SENDNOTIFICATION = _msparser.ms_security_tasks_MISECTASK_SENDNOTIFICATION
    __swig_destroy__ = _msparser.delete_ms_security_tasks
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _msparser.new_ms_security_tasks(*args)
        try: self.this.append(this)
        except: self.this = this
    def loadFromFile(self, *args): return _msparser.ms_security_tasks_loadFromFile(self, *args)
    def saveToFile(self, *args): return _msparser.ms_security_tasks_saveToFile(self, *args)
    def addTask(self, *args): return _msparser.ms_security_tasks_addTask(self, *args)
    def removeTask(self, *args): return _msparser.ms_security_tasks_removeTask(self, *args)
    def removeAllTasks(self): return _msparser.ms_security_tasks_removeAllTasks(self)
    def isPermitted(self, *args): return _msparser.ms_security_tasks_isPermitted(self, *args)
    def isPermitted_long(self, *args): return _msparser.ms_security_tasks_isPermitted_long(self, *args)
    def isPermitted_double(self, *args): return _msparser.ms_security_tasks_isPermitted_double(self, *args)
    def isPermitted_string(self, *args): return _msparser.ms_security_tasks_isPermitted_string(self, *args)
    def isFastaPermitted(self, *args): return _msparser.ms_security_tasks_isFastaPermitted(self, *args)
    def getNumberOfTasks(self): return _msparser.ms_security_tasks_getNumberOfTasks(self)
    def getTask(self, *args): return _msparser.ms_security_tasks_getTask(self, *args)
    def getTaskFromID(self, *args): return _msparser.ms_security_tasks_getTaskFromID(self, *args)
    def updateTask(self, *args): return _msparser.ms_security_tasks_updateTask(self, *args)
    def __iadd__(self, *args): return _msparser.ms_security_tasks___iadd__(self, *args)
    def getDiffsAsText(self, *args): return _msparser.ms_security_tasks_getDiffsAsText(self, *args)
    def updateAllUsersTasks(self, *args): return _msparser.ms_security_tasks_updateAllUsersTasks(self, *args)
ms_security_tasks_swigregister = _msparser.ms_security_tasks_swigregister
ms_security_tasks_swigregister(ms_security_tasks)

class ms_user(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_user, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_user, name)
    __repr__ = _swig_repr
    USER_SECURITY_DISABLED = _msparser.ms_user_USER_SECURITY_DISABLED
    USER_NORMAL = _msparser.ms_user_USER_NORMAL
    USER_INTEGRA = _msparser.ms_user_USER_INTEGRA
    USER_COMPUTER_NAME = _msparser.ms_user_USER_COMPUTER_NAME
    USER_IP_ADDRESS = _msparser.ms_user_USER_IP_ADDRESS
    USER_AGENT_STRING = _msparser.ms_user_USER_AGENT_STRING
    USER_WEBAUTH = _msparser.ms_user_USER_WEBAUTH
    USERID_SECURITY_DISABLED = _msparser.ms_user_USERID_SECURITY_DISABLED
    USERID_GUEST = _msparser.ms_user_USERID_GUEST
    USERID_ADMINISTRATOR = _msparser.ms_user_USERID_ADMINISTRATOR
    USERID_CMDLINE = _msparser.ms_user_USERID_CMDLINE
    USERID_DAEMON = _msparser.ms_user_USERID_DAEMON
    USERID_PUBLIC_SEARCHES = _msparser.ms_user_USERID_PUBLIC_SEARCHES
    USERID_INTEGRA_SYSTEM = _msparser.ms_user_USERID_INTEGRA_SYSTEM
    USERID_LAST = _msparser.ms_user_USERID_LAST
    def __init__(self, *args): 
        this = _msparser.new_ms_user(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_user
    __del__ = lambda self : None;
    def getUserType(self): return _msparser.ms_user_getUserType(self)
    def setUserType(self, *args): return _msparser.ms_user_setUserType(self, *args)
    def getFullName(self): return _msparser.ms_user_getFullName(self)
    def setFullName(self, *args): return _msparser.ms_user_setFullName(self, *args)
    def getEncryptedPassword(self): return _msparser.ms_user_getEncryptedPassword(self)
    def setEncryptedPassword(self, *args): return _msparser.ms_user_setEncryptedPassword(self, *args)
    def setPassword(self, *args): return _msparser.ms_user_setPassword(self, *args)
    def validatePassword(self, *args): return _msparser.ms_user_validatePassword(self, *args)
    def getPasswordExpiry(self): return _msparser.ms_user_getPasswordExpiry(self)
    def setPasswordExpiry(self, *args): return _msparser.ms_user_setPasswordExpiry(self, *args)
    def getID(self): return _msparser.ms_user_getID(self)
    def setID(self, *args): return _msparser.ms_user_setID(self, *args)
    def getName(self): return _msparser.ms_user_getName(self)
    def setName(self, *args): return _msparser.ms_user_setName(self, *args)
    def isAccountEnabled(self): return _msparser.ms_user_isAccountEnabled(self)
    def setAccountEnabled(self, *args): return _msparser.ms_user_setAccountEnabled(self, *args)
    def getEmailAddress(self): return _msparser.ms_user_getEmailAddress(self)
    def setEmailAddress(self, *args): return _msparser.ms_user_setEmailAddress(self, *args)
    def hasPasswordExpired(self): return _msparser.ms_user_hasPasswordExpired(self)
    def saveStringParam(self, *args): return _msparser.ms_user_saveStringParam(self, *args)
    def getStringParam(self, *args): return _msparser.ms_user_getStringParam(self, *args)
    def clearParam(self, *args): return _msparser.ms_user_clearParam(self, *args)
ms_user_swigregister = _msparser.ms_user_swigregister
ms_user_swigregister(ms_user)

class ms_group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_group, name)
    __repr__ = _swig_repr
    GROUPID_GUESTS = _msparser.ms_group_GROUPID_GUESTS
    GROUPID_ADMINISTRATORS = _msparser.ms_group_GROUPID_ADMINISTRATORS
    GROUPID_POWERUSERS = _msparser.ms_group_GROUPID_POWERUSERS
    GROUPID_DAEMONS = _msparser.ms_group_GROUPID_DAEMONS
    GROUPID_INTEGRA_SYSTEM = _msparser.ms_group_GROUPID_INTEGRA_SYSTEM
    GROUPID_LAST = _msparser.ms_group_GROUPID_LAST
    def __init__(self, *args): 
        this = _msparser.new_ms_group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_group
    __del__ = lambda self : None;
    def addUser(self, *args): return _msparser.ms_group_addUser(self, *args)
    def deleteUser(self, *args): return _msparser.ms_group_deleteUser(self, *args)
    def isUserInGroup(self, *args): return _msparser.ms_group_isUserInGroup(self, *args)
    def getAllUserIDs(self): return _msparser.ms_group_getAllUserIDs(self)
    def getName(self): return _msparser.ms_group_getName(self)
    def setName(self, *args): return _msparser.ms_group_setName(self, *args)
    def addPermittedTask(self, *args): return _msparser.ms_group_addPermittedTask(self, *args)
    def removePermittedTask(self, *args): return _msparser.ms_group_removePermittedTask(self, *args)
    def getPermittedTasks(self): return _msparser.ms_group_getPermittedTasks(self)
    def setPermittedTasks(self, *args): return _msparser.ms_group_setPermittedTasks(self, *args)
    def getID(self): return _msparser.ms_group_getID(self)
    def setID(self, *args): return _msparser.ms_group_setID(self, *args)
    def saveStringParam(self, *args): return _msparser.ms_group_saveStringParam(self, *args)
    def getStringParam(self, *args): return _msparser.ms_group_getStringParam(self, *args)
    def clearParam(self, *args): return _msparser.ms_group_clearParam(self, *args)
ms_group_swigregister = _msparser.ms_group_swigregister
ms_group_swigregister(ms_group)

class ms_security_options(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_security_options, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_security_options, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _msparser.new_ms_security_options()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_security_options
    __del__ = lambda self : None;
    def isSecurityEnabled(self): return _msparser.ms_security_options_isSecurityEnabled(self)
    def setSecurityEnabled(self, *args): return _msparser.ms_security_options_setSecurityEnabled(self, *args)
    def getSessionTimeout(self): return _msparser.ms_security_options_getSessionTimeout(self)
    def setSessionTimeout(self, *args): return _msparser.ms_security_options_setSessionTimeout(self, *args)
    def getDefaultPasswordExpiryTime(self): return _msparser.ms_security_options_getDefaultPasswordExpiryTime(self)
    def setDefaultPasswordExpiryTime(self, *args): return _msparser.ms_security_options_setDefaultPasswordExpiryTime(self, *args)
    def getMinimumPasswordLength(self): return _msparser.ms_security_options_getMinimumPasswordLength(self)
    def setMinimumPasswordLength(self, *args): return _msparser.ms_security_options_setMinimumPasswordLength(self, *args)
    def getUseSessionCookies(self): return _msparser.ms_security_options_getUseSessionCookies(self)
    def setUseSessionCookies(self, *args): return _msparser.ms_security_options_setUseSessionCookies(self, *args)
    def getVerifySessionIPAddress(self): return _msparser.ms_security_options_getVerifySessionIPAddress(self)
    def setVerifySessionIPAddress(self, *args): return _msparser.ms_security_options_setVerifySessionIPAddress(self, *args)
    def getLoggingLevel(self): return _msparser.ms_security_options_getLoggingLevel(self)
    def setLoggingLevel(self, *args): return _msparser.ms_security_options_setLoggingLevel(self, *args)
    def getIntegraAppServerURL(self): return _msparser.ms_security_options_getIntegraAppServerURL(self)
    def setIntegraAppServerURL(self, *args): return _msparser.ms_security_options_setIntegraAppServerURL(self, *args)
    def getIntegraDatabaseName(self): return _msparser.ms_security_options_getIntegraDatabaseName(self)
    def setIntegraDatabaseName(self, *args): return _msparser.ms_security_options_setIntegraDatabaseName(self, *args)
    def getIntegraOracleServerName(self): return _msparser.ms_security_options_getIntegraOracleServerName(self)
    def setIntegraOracleServerName(self, *args): return _msparser.ms_security_options_setIntegraOracleServerName(self, *args)
    def getLogFileName(self): return _msparser.ms_security_options_getLogFileName(self)
    def setLogFileName(self, *args): return _msparser.ms_security_options_setLogFileName(self, *args)
ms_security_options_swigregister = _msparser.ms_security_options_swigregister
ms_security_options_swigregister(ms_security_options)

class ms_security(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_security, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_security, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _msparser.new_ms_security()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_security
    __del__ = lambda self : None;
    def addNewUser(self, *args): return _msparser.ms_security_addNewUser(self, *args)
    def getUser(self, *args): return _msparser.ms_security_getUser(self, *args)
    def getUserFromID(self, *args): return _msparser.ms_security_getUserFromID(self, *args)
    def getAllUserIDs(self): return _msparser.ms_security_getAllUserIDs(self)
    def deleteUser(self, *args): return _msparser.ms_security_deleteUser(self, *args)
    def updateUser(self, *args): return _msparser.ms_security_updateUser(self, *args)
    def updatePassword(self, *args): return _msparser.ms_security_updatePassword(self, *args)
    def getIntegraUsers(self): return _msparser.ms_security_getIntegraUsers(self)
    def addNewGroup(self, *args): return _msparser.ms_security_addNewGroup(self, *args)
    def getGroup(self, *args): return _msparser.ms_security_getGroup(self, *args)
    def getGroupFromID(self, *args): return _msparser.ms_security_getGroupFromID(self, *args)
    def getAllGroupIDs(self): return _msparser.ms_security_getAllGroupIDs(self)
    def deleteGroup(self, *args): return _msparser.ms_security_deleteGroup(self, *args)
    def updateGroup(self, *args): return _msparser.ms_security_updateGroup(self, *args)
    def getPermittedTasksForUser(self, *args): return _msparser.ms_security_getPermittedTasksForUser(self, *args)
    def getAllCustomParamsForUser(self, *args): return _msparser.ms_security_getAllCustomParamsForUser(self, *args)
    def getMascotSecurityOptions(self): return _msparser.ms_security_getMascotSecurityOptions(self)
    def getTasks(self): return _msparser.ms_security_getTasks(self)
    def createDefaults(self, sessionID = ""): return _msparser.ms_security_createDefaults(self, sessionID)
    def updateAllSessionFiles(self, deleteOnly = False): return _msparser.ms_security_updateAllSessionFiles(self, deleteOnly)
ms_security_swigregister = _msparser.ms_security_swigregister
ms_security_swigregister(ms_security)

class ms_session(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_session, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_session, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_session(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_session
    __del__ = lambda self : None;
    def getID(self): return _msparser.ms_session_getID(self)
    def getUserID(self): return _msparser.ms_session_getUserID(self)
    def getUserName(self): return _msparser.ms_session_getUserName(self)
    def getFullUserName(self): return _msparser.ms_session_getFullUserName(self)
    def getEmailAddress(self): return _msparser.ms_session_getEmailAddress(self)
    def isSecurityEnabled(self): return _msparser.ms_session_isSecurityEnabled(self)
    def getLastAccessed(self): return _msparser.ms_session_getLastAccessed(self)
    def getTimeout(self): return _msparser.ms_session_getTimeout(self)
    def getIPAddress(self): return _msparser.ms_session_getIPAddress(self)
    def getPermittedTasks(self): return _msparser.ms_session_getPermittedTasks(self)
    def setPermittedTasks(self, *args): return _msparser.ms_session_setPermittedTasks(self, *args)
    def getParams(self): return _msparser.ms_session_getParams(self)
    def isPermitted(self, *args): return _msparser.ms_session_isPermitted(self, *args)
    def isPermitted_long(self, *args): return _msparser.ms_session_isPermitted_long(self, *args)
    def isPermitted_double(self, *args): return _msparser.ms_session_isPermitted_double(self, *args)
    def isPermitted_string(self, *args): return _msparser.ms_session_isPermitted_string(self, *args)
    def isFastaPermitted(self, *args): return _msparser.ms_session_isFastaPermitted(self, *args)
    def canResultsFileBeViewed(self, *args): return _msparser.ms_session_canResultsFileBeViewed(self, *args)
    def saveStringParam(self, *args): return _msparser.ms_session_saveStringParam(self, *args)
    def saveIntParam(self, *args): return _msparser.ms_session_saveIntParam(self, *args)
    def saveLongParam(self, *args): return _msparser.ms_session_saveLongParam(self, *args)
    def saveTimeParam(self, *args): return _msparser.ms_session_saveTimeParam(self, *args)
    def saveDoubleParam(self, *args): return _msparser.ms_session_saveDoubleParam(self, *args)
    def saveBoolParam(self, *args): return _msparser.ms_session_saveBoolParam(self, *args)
    def getStringParam(self, *args): return _msparser.ms_session_getStringParam(self, *args)
    def getIntParam(self, *args): return _msparser.ms_session_getIntParam(self, *args)
    def getLongParam(self, *args): return _msparser.ms_session_getLongParam(self, *args)
    def getTimeParam(self, *args): return _msparser.ms_session_getTimeParam(self, *args)
    def getDoubleParam(self, *args): return _msparser.ms_session_getDoubleParam(self, *args)
    def getBoolParam(self, *args): return _msparser.ms_session_getBoolParam(self, *args)
    def clearParam(self, *args): return _msparser.ms_session_clearParam(self, *args)
    def destroy(self): return _msparser.ms_session_destroy(self)
    def isTimedOut(self): return _msparser.ms_session_isTimedOut(self)
    def getUserType(self): return _msparser.ms_session_getUserType(self)
    def update(self, *args): return _msparser.ms_session_update(self, *args)
    def getSpoofableUsers(self): return _msparser.ms_session_getSpoofableUsers(self)
ms_session_swigregister = _msparser.ms_session_swigregister
ms_session_swigregister(ms_session)

class ms_xml_IValidatable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_xml_IValidatable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_xml_IValidatable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getSchemaType(self): return _msparser.ms_xml_IValidatable_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_xml_IValidatable_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_xml_IValidatable_validateDeep(self, *args)
    __swig_destroy__ = _msparser.delete_ms_xml_IValidatable
    __del__ = lambda self : None;
ms_xml_IValidatable_swigregister = _msparser.ms_xml_IValidatable_swigregister
ms_xml_IValidatable_swigregister(ms_xml_IValidatable)

MS_XML_ATTRIBUTE_REQUIRED = _msparser.MS_XML_ATTRIBUTE_REQUIRED
MS_XML_ATTRIBUTE_OPTIONAL = _msparser.MS_XML_ATTRIBUTE_OPTIONAL
class ms_xml_typeinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_xml_typeinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_xml_typeinfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_xml_typeinfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_xml_typeinfo
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_xml_typeinfo_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_xml_typeinfo_copyFrom(self, *args)
    def getTypeName(self): return _msparser.ms_xml_typeinfo_getTypeName(self)
    def isComplexSequence(self): return _msparser.ms_xml_typeinfo_isComplexSequence(self)
    def isComplexChoice(self): return _msparser.ms_xml_typeinfo_isComplexChoice(self)
    def isExtensionType(self): return _msparser.ms_xml_typeinfo_isExtensionType(self)
    def isRestrictionType(self): return _msparser.ms_xml_typeinfo_isRestrictionType(self)
    def getBaseType(self): return _msparser.ms_xml_typeinfo_getBaseType(self)
    def getTypeAnnotation(self): return _msparser.ms_xml_typeinfo_getTypeAnnotation(self)
    def hasMinInclusive(self): return _msparser.ms_xml_typeinfo_hasMinInclusive(self)
    def getMinInclusive(self): return _msparser.ms_xml_typeinfo_getMinInclusive(self)
    def hasMaxInclusive(self): return _msparser.ms_xml_typeinfo_hasMaxInclusive(self)
    def getMaxInclusive(self): return _msparser.ms_xml_typeinfo_getMaxInclusive(self)
    def hasMinLength(self): return _msparser.ms_xml_typeinfo_hasMinLength(self)
    def getMinLength(self): return _msparser.ms_xml_typeinfo_getMinLength(self)
    def hasMaxLength(self): return _msparser.ms_xml_typeinfo_hasMaxLength(self)
    def getMaxLength(self): return _msparser.ms_xml_typeinfo_getMaxLength(self)
    def getNumberOfEnumerations(self): return _msparser.ms_xml_typeinfo_getNumberOfEnumerations(self)
    def getEnumerationValue(self, *args): return _msparser.ms_xml_typeinfo_getEnumerationValue(self, *args)
    def getEnumerationAnnotation(self, *args): return _msparser.ms_xml_typeinfo_getEnumerationAnnotation(self, *args)
    def getNumberOfElements(self): return _msparser.ms_xml_typeinfo_getNumberOfElements(self)
    def getElementName(self, *args): return _msparser.ms_xml_typeinfo_getElementName(self, *args)
    def findElement(self, *args): return _msparser.ms_xml_typeinfo_findElement(self, *args)
    def getElementType(self, *args): return _msparser.ms_xml_typeinfo_getElementType(self, *args)
    def getElementAnnotation(self, *args): return _msparser.ms_xml_typeinfo_getElementAnnotation(self, *args)
    def getElementMinOccurs(self, *args): return _msparser.ms_xml_typeinfo_getElementMinOccurs(self, *args)
    def getElementMaxOccurs(self, *args): return _msparser.ms_xml_typeinfo_getElementMaxOccurs(self, *args)
    def getNumberOfAttributes(self): return _msparser.ms_xml_typeinfo_getNumberOfAttributes(self)
    def getAttributeName(self, *args): return _msparser.ms_xml_typeinfo_getAttributeName(self, *args)
    def findAttribute(self, *args): return _msparser.ms_xml_typeinfo_findAttribute(self, *args)
    def getAttributeType(self, *args): return _msparser.ms_xml_typeinfo_getAttributeType(self, *args)
    def getAttributeAnnotation(self, *args): return _msparser.ms_xml_typeinfo_getAttributeAnnotation(self, *args)
    def getAttributeUse(self, *args): return _msparser.ms_xml_typeinfo_getAttributeUse(self, *args)
    def hasAttributeDefault(self, *args): return _msparser.ms_xml_typeinfo_hasAttributeDefault(self, *args)
    def getAttributeDefault(self, *args): return _msparser.ms_xml_typeinfo_getAttributeDefault(self, *args)
ms_xml_typeinfo_swigregister = _msparser.ms_xml_typeinfo_swigregister
ms_xml_typeinfo_swigregister(ms_xml_typeinfo)

class ms_xml_schema(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_xml_schema, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_xml_schema, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_xml_schema(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_xml_schema
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_xml_schema_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_xml_schema_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_xml_schema_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_xml_schema_getFileName(self)
    def read_file(self): return _msparser.ms_xml_schema_read_file(self)
    def getNumberOfTypes(self): return _msparser.ms_xml_schema_getNumberOfTypes(self)
    def getTypeName(self, *args): return _msparser.ms_xml_schema_getTypeName(self, *args)
    def getTypeInfoByName(self, *args): return _msparser.ms_xml_schema_getTypeInfoByName(self, *args)
    def getTypeInfoByNumber(self, *args): return _msparser.ms_xml_schema_getTypeInfoByNumber(self, *args)
    def isCustomType(self, *args): return _msparser.ms_xml_schema_isCustomType(self, *args)
    def validateSimpleString(self, *args): return _msparser.ms_xml_schema_validateSimpleString(self, *args)
    def validateSimpleInteger(self, *args): return _msparser.ms_xml_schema_validateSimpleInteger(self, *args)
    def validateSimpleDouble(self, *args): return _msparser.ms_xml_schema_validateSimpleDouble(self, *args)
    def validateSimpleBool(self, *args): return _msparser.ms_xml_schema_validateSimpleBool(self, *args)
    def validateComplexObject(self, *args): return _msparser.ms_xml_schema_validateComplexObject(self, *args)
    __swig_setmethods__["_schemaFor"] = _msparser.ms_xml_schema__schemaFor_set
    __swig_getmethods__["_schemaFor"] = _msparser.ms_xml_schema__schemaFor_get
    if _newclass:_schemaFor = _swig_property(_msparser.ms_xml_schema__schemaFor_get, _msparser.ms_xml_schema__schemaFor_set)
ms_xml_schema_swigregister = _msparser.ms_xml_schema_swigregister
ms_xml_schema_swigregister(ms_xml_schema)

class ms_quant_moverz(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_moverz, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_moverz, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_moverz(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_moverz
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_moverz_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_moverz_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_moverz_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_moverz_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_moverz_validateDeep(self, *args)
    def haveMonoisotopic(self): return _msparser.ms_quant_moverz_haveMonoisotopic(self)
    def getMonoisotopic(self): return _msparser.ms_quant_moverz_getMonoisotopic(self)
    def setMonoisotopic(self, *args): return _msparser.ms_quant_moverz_setMonoisotopic(self, *args)
    def dropMonoisotopic(self): return _msparser.ms_quant_moverz_dropMonoisotopic(self)
    def getMonoisotopicSchemaType(self): return _msparser.ms_quant_moverz_getMonoisotopicSchemaType(self)
    def haveAverage(self): return _msparser.ms_quant_moverz_haveAverage(self)
    def getAverage(self): return _msparser.ms_quant_moverz_getAverage(self)
    def setAverage(self, *args): return _msparser.ms_quant_moverz_setAverage(self, *args)
    def dropAverage(self): return _msparser.ms_quant_moverz_dropAverage(self)
    def getAverageSchemaType(self): return _msparser.ms_quant_moverz_getAverageSchemaType(self)
ms_quant_moverz_swigregister = _msparser.ms_quant_moverz_swigregister
ms_quant_moverz_swigregister(ms_quant_moverz)

class ms_quant_correction(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_correction, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_correction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_correction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_correction
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_correction_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_correction_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_correction_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_correction_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_correction_validateDeep(self, *args)
    def haveShift(self): return _msparser.ms_quant_correction_haveShift(self)
    def getShift(self): return _msparser.ms_quant_correction_getShift(self)
    def setShift(self, *args): return _msparser.ms_quant_correction_setShift(self, *args)
    def dropShift(self): return _msparser.ms_quant_correction_dropShift(self)
    def getShiftSchemaType(self): return _msparser.ms_quant_correction_getShiftSchemaType(self)
    def haveType(self): return _msparser.ms_quant_correction_haveType(self)
    def getType(self): return _msparser.ms_quant_correction_getType(self)
    def setType(self, *args): return _msparser.ms_quant_correction_setType(self, *args)
    def dropType(self): return _msparser.ms_quant_correction_dropType(self)
    def getTypeSchemaType(self): return _msparser.ms_quant_correction_getTypeSchemaType(self)
    def haveElement(self): return _msparser.ms_quant_correction_haveElement(self)
    def getElement(self): return _msparser.ms_quant_correction_getElement(self)
    def setElement(self, *args): return _msparser.ms_quant_correction_setElement(self, *args)
    def dropElement(self): return _msparser.ms_quant_correction_dropElement(self)
    def getElementSchemaType(self): return _msparser.ms_quant_correction_getElementSchemaType(self)
    def getContent(self): return _msparser.ms_quant_correction_getContent(self)
    def setContent(self, *args): return _msparser.ms_quant_correction_setContent(self, *args)
    def getContentSchemaType(self): return _msparser.ms_quant_correction_getContentSchemaType(self)
ms_quant_correction_swigregister = _msparser.ms_quant_correction_swigregister
ms_quant_correction_swigregister(ms_quant_correction)

class ms_quant_isotope(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_isotope, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_isotope
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_isotope_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_isotope_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_isotope_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_isotope_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_isotope_validateDeep(self, *args)
    def haveOld(self): return _msparser.ms_quant_isotope_haveOld(self)
    def getOld(self): return _msparser.ms_quant_isotope_getOld(self)
    def setOld(self, *args): return _msparser.ms_quant_isotope_setOld(self, *args)
    def dropOld(self): return _msparser.ms_quant_isotope_dropOld(self)
    def getOldSchemaType(self): return _msparser.ms_quant_isotope_getOldSchemaType(self)
    def haveNew(self): return _msparser.ms_quant_isotope_haveNew(self)
    def getNew(self): return _msparser.ms_quant_isotope_getNew(self)
    def setNew(self, *args): return _msparser.ms_quant_isotope_setNew(self, *args)
    def dropNew(self): return _msparser.ms_quant_isotope_dropNew(self)
    def getNewSchemaType(self): return _msparser.ms_quant_isotope_getNewSchemaType(self)
ms_quant_isotope_swigregister = _msparser.ms_quant_isotope_swigregister
ms_quant_isotope_swigregister(ms_quant_isotope)

class ms_quant_component(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_component, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_component, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_component(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_component
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_component_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_component_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_component_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_component_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_component_validateDeep(self, *args)
    def haveMoverz(self): return _msparser.ms_quant_component_haveMoverz(self)
    def getMoverz(self): return _msparser.ms_quant_component_getMoverz(self)
    def setMoverz(self, *args): return _msparser.ms_quant_component_setMoverz(self, *args)
    def dropMoverz(self): return _msparser.ms_quant_component_dropMoverz(self)
    def getMoverzSchemaType(self): return _msparser.ms_quant_component_getMoverzSchemaType(self)
    def getNumberOfModificationGroups(self): return _msparser.ms_quant_component_getNumberOfModificationGroups(self)
    def clearModificationGroups(self): return _msparser.ms_quant_component_clearModificationGroups(self)
    def appendModificationGroup(self, *args): return _msparser.ms_quant_component_appendModificationGroup(self, *args)
    def getModificationGroupByNumber(self, *args): return _msparser.ms_quant_component_getModificationGroupByNumber(self, *args)
    def getModificationGroupByName(self, *args): return _msparser.ms_quant_component_getModificationGroupByName(self, *args)
    def updateModificationGroupByNumber(self, *args): return _msparser.ms_quant_component_updateModificationGroupByNumber(self, *args)
    def updateModificationGroupByName(self, *args): return _msparser.ms_quant_component_updateModificationGroupByName(self, *args)
    def deleteModificationGroupByNumber(self, *args): return _msparser.ms_quant_component_deleteModificationGroupByNumber(self, *args)
    def deleteModificationGroupByName(self, *args): return _msparser.ms_quant_component_deleteModificationGroupByName(self, *args)
    def getModificationGroupSchemaType(self): return _msparser.ms_quant_component_getModificationGroupSchemaType(self)
    def getNumberOfIsotopes(self): return _msparser.ms_quant_component_getNumberOfIsotopes(self)
    def clearIsotopes(self): return _msparser.ms_quant_component_clearIsotopes(self)
    def appendIsotope(self, *args): return _msparser.ms_quant_component_appendIsotope(self, *args)
    def getIsotope(self, *args): return _msparser.ms_quant_component_getIsotope(self, *args)
    def updateIsotope(self, *args): return _msparser.ms_quant_component_updateIsotope(self, *args)
    def deleteIsotope(self, *args): return _msparser.ms_quant_component_deleteIsotope(self, *args)
    def getIsotopeSchemaType(self): return _msparser.ms_quant_component_getIsotopeSchemaType(self)
    def haveFileIndex(self): return _msparser.ms_quant_component_haveFileIndex(self)
    def getFileIndex(self): return _msparser.ms_quant_component_getFileIndex(self)
    def setFileIndex(self, *args): return _msparser.ms_quant_component_setFileIndex(self, *args)
    def dropFileIndex(self): return _msparser.ms_quant_component_dropFileIndex(self)
    def getFileIndexSchemaType(self): return _msparser.ms_quant_component_getFileIndexSchemaType(self)
    def getNumberOfCorrections(self): return _msparser.ms_quant_component_getNumberOfCorrections(self)
    def clearCorrections(self): return _msparser.ms_quant_component_clearCorrections(self)
    def appendCorrection(self, *args): return _msparser.ms_quant_component_appendCorrection(self, *args)
    def getCorrection(self, *args): return _msparser.ms_quant_component_getCorrection(self, *args)
    def updateCorrection(self, *args): return _msparser.ms_quant_component_updateCorrection(self, *args)
    def deleteCorrection(self, *args): return _msparser.ms_quant_component_deleteCorrection(self, *args)
    def getCorrectionSchemaType(self): return _msparser.ms_quant_component_getCorrectionSchemaType(self)
    def haveName(self): return _msparser.ms_quant_component_haveName(self)
    def getName(self): return _msparser.ms_quant_component_getName(self)
    def setName(self, *args): return _msparser.ms_quant_component_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_component_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_component_getNameSchemaType(self)
    def haveSatellite(self): return _msparser.ms_quant_component_haveSatellite(self)
    def getSatellite(self): return _msparser.ms_quant_component_getSatellite(self)
    def setSatellite(self, *args): return _msparser.ms_quant_component_setSatellite(self, *args)
    def dropSatellite(self): return _msparser.ms_quant_component_dropSatellite(self)
    def getSatelliteSchemaType(self): return _msparser.ms_quant_component_getSatelliteSchemaType(self)
ms_quant_component_swigregister = _msparser.ms_quant_component_swigregister
ms_quant_component_swigregister(ms_quant_component)

class ms_quant_element(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_element, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_element, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_element
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_element_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_element_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_element_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_element_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_element_validateDeep(self, *args)
    def haveSymbol(self): return _msparser.ms_quant_element_haveSymbol(self)
    def getSymbol(self): return _msparser.ms_quant_element_getSymbol(self)
    def setSymbol(self, *args): return _msparser.ms_quant_element_setSymbol(self, *args)
    def dropSymbol(self): return _msparser.ms_quant_element_dropSymbol(self)
    def getSymbolSchemaType(self): return _msparser.ms_quant_element_getSymbolSchemaType(self)
    def haveNumber(self): return _msparser.ms_quant_element_haveNumber(self)
    def getNumber(self): return _msparser.ms_quant_element_getNumber(self)
    def setNumber(self, *args): return _msparser.ms_quant_element_setNumber(self, *args)
    def dropNumber(self): return _msparser.ms_quant_element_dropNumber(self)
    def getNumberSchemaType(self): return _msparser.ms_quant_element_getNumberSchemaType(self)
ms_quant_element_swigregister = _msparser.ms_quant_element_swigregister
ms_quant_element_swigregister(ms_quant_element)

class ms_quant_composition(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_composition, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_composition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_composition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_composition
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_composition_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_composition_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_composition_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_composition_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_composition_validateDeep(self, *args)
    def getNumberOfElements(self): return _msparser.ms_quant_composition_getNumberOfElements(self)
    def clearElements(self): return _msparser.ms_quant_composition_clearElements(self)
    def appendElement(self, *args): return _msparser.ms_quant_composition_appendElement(self, *args)
    def getElement(self, *args): return _msparser.ms_quant_composition_getElement(self, *args)
    def updateElement(self, *args): return _msparser.ms_quant_composition_updateElement(self, *args)
    def deleteElement(self, *args): return _msparser.ms_quant_composition_deleteElement(self, *args)
    def getElementSchemaType(self): return _msparser.ms_quant_composition_getElementSchemaType(self)
ms_quant_composition_swigregister = _msparser.ms_quant_composition_swigregister
ms_quant_composition_swigregister(ms_quant_composition)

class ms_quant_parameter(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_parameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_parameter
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_parameter_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_parameter_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_parameter_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_parameter_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_parameter_validateDeep(self, *args)
    def haveName(self): return _msparser.ms_quant_parameter_haveName(self)
    def getName(self): return _msparser.ms_quant_parameter_getName(self)
    def setName(self, *args): return _msparser.ms_quant_parameter_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_parameter_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_parameter_getNameSchemaType(self)
    def haveDescription(self): return _msparser.ms_quant_parameter_haveDescription(self)
    def getDescription(self): return _msparser.ms_quant_parameter_getDescription(self)
    def setDescription(self, *args): return _msparser.ms_quant_parameter_setDescription(self, *args)
    def dropDescription(self): return _msparser.ms_quant_parameter_dropDescription(self)
    def getDescriptionSchemaType(self): return _msparser.ms_quant_parameter_getDescriptionSchemaType(self)
    def getValue(self): return _msparser.ms_quant_parameter_getValue(self)
    def setValue(self, *args): return _msparser.ms_quant_parameter_setValue(self, *args)
    def getValueSchemaType(self): return _msparser.ms_quant_parameter_getValueSchemaType(self)
ms_quant_parameter_swigregister = _msparser.ms_quant_parameter_swigregister
ms_quant_parameter_swigregister(ms_quant_parameter)

class ms_quant_parameters(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_parameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_parameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_parameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_parameters
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_parameters_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_parameters_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_parameters_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_parameters_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_parameters_validateDeep(self, *args)
    def getNumberOfParameters(self): return _msparser.ms_quant_parameters_getNumberOfParameters(self)
    def clearParameters(self): return _msparser.ms_quant_parameters_clearParameters(self)
    def appendParameter(self, *args): return _msparser.ms_quant_parameters_appendParameter(self, *args)
    def getParameterByNumber(self, *args): return _msparser.ms_quant_parameters_getParameterByNumber(self, *args)
    def getParameterByName(self, *args): return _msparser.ms_quant_parameters_getParameterByName(self, *args)
    def updateParameterByNumber(self, *args): return _msparser.ms_quant_parameters_updateParameterByNumber(self, *args)
    def updateParameterByName(self, *args): return _msparser.ms_quant_parameters_updateParameterByName(self, *args)
    def deleteParameterByNumber(self, *args): return _msparser.ms_quant_parameters_deleteParameterByNumber(self, *args)
    def deleteParameterByName(self, *args): return _msparser.ms_quant_parameters_deleteParameterByName(self, *args)
    def getParameterSchemaType(self): return _msparser.ms_quant_parameters_getParameterSchemaType(self)
ms_quant_parameters_swigregister = _msparser.ms_quant_parameters_swigregister
ms_quant_parameters_swigregister(ms_quant_parameters)

class ms_quant_integration(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_integration, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_integration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_integration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_integration
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_integration_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_integration_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_integration_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_integration_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_integration_validateDeep(self, *args)
    def haveMethod(self): return _msparser.ms_quant_integration_haveMethod(self)
    def getMethod(self): return _msparser.ms_quant_integration_getMethod(self)
    def setMethod(self, *args): return _msparser.ms_quant_integration_setMethod(self, *args)
    def dropMethod(self): return _msparser.ms_quant_integration_dropMethod(self)
    def getMethodSchemaType(self): return _msparser.ms_quant_integration_getMethodSchemaType(self)
    def haveSource(self): return _msparser.ms_quant_integration_haveSource(self)
    def getSource(self): return _msparser.ms_quant_integration_getSource(self)
    def setSource(self, *args): return _msparser.ms_quant_integration_setSource(self, *args)
    def dropSource(self): return _msparser.ms_quant_integration_dropSource(self)
    def getSourceSchemaType(self): return _msparser.ms_quant_integration_getSourceSchemaType(self)
    def haveMassDelta(self): return _msparser.ms_quant_integration_haveMassDelta(self)
    def getMassDelta(self): return _msparser.ms_quant_integration_getMassDelta(self)
    def setMassDelta(self, *args): return _msparser.ms_quant_integration_setMassDelta(self, *args)
    def dropMassDelta(self): return _msparser.ms_quant_integration_dropMassDelta(self)
    def getMassDeltaSchemaType(self): return _msparser.ms_quant_integration_getMassDeltaSchemaType(self)
    def haveMassDeltaUnit(self): return _msparser.ms_quant_integration_haveMassDeltaUnit(self)
    def getMassDeltaUnit(self): return _msparser.ms_quant_integration_getMassDeltaUnit(self)
    def setMassDeltaUnit(self, *args): return _msparser.ms_quant_integration_setMassDeltaUnit(self, *args)
    def dropMassDeltaUnit(self): return _msparser.ms_quant_integration_dropMassDeltaUnit(self)
    def getMassDeltaUnitSchemaType(self): return _msparser.ms_quant_integration_getMassDeltaUnitSchemaType(self)
    def haveElutionTimeDelta(self): return _msparser.ms_quant_integration_haveElutionTimeDelta(self)
    def getElutionTimeDelta(self): return _msparser.ms_quant_integration_getElutionTimeDelta(self)
    def setElutionTimeDelta(self, *args): return _msparser.ms_quant_integration_setElutionTimeDelta(self, *args)
    def dropElutionTimeDelta(self): return _msparser.ms_quant_integration_dropElutionTimeDelta(self)
    def getElutionTimeDeltaSchemaType(self): return _msparser.ms_quant_integration_getElutionTimeDeltaSchemaType(self)
    def haveElutionTimeDeltaUnit(self): return _msparser.ms_quant_integration_haveElutionTimeDeltaUnit(self)
    def getElutionTimeDeltaUnit(self): return _msparser.ms_quant_integration_getElutionTimeDeltaUnit(self)
    def setElutionTimeDeltaUnit(self, *args): return _msparser.ms_quant_integration_setElutionTimeDeltaUnit(self, *args)
    def dropElutionTimeDeltaUnit(self): return _msparser.ms_quant_integration_dropElutionTimeDeltaUnit(self)
    def getElutionTimeDeltaUnitSchemaType(self): return _msparser.ms_quant_integration_getElutionTimeDeltaUnitSchemaType(self)
    def haveElutionProfileCorrelationThreshold(self): return _msparser.ms_quant_integration_haveElutionProfileCorrelationThreshold(self)
    def getElutionProfileCorrelationThreshold(self): return _msparser.ms_quant_integration_getElutionProfileCorrelationThreshold(self)
    def setElutionProfileCorrelationThreshold(self, *args): return _msparser.ms_quant_integration_setElutionProfileCorrelationThreshold(self, *args)
    def dropElutionProfileCorrelationThreshold(self): return _msparser.ms_quant_integration_dropElutionProfileCorrelationThreshold(self)
    def getElutionProfileCorrelationThresholdSchemaType(self): return _msparser.ms_quant_integration_getElutionProfileCorrelationThresholdSchemaType(self)
    def haveProcessingOptions(self): return _msparser.ms_quant_integration_haveProcessingOptions(self)
    def getProcessingOptions(self): return _msparser.ms_quant_integration_getProcessingOptions(self)
    def setProcessingOptions(self, *args): return _msparser.ms_quant_integration_setProcessingOptions(self, *args)
    def dropProcessingOptions(self): return _msparser.ms_quant_integration_dropProcessingOptions(self)
    def getProcessingOptionsSchemaType(self): return _msparser.ms_quant_integration_getProcessingOptionsSchemaType(self)
    def havePrecursorRange(self): return _msparser.ms_quant_integration_havePrecursorRange(self)
    def getPrecursorRange(self): return _msparser.ms_quant_integration_getPrecursorRange(self)
    def setPrecursorRange(self, *args): return _msparser.ms_quant_integration_setPrecursorRange(self, *args)
    def dropPrecursorRange(self): return _msparser.ms_quant_integration_dropPrecursorRange(self)
    def getPrecursorRangeSchemaType(self): return _msparser.ms_quant_integration_getPrecursorRangeSchemaType(self)
    def haveMatchedRho(self): return _msparser.ms_quant_integration_haveMatchedRho(self)
    def getMatchedRho(self): return _msparser.ms_quant_integration_getMatchedRho(self)
    def setMatchedRho(self, *args): return _msparser.ms_quant_integration_setMatchedRho(self, *args)
    def dropMatchedRho(self): return _msparser.ms_quant_integration_dropMatchedRho(self)
    def getMatchedRhoSchemaType(self): return _msparser.ms_quant_integration_getMatchedRhoSchemaType(self)
    def haveXicThreshold(self): return _msparser.ms_quant_integration_haveXicThreshold(self)
    def getXicThreshold(self): return _msparser.ms_quant_integration_getXicThreshold(self)
    def setXicThreshold(self, *args): return _msparser.ms_quant_integration_setXicThreshold(self, *args)
    def dropXicThreshold(self): return _msparser.ms_quant_integration_dropXicThreshold(self)
    def getXicThresholdSchemaType(self): return _msparser.ms_quant_integration_getXicThresholdSchemaType(self)
    def haveXicMaxWidth(self): return _msparser.ms_quant_integration_haveXicMaxWidth(self)
    def getXicMaxWidth(self): return _msparser.ms_quant_integration_getXicMaxWidth(self)
    def setXicMaxWidth(self, *args): return _msparser.ms_quant_integration_setXicMaxWidth(self, *args)
    def dropXicMaxWidth(self): return _msparser.ms_quant_integration_dropXicMaxWidth(self)
    def getXicMaxWidthSchemaType(self): return _msparser.ms_quant_integration_getXicMaxWidthSchemaType(self)
    def haveXicSmoothing(self): return _msparser.ms_quant_integration_haveXicSmoothing(self)
    def getXicSmoothing(self): return _msparser.ms_quant_integration_getXicSmoothing(self)
    def setXicSmoothing(self, *args): return _msparser.ms_quant_integration_setXicSmoothing(self, *args)
    def dropXicSmoothing(self): return _msparser.ms_quant_integration_dropXicSmoothing(self)
    def getXicSmoothingSchemaType(self): return _msparser.ms_quant_integration_getXicSmoothingSchemaType(self)
    def haveAllChargeStates(self): return _msparser.ms_quant_integration_haveAllChargeStates(self)
    def isAllChargeStates(self): return _msparser.ms_quant_integration_isAllChargeStates(self)
    def setAllChargeStates(self, *args): return _msparser.ms_quant_integration_setAllChargeStates(self, *args)
    def dropAllChargeStates(self): return _msparser.ms_quant_integration_dropAllChargeStates(self)
    def getAllChargeStatesSchemaType(self): return _msparser.ms_quant_integration_getAllChargeStatesSchemaType(self)
    def haveSimpleRatio(self): return _msparser.ms_quant_integration_haveSimpleRatio(self)
    def isSimpleRatio(self): return _msparser.ms_quant_integration_isSimpleRatio(self)
    def setSimpleRatio(self, *args): return _msparser.ms_quant_integration_setSimpleRatio(self, *args)
    def dropSimpleRatio(self): return _msparser.ms_quant_integration_dropSimpleRatio(self)
    def getSimpleRatioSchemaType(self): return _msparser.ms_quant_integration_getSimpleRatioSchemaType(self)
    def haveAllChargeStatesThreshold(self): return _msparser.ms_quant_integration_haveAllChargeStatesThreshold(self)
    def getAllChargeStatesThreshold(self): return _msparser.ms_quant_integration_getAllChargeStatesThreshold(self)
    def setAllChargeStatesThreshold(self, *args): return _msparser.ms_quant_integration_setAllChargeStatesThreshold(self, *args)
    def dropAllChargeStatesThreshold(self): return _msparser.ms_quant_integration_dropAllChargeStatesThreshold(self)
    def getAllChargeStatesThresholdSchemaType(self): return _msparser.ms_quant_integration_getAllChargeStatesThresholdSchemaType(self)
    def haveAllowElutionShift(self): return _msparser.ms_quant_integration_haveAllowElutionShift(self)
    def isAllowElutionShift(self): return _msparser.ms_quant_integration_isAllowElutionShift(self)
    def setAllowElutionShift(self, *args): return _msparser.ms_quant_integration_setAllowElutionShift(self, *args)
    def dropAllowElutionShift(self): return _msparser.ms_quant_integration_dropAllowElutionShift(self)
    def getAllowElutionShiftSchemaType(self): return _msparser.ms_quant_integration_getAllowElutionShiftSchemaType(self)
ms_quant_integration_swigregister = _msparser.ms_quant_integration_swigregister
ms_quant_integration_swigregister(ms_quant_integration)

class ms_quant_neutralloss(ms_quant_composition):
    __swig_setmethods__ = {}
    for _s in [ms_quant_composition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_neutralloss, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_composition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_neutralloss, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_neutralloss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_neutralloss
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_neutralloss_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_neutralloss_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_neutralloss_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_neutralloss_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_neutralloss_validateDeep(self, *args)
    def haveFlag(self): return _msparser.ms_quant_neutralloss_haveFlag(self)
    def isFlag(self): return _msparser.ms_quant_neutralloss_isFlag(self)
    def setFlag(self, *args): return _msparser.ms_quant_neutralloss_setFlag(self, *args)
    def dropFlag(self): return _msparser.ms_quant_neutralloss_dropFlag(self)
    def getFlagSchemaType(self): return _msparser.ms_quant_neutralloss_getFlagSchemaType(self)
ms_quant_neutralloss_swigregister = _msparser.ms_quant_neutralloss_swigregister
ms_quant_neutralloss_swigregister(ms_quant_neutralloss)

class ms_quant_specificity(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_specificity, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_specificity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_specificity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_specificity
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_specificity_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_specificity_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_specificity_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_specificity_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_specificity_validateDeep(self, *args)
    def getNumberOfNeutralLosses(self): return _msparser.ms_quant_specificity_getNumberOfNeutralLosses(self)
    def clearNeutralLosses(self): return _msparser.ms_quant_specificity_clearNeutralLosses(self)
    def appendNeutralLoss(self, *args): return _msparser.ms_quant_specificity_appendNeutralLoss(self, *args)
    def getNeutralLoss(self, *args): return _msparser.ms_quant_specificity_getNeutralLoss(self, *args)
    def updateNeutralLoss(self, *args): return _msparser.ms_quant_specificity_updateNeutralLoss(self, *args)
    def deleteNeutralLoss(self, *args): return _msparser.ms_quant_specificity_deleteNeutralLoss(self, *args)
    def getNeutralLossSchemaType(self): return _msparser.ms_quant_specificity_getNeutralLossSchemaType(self)
    def getNumberOfPepNeutralLosses(self): return _msparser.ms_quant_specificity_getNumberOfPepNeutralLosses(self)
    def clearPepNeutralLosses(self): return _msparser.ms_quant_specificity_clearPepNeutralLosses(self)
    def appendPepNeutralLoss(self, *args): return _msparser.ms_quant_specificity_appendPepNeutralLoss(self, *args)
    def getPepNeutralLoss(self, *args): return _msparser.ms_quant_specificity_getPepNeutralLoss(self, *args)
    def updatePepNeutralLoss(self, *args): return _msparser.ms_quant_specificity_updatePepNeutralLoss(self, *args)
    def deletePepNeutralLoss(self, *args): return _msparser.ms_quant_specificity_deletePepNeutralLoss(self, *args)
    def getPepNeutralLossSchemaType(self): return _msparser.ms_quant_specificity_getPepNeutralLossSchemaType(self)
    def haveSite(self): return _msparser.ms_quant_specificity_haveSite(self)
    def getSite(self): return _msparser.ms_quant_specificity_getSite(self)
    def setSite(self, *args): return _msparser.ms_quant_specificity_setSite(self, *args)
    def dropSite(self): return _msparser.ms_quant_specificity_dropSite(self)
    def getSiteSchemaType(self): return _msparser.ms_quant_specificity_getSiteSchemaType(self)
    def havePosition(self): return _msparser.ms_quant_specificity_havePosition(self)
    def getPosition(self): return _msparser.ms_quant_specificity_getPosition(self)
    def setPosition(self, *args): return _msparser.ms_quant_specificity_setPosition(self, *args)
    def dropPosition(self): return _msparser.ms_quant_specificity_dropPosition(self)
    def getPositionSchemaType(self): return _msparser.ms_quant_specificity_getPositionSchemaType(self)
ms_quant_specificity_swigregister = _msparser.ms_quant_specificity_swigregister
ms_quant_specificity_swigregister(ms_quant_specificity)

class ms_quant_pepneutralloss(ms_quant_composition):
    __swig_setmethods__ = {}
    for _s in [ms_quant_composition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_pepneutralloss, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_composition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_pepneutralloss, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_pepneutralloss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_pepneutralloss
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_pepneutralloss_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_pepneutralloss_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_pepneutralloss_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_pepneutralloss_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_pepneutralloss_validateDeep(self, *args)
    def haveRequired(self): return _msparser.ms_quant_pepneutralloss_haveRequired(self)
    def isRequired(self): return _msparser.ms_quant_pepneutralloss_isRequired(self)
    def setRequired(self, *args): return _msparser.ms_quant_pepneutralloss_setRequired(self, *args)
    def dropRequired(self): return _msparser.ms_quant_pepneutralloss_dropRequired(self)
    def getRequiredSchemaType(self): return _msparser.ms_quant_pepneutralloss_getRequiredSchemaType(self)
ms_quant_pepneutralloss_swigregister = _msparser.ms_quant_pepneutralloss_swigregister
ms_quant_pepneutralloss_swigregister(ms_quant_pepneutralloss)

class ms_quant_localdef(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_localdef, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_localdef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_localdef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_localdef
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_localdef_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_localdef_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_localdef_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_localdef_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_localdef_validateDeep(self, *args)
    def getNumberOfSpecificities(self): return _msparser.ms_quant_localdef_getNumberOfSpecificities(self)
    def clearSpecificities(self): return _msparser.ms_quant_localdef_clearSpecificities(self)
    def appendSpecificity(self, *args): return _msparser.ms_quant_localdef_appendSpecificity(self, *args)
    def getSpecificity(self, *args): return _msparser.ms_quant_localdef_getSpecificity(self, *args)
    def updateSpecificity(self, *args): return _msparser.ms_quant_localdef_updateSpecificity(self, *args)
    def deleteSpecificity(self, *args): return _msparser.ms_quant_localdef_deleteSpecificity(self, *args)
    def getSpecificitySchemaType(self): return _msparser.ms_quant_localdef_getSpecificitySchemaType(self)
    def haveDelta(self): return _msparser.ms_quant_localdef_haveDelta(self)
    def getDelta(self): return _msparser.ms_quant_localdef_getDelta(self)
    def setDelta(self, *args): return _msparser.ms_quant_localdef_setDelta(self, *args)
    def dropDelta(self): return _msparser.ms_quant_localdef_dropDelta(self)
    def getDeltaSchemaType(self): return _msparser.ms_quant_localdef_getDeltaSchemaType(self)
    def getNumberOfIgnores(self): return _msparser.ms_quant_localdef_getNumberOfIgnores(self)
    def clearIgnores(self): return _msparser.ms_quant_localdef_clearIgnores(self)
    def appendIgnore(self, *args): return _msparser.ms_quant_localdef_appendIgnore(self, *args)
    def getIgnore(self, *args): return _msparser.ms_quant_localdef_getIgnore(self, *args)
    def updateIgnore(self, *args): return _msparser.ms_quant_localdef_updateIgnore(self, *args)
    def deleteIgnore(self, *args): return _msparser.ms_quant_localdef_deleteIgnore(self, *args)
    def getIgnoreSchemaType(self): return _msparser.ms_quant_localdef_getIgnoreSchemaType(self)
    def haveTitle(self): return _msparser.ms_quant_localdef_haveTitle(self)
    def getTitle(self): return _msparser.ms_quant_localdef_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_quant_localdef_setTitle(self, *args)
    def dropTitle(self): return _msparser.ms_quant_localdef_dropTitle(self)
    def getTitleSchemaType(self): return _msparser.ms_quant_localdef_getTitleSchemaType(self)
ms_quant_localdef_swigregister = _msparser.ms_quant_localdef_swigregister
ms_quant_localdef_swigregister(ms_quant_localdef)

class ms_quant_unmodified(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_unmodified, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_unmodified, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_unmodified(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_unmodified
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_unmodified_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_unmodified_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_unmodified_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_unmodified_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_unmodified_validateDeep(self, *args)
    def getContent(self): return _msparser.ms_quant_unmodified_getContent(self)
    def setContent(self, *args): return _msparser.ms_quant_unmodified_setContent(self, *args)
    def getContentSchemaType(self): return _msparser.ms_quant_unmodified_getContentSchemaType(self)
    def haveSite(self): return _msparser.ms_quant_unmodified_haveSite(self)
    def getSite(self): return _msparser.ms_quant_unmodified_getSite(self)
    def setSite(self, *args): return _msparser.ms_quant_unmodified_setSite(self, *args)
    def dropSite(self): return _msparser.ms_quant_unmodified_dropSite(self)
    def getSiteSchemaType(self): return _msparser.ms_quant_unmodified_getSiteSchemaType(self)
    def havePosition(self): return _msparser.ms_quant_unmodified_havePosition(self)
    def getPosition(self): return _msparser.ms_quant_unmodified_getPosition(self)
    def setPosition(self, *args): return _msparser.ms_quant_unmodified_setPosition(self, *args)
    def dropPosition(self): return _msparser.ms_quant_unmodified_dropPosition(self)
    def getPositionSchemaType(self): return _msparser.ms_quant_unmodified_getPositionSchemaType(self)
ms_quant_unmodified_swigregister = _msparser.ms_quant_unmodified_swigregister
ms_quant_unmodified_swigregister(ms_quant_unmodified)

class ms_quant_modgroup(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_modgroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_modgroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_modgroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_modgroup
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_modgroup_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_modgroup_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_modgroup_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_modgroup_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_modgroup_validateDeep(self, *args)
    def getNumberOfModFiles(self): return _msparser.ms_quant_modgroup_getNumberOfModFiles(self)
    def clearModFiles(self): return _msparser.ms_quant_modgroup_clearModFiles(self)
    def appendModFile(self, *args): return _msparser.ms_quant_modgroup_appendModFile(self, *args)
    def findModFile(self, *args): return _msparser.ms_quant_modgroup_findModFile(self, *args)
    def getModFile(self, *args): return _msparser.ms_quant_modgroup_getModFile(self, *args)
    def deleteModFile(self, *args): return _msparser.ms_quant_modgroup_deleteModFile(self, *args)
    def getModFileSchemaType(self): return _msparser.ms_quant_modgroup_getModFileSchemaType(self)
    def getNumberOfUnmodified(self): return _msparser.ms_quant_modgroup_getNumberOfUnmodified(self)
    def clearUnmodified(self): return _msparser.ms_quant_modgroup_clearUnmodified(self)
    def appendUnmodified(self, *args): return _msparser.ms_quant_modgroup_appendUnmodified(self, *args)
    def getUnmodified(self, *args): return _msparser.ms_quant_modgroup_getUnmodified(self, *args)
    def updateUnmodified(self, *args): return _msparser.ms_quant_modgroup_updateUnmodified(self, *args)
    def deleteUnmodified(self, *args): return _msparser.ms_quant_modgroup_deleteUnmodified(self, *args)
    def getUnmodifiedSchemaType(self): return _msparser.ms_quant_modgroup_getUnmodifiedSchemaType(self)
    def getNumberOfLocalDefinitions(self): return _msparser.ms_quant_modgroup_getNumberOfLocalDefinitions(self)
    def clearLocalDefinitions(self): return _msparser.ms_quant_modgroup_clearLocalDefinitions(self)
    def appendLocalDefinition(self, *args): return _msparser.ms_quant_modgroup_appendLocalDefinition(self, *args)
    def getLocalDefinition(self, *args): return _msparser.ms_quant_modgroup_getLocalDefinition(self, *args)
    def updateLocalDefinition(self, *args): return _msparser.ms_quant_modgroup_updateLocalDefinition(self, *args)
    def deleteLocalDefinition(self, *args): return _msparser.ms_quant_modgroup_deleteLocalDefinition(self, *args)
    def getLocalDefinitionSchemaType(self): return _msparser.ms_quant_modgroup_getLocalDefinitionSchemaType(self)
    def haveName(self): return _msparser.ms_quant_modgroup_haveName(self)
    def getName(self): return _msparser.ms_quant_modgroup_getName(self)
    def setName(self, *args): return _msparser.ms_quant_modgroup_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_modgroup_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_modgroup_getNameSchemaType(self)
    def haveMode(self): return _msparser.ms_quant_modgroup_haveMode(self)
    def getMode(self): return _msparser.ms_quant_modgroup_getMode(self)
    def setMode(self, *args): return _msparser.ms_quant_modgroup_setMode(self, *args)
    def dropMode(self): return _msparser.ms_quant_modgroup_dropMode(self)
    def getModeSchemaType(self): return _msparser.ms_quant_modgroup_getModeSchemaType(self)
    def haveRequired(self): return _msparser.ms_quant_modgroup_haveRequired(self)
    def isRequired(self): return _msparser.ms_quant_modgroup_isRequired(self)
    def setRequired(self, *args): return _msparser.ms_quant_modgroup_setRequired(self, *args)
    def dropRequired(self): return _msparser.ms_quant_modgroup_dropRequired(self)
    def getRequiredSchemaType(self): return _msparser.ms_quant_modgroup_getRequiredSchemaType(self)
ms_quant_modgroup_swigregister = _msparser.ms_quant_modgroup_swigregister
ms_quant_modgroup_swigregister(ms_quant_modgroup)

class ms_quant_quality(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_quality, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_quality, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_quality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_quality
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_quality_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_quality_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_quality_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_quality_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_quality_validateDeep(self, *args)
    def haveMinPrecursorCharge(self): return _msparser.ms_quant_quality_haveMinPrecursorCharge(self)
    def getMinPrecursorCharge(self): return _msparser.ms_quant_quality_getMinPrecursorCharge(self)
    def setMinPrecursorCharge(self, *args): return _msparser.ms_quant_quality_setMinPrecursorCharge(self, *args)
    def dropMinPrecursorCharge(self): return _msparser.ms_quant_quality_dropMinPrecursorCharge(self)
    def getMinPrecursorChargeSchemaType(self): return _msparser.ms_quant_quality_getMinPrecursorChargeSchemaType(self)
    def haveIsolatedPrecursor(self): return _msparser.ms_quant_quality_haveIsolatedPrecursor(self)
    def isIsolatedPrecursor(self): return _msparser.ms_quant_quality_isIsolatedPrecursor(self)
    def setIsolatedPrecursor(self, *args): return _msparser.ms_quant_quality_setIsolatedPrecursor(self, *args)
    def dropIsolatedPrecursor(self): return _msparser.ms_quant_quality_dropIsolatedPrecursor(self)
    def getIsolatedPrecursorSchemaType(self): return _msparser.ms_quant_quality_getIsolatedPrecursorSchemaType(self)
    def haveMinimumA1(self): return _msparser.ms_quant_quality_haveMinimumA1(self)
    def getMinimumA1(self): return _msparser.ms_quant_quality_getMinimumA1(self)
    def setMinimumA1(self, *args): return _msparser.ms_quant_quality_setMinimumA1(self, *args)
    def dropMinimumA1(self): return _msparser.ms_quant_quality_dropMinimumA1(self)
    def getMinimumA1SchemaType(self): return _msparser.ms_quant_quality_getMinimumA1SchemaType(self)
    def havePepThresholdType(self): return _msparser.ms_quant_quality_havePepThresholdType(self)
    def getPepThresholdType(self): return _msparser.ms_quant_quality_getPepThresholdType(self)
    def setPepThresholdType(self, *args): return _msparser.ms_quant_quality_setPepThresholdType(self, *args)
    def dropPepThresholdType(self): return _msparser.ms_quant_quality_dropPepThresholdType(self)
    def getPepThresholdTypeSchemaType(self): return _msparser.ms_quant_quality_getPepThresholdTypeSchemaType(self)
    def havePepThresholdValue(self): return _msparser.ms_quant_quality_havePepThresholdValue(self)
    def getPepThresholdValue(self): return _msparser.ms_quant_quality_getPepThresholdValue(self)
    def setPepThresholdValue(self, *args): return _msparser.ms_quant_quality_setPepThresholdValue(self, *args)
    def dropPepThresholdValue(self): return _msparser.ms_quant_quality_dropPepThresholdValue(self)
    def getPepThresholdValueSchemaType(self): return _msparser.ms_quant_quality_getPepThresholdValueSchemaType(self)
    def haveUniquePepseq(self): return _msparser.ms_quant_quality_haveUniquePepseq(self)
    def isUniquePepseq(self): return _msparser.ms_quant_quality_isUniquePepseq(self)
    def setUniquePepseq(self, *args): return _msparser.ms_quant_quality_setUniquePepseq(self, *args)
    def dropUniquePepseq(self): return _msparser.ms_quant_quality_dropUniquePepseq(self)
    def getUniquePepseqSchemaType(self): return _msparser.ms_quant_quality_getUniquePepseqSchemaType(self)
    def haveIsolatedPrecursorThreshold(self): return _msparser.ms_quant_quality_haveIsolatedPrecursorThreshold(self)
    def getIsolatedPrecursorThreshold(self): return _msparser.ms_quant_quality_getIsolatedPrecursorThreshold(self)
    def setIsolatedPrecursorThreshold(self, *args): return _msparser.ms_quant_quality_setIsolatedPrecursorThreshold(self, *args)
    def dropIsolatedPrecursorThreshold(self): return _msparser.ms_quant_quality_dropIsolatedPrecursorThreshold(self)
    def getIsolatedPrecursorThresholdSchemaType(self): return _msparser.ms_quant_quality_getIsolatedPrecursorThresholdSchemaType(self)
ms_quant_quality_swigregister = _msparser.ms_quant_quality_swigregister
ms_quant_quality_swigregister(ms_quant_quality)

class ms_quant_outliers(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_outliers, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_outliers, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_outliers(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_outliers
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_outliers_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_outliers_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_outliers_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_outliers_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_outliers_validateDeep(self, *args)
    def haveMethod(self): return _msparser.ms_quant_outliers_haveMethod(self)
    def getMethod(self): return _msparser.ms_quant_outliers_getMethod(self)
    def setMethod(self, *args): return _msparser.ms_quant_outliers_setMethod(self, *args)
    def dropMethod(self): return _msparser.ms_quant_outliers_dropMethod(self)
    def getMethodSchemaType(self): return _msparser.ms_quant_outliers_getMethodSchemaType(self)
ms_quant_outliers_swigregister = _msparser.ms_quant_outliers_swigregister
ms_quant_outliers_swigregister(ms_quant_outliers)

class ms_quant_normalisation(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_normalisation, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_normalisation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_normalisation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_normalisation
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_normalisation_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_normalisation_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_normalisation_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_normalisation_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_normalisation_validateDeep(self, *args)
    def haveMethod(self): return _msparser.ms_quant_normalisation_haveMethod(self)
    def getMethod(self): return _msparser.ms_quant_normalisation_getMethod(self)
    def setMethod(self, *args): return _msparser.ms_quant_normalisation_setMethod(self, *args)
    def dropMethod(self): return _msparser.ms_quant_normalisation_dropMethod(self)
    def getMethodSchemaType(self): return _msparser.ms_quant_normalisation_getMethodSchemaType(self)
    def havePeptides(self): return _msparser.ms_quant_normalisation_havePeptides(self)
    def getPeptides(self): return _msparser.ms_quant_normalisation_getPeptides(self)
    def setPeptides(self, *args): return _msparser.ms_quant_normalisation_setPeptides(self, *args)
    def dropPeptides(self): return _msparser.ms_quant_normalisation_dropPeptides(self)
    def getPeptidesSchemaType(self): return _msparser.ms_quant_normalisation_getPeptidesSchemaType(self)
    def haveProteins(self): return _msparser.ms_quant_normalisation_haveProteins(self)
    def getProteins(self): return _msparser.ms_quant_normalisation_getProteins(self)
    def setProteins(self, *args): return _msparser.ms_quant_normalisation_setProteins(self, *args)
    def dropProteins(self): return _msparser.ms_quant_normalisation_dropProteins(self)
    def getProteinsSchemaType(self): return _msparser.ms_quant_normalisation_getProteinsSchemaType(self)
ms_quant_normalisation_swigregister = _msparser.ms_quant_normalisation_swigregister
ms_quant_normalisation_swigregister(ms_quant_normalisation)

class ms_quant_precursor(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_precursor, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_precursor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_precursor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_precursor
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_precursor_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_precursor_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_precursor_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_precursor_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_precursor_validateDeep(self, *args)
    def haveAllowMassTimeMatch(self): return _msparser.ms_quant_precursor_haveAllowMassTimeMatch(self)
    def isAllowMassTimeMatch(self): return _msparser.ms_quant_precursor_isAllowMassTimeMatch(self)
    def setAllowMassTimeMatch(self, *args): return _msparser.ms_quant_precursor_setAllowMassTimeMatch(self, *args)
    def dropAllowMassTimeMatch(self): return _msparser.ms_quant_precursor_dropAllowMassTimeMatch(self)
    def getAllowMassTimeMatchSchemaType(self): return _msparser.ms_quant_precursor_getAllowMassTimeMatchSchemaType(self)
    def haveAllowElutionShift(self): return _msparser.ms_quant_precursor_haveAllowElutionShift(self)
    def isAllowElutionShift(self): return _msparser.ms_quant_precursor_isAllowElutionShift(self)
    def dropAllowElutionShift(self): return _msparser.ms_quant_precursor_dropAllowElutionShift(self)
    def getAllowElutionShiftSchemaType(self): return _msparser.ms_quant_precursor_getAllowElutionShiftSchemaType(self)
    def haveAllChargeStates(self): return _msparser.ms_quant_precursor_haveAllChargeStates(self)
    def isAllChargeStates(self): return _msparser.ms_quant_precursor_isAllChargeStates(self)
    def dropAllChargeStates(self): return _msparser.ms_quant_precursor_dropAllChargeStates(self)
    def getAllChargeStatesSchemaType(self): return _msparser.ms_quant_precursor_getAllChargeStatesSchemaType(self)
ms_quant_precursor_swigregister = _msparser.ms_quant_precursor_swigregister
ms_quant_precursor_swigregister(ms_quant_precursor)

class ms_quant_average(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_average, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_average, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_average(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_average
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_average_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_average_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_average_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_average_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_average_validateDeep(self, *args)
    def haveNumPeptides(self): return _msparser.ms_quant_average_haveNumPeptides(self)
    def getNumPeptides(self): return _msparser.ms_quant_average_getNumPeptides(self)
    def setNumPeptides(self, *args): return _msparser.ms_quant_average_setNumPeptides(self, *args)
    def dropNumPeptides(self): return _msparser.ms_quant_average_dropNumPeptides(self)
    def getNumPeptidesSchemaType(self): return _msparser.ms_quant_average_getNumPeptidesSchemaType(self)
    def haveSelection(self): return _msparser.ms_quant_average_haveSelection(self)
    def getSelection(self): return _msparser.ms_quant_average_getSelection(self)
    def setSelection(self, *args): return _msparser.ms_quant_average_setSelection(self, *args)
    def dropSelection(self): return _msparser.ms_quant_average_dropSelection(self)
    def getSelectionSchemaType(self): return _msparser.ms_quant_average_getSelectionSchemaType(self)
    def haveReferenceAccession(self): return _msparser.ms_quant_average_haveReferenceAccession(self)
    def getReferenceAccession(self): return _msparser.ms_quant_average_getReferenceAccession(self)
    def setReferenceAccession(self, *args): return _msparser.ms_quant_average_setReferenceAccession(self, *args)
    def dropReferenceAccession(self): return _msparser.ms_quant_average_dropReferenceAccession(self)
    def getReferenceAccessionSchemaType(self): return _msparser.ms_quant_average_getReferenceAccessionSchemaType(self)
    def haveReferenceAmount(self): return _msparser.ms_quant_average_haveReferenceAmount(self)
    def getReferenceAmount(self): return _msparser.ms_quant_average_getReferenceAmount(self)
    def setReferenceAmount(self, *args): return _msparser.ms_quant_average_setReferenceAmount(self, *args)
    def dropReferenceAmount(self): return _msparser.ms_quant_average_dropReferenceAmount(self)
    def getReferenceAmountSchemaType(self): return _msparser.ms_quant_average_getReferenceAmountSchemaType(self)
ms_quant_average_swigregister = _msparser.ms_quant_average_swigregister
ms_quant_average_swigregister(ms_quant_average)

class ms_quant_multiplex(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_multiplex, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_multiplex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_multiplex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_multiplex
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_multiplex_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_multiplex_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_multiplex_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_multiplex_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_multiplex_validateDeep(self, *args)
    def haveIonSeries(self): return _msparser.ms_quant_multiplex_haveIonSeries(self)
    def setIonSeries(self, *args): return _msparser.ms_quant_multiplex_setIonSeries(self, *args)
    def dropIonSeries(self): return _msparser.ms_quant_multiplex_dropIonSeries(self)
    def getIonSeriesSchemaType(self): return _msparser.ms_quant_multiplex_getIonSeriesSchemaType(self)
    def getNumberOfIonSeries(self): return _msparser.ms_quant_multiplex_getNumberOfIonSeries(self)
    def clearIonSeries(self): return _msparser.ms_quant_multiplex_clearIonSeries(self)
    def appendIonSeries(self, *args): return _msparser.ms_quant_multiplex_appendIonSeries(self, *args)
    def getIonSeries(self, idx = 0): return _msparser.ms_quant_multiplex_getIonSeries(self, idx)
    def updateIonSeries(self, *args): return _msparser.ms_quant_multiplex_updateIonSeries(self, *args)
    def deleteIonSeries(self, *args): return _msparser.ms_quant_multiplex_deleteIonSeries(self, *args)
    def haveExcludeInternalLabel(self): return _msparser.ms_quant_multiplex_haveExcludeInternalLabel(self)
    def isExcludeInternalLabel(self): return _msparser.ms_quant_multiplex_isExcludeInternalLabel(self)
    def setExcludeInternalLabel(self, *args): return _msparser.ms_quant_multiplex_setExcludeInternalLabel(self, *args)
    def dropExcludeInternalLabel(self): return _msparser.ms_quant_multiplex_dropExcludeInternalLabel(self)
    def getExcludeInternalLabelSchemaType(self): return _msparser.ms_quant_multiplex_getExcludeInternalLabelSchemaType(self)
    def haveIonIntensityThreshold(self): return _msparser.ms_quant_multiplex_haveIonIntensityThreshold(self)
    def getIonIntensityThreshold(self): return _msparser.ms_quant_multiplex_getIonIntensityThreshold(self)
    def setIonIntensityThreshold(self, *args): return _msparser.ms_quant_multiplex_setIonIntensityThreshold(self, *args)
    def dropIonIntensityThreshold(self): return _msparser.ms_quant_multiplex_dropIonIntensityThreshold(self)
    def getIonIntensityThresholdSchemaType(self): return _msparser.ms_quant_multiplex_getIonIntensityThresholdSchemaType(self)
    def haveExcludeIsobaricFragments(self): return _msparser.ms_quant_multiplex_haveExcludeIsobaricFragments(self)
    def isExcludeIsobaricFragments(self): return _msparser.ms_quant_multiplex_isExcludeIsobaricFragments(self)
    def setExcludeIsobaricFragments(self, *args): return _msparser.ms_quant_multiplex_setExcludeIsobaricFragments(self, *args)
    def dropExcludeIsobaricFragments(self): return _msparser.ms_quant_multiplex_dropExcludeIsobaricFragments(self)
    def getExcludeIsobaricFragmentsSchemaType(self): return _msparser.ms_quant_multiplex_getExcludeIsobaricFragmentsSchemaType(self)
    def haveMinIonPairs(self): return _msparser.ms_quant_multiplex_haveMinIonPairs(self)
    def getMinIonPairs(self): return _msparser.ms_quant_multiplex_getMinIonPairs(self)
    def setMinIonPairs(self, *args): return _msparser.ms_quant_multiplex_setMinIonPairs(self, *args)
    def dropMinIonPairs(self): return _msparser.ms_quant_multiplex_dropMinIonPairs(self)
    def getMinIonPairsSchemaType(self): return _msparser.ms_quant_multiplex_getMinIonPairsSchemaType(self)
ms_quant_multiplex_swigregister = _msparser.ms_quant_multiplex_swigregister
ms_quant_multiplex_swigregister(ms_quant_multiplex)

class ms_quant_reporter(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_reporter, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_reporter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_reporter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_reporter
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_reporter_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_reporter_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_reporter_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_reporter_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_reporter_validateDeep(self, *args)
    def haveReporterTol(self): return _msparser.ms_quant_reporter_haveReporterTol(self)
    def getReporterTol(self): return _msparser.ms_quant_reporter_getReporterTol(self)
    def setReporterTol(self, *args): return _msparser.ms_quant_reporter_setReporterTol(self, *args)
    def dropReporterTol(self): return _msparser.ms_quant_reporter_dropReporterTol(self)
    def getReporterTolSchemaType(self): return _msparser.ms_quant_reporter_getReporterTolSchemaType(self)
    def haveReporterTolUnit(self): return _msparser.ms_quant_reporter_haveReporterTolUnit(self)
    def getReporterTolUnit(self): return _msparser.ms_quant_reporter_getReporterTolUnit(self)
    def setReporterTolUnit(self, *args): return _msparser.ms_quant_reporter_setReporterTolUnit(self, *args)
    def dropReporterTolUnit(self): return _msparser.ms_quant_reporter_dropReporterTolUnit(self)
    def getReporterTolUnitSchemaType(self): return _msparser.ms_quant_reporter_getReporterTolUnitSchemaType(self)
ms_quant_reporter_swigregister = _msparser.ms_quant_reporter_swigregister
ms_quant_reporter_swigregister(ms_quant_reporter)

class ms_quant_replicate(ms_quant_parameters):
    __swig_setmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_replicate, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quant_parameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_replicate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_replicate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_replicate
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_replicate_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_replicate_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_replicate_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_replicate_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_replicate_validateDeep(self, *args)
ms_quant_replicate_swigregister = _msparser.ms_quant_replicate_swigregister
ms_quant_replicate_swigregister(ms_quant_replicate)

class ms_quant_protocol(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_protocol, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_protocol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_protocol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_protocol
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_protocol_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_protocol_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_protocol_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_protocol_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_protocol_validateDeep(self, *args)
    def getType(self): return _msparser.ms_quant_protocol_getType(self)
    def setNull(self): return _msparser.ms_quant_protocol_setNull(self)
    def getReporter(self): return _msparser.ms_quant_protocol_getReporter(self)
    def setReporter(self, *args): return _msparser.ms_quant_protocol_setReporter(self, *args)
    def getReporterSchemaType(self): return _msparser.ms_quant_protocol_getReporterSchemaType(self)
    def getPrecursor(self): return _msparser.ms_quant_protocol_getPrecursor(self)
    def setPrecursor(self, *args): return _msparser.ms_quant_protocol_setPrecursor(self, *args)
    def getPrecursorSchemaType(self): return _msparser.ms_quant_protocol_getPrecursorSchemaType(self)
    def getMultiplex(self): return _msparser.ms_quant_protocol_getMultiplex(self)
    def setMultiplex(self, *args): return _msparser.ms_quant_protocol_setMultiplex(self, *args)
    def getMultiplexSchemaType(self): return _msparser.ms_quant_protocol_getMultiplexSchemaType(self)
    def getReplicate(self): return _msparser.ms_quant_protocol_getReplicate(self)
    def setReplicate(self, *args): return _msparser.ms_quant_protocol_setReplicate(self, *args)
    def getReplicateSchemaType(self): return _msparser.ms_quant_protocol_getReplicateSchemaType(self)
    def getAverage(self): return _msparser.ms_quant_protocol_getAverage(self)
    def setAverage(self, *args): return _msparser.ms_quant_protocol_setAverage(self, *args)
    def getAverageSchemaType(self): return _msparser.ms_quant_protocol_getAverageSchemaType(self)
ms_quant_protocol_swigregister = _msparser.ms_quant_protocol_swigregister
ms_quant_protocol_swigregister(ms_quant_protocol)

class ms_quant_numerator(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_numerator, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_numerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_numerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_numerator
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_numerator_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_numerator_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_numerator_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_numerator_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_numerator_validateDeep(self, *args)
    def haveName(self): return _msparser.ms_quant_numerator_haveName(self)
    def getName(self): return _msparser.ms_quant_numerator_getName(self)
    def setName(self, *args): return _msparser.ms_quant_numerator_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_numerator_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_numerator_getNameSchemaType(self)
    def haveCoefficient(self): return _msparser.ms_quant_numerator_haveCoefficient(self)
    def getCoefficient(self): return _msparser.ms_quant_numerator_getCoefficient(self)
    def setCoefficient(self, *args): return _msparser.ms_quant_numerator_setCoefficient(self, *args)
    def dropCoefficient(self): return _msparser.ms_quant_numerator_dropCoefficient(self)
    def getCoefficientSchemaType(self): return _msparser.ms_quant_numerator_getCoefficientSchemaType(self)
    def getContent(self): return _msparser.ms_quant_numerator_getContent(self)
    def setContent(self, *args): return _msparser.ms_quant_numerator_setContent(self, *args)
    def getContentSchemaType(self): return _msparser.ms_quant_numerator_getContentSchemaType(self)
ms_quant_numerator_swigregister = _msparser.ms_quant_numerator_swigregister
ms_quant_numerator_swigregister(ms_quant_numerator)

class ms_quant_ratio(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_ratio, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_ratio, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_ratio(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_ratio
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_ratio_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_ratio_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_ratio_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_ratio_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_ratio_validateDeep(self, *args)
    def getNumberOfNumerators(self): return _msparser.ms_quant_ratio_getNumberOfNumerators(self)
    def clearNumerators(self): return _msparser.ms_quant_ratio_clearNumerators(self)
    def appendNumerator(self, *args): return _msparser.ms_quant_ratio_appendNumerator(self, *args)
    def getNumeratorByNumber(self, *args): return _msparser.ms_quant_ratio_getNumeratorByNumber(self, *args)
    def getNumeratorByName(self, *args): return _msparser.ms_quant_ratio_getNumeratorByName(self, *args)
    def updateNumeratorByNumber(self, *args): return _msparser.ms_quant_ratio_updateNumeratorByNumber(self, *args)
    def updateNumeratorByName(self, *args): return _msparser.ms_quant_ratio_updateNumeratorByName(self, *args)
    def deleteNumeratorByNumber(self, *args): return _msparser.ms_quant_ratio_deleteNumeratorByNumber(self, *args)
    def deleteNumeratorByName(self, *args): return _msparser.ms_quant_ratio_deleteNumeratorByName(self, *args)
    def getNumeratorSchemaType(self): return _msparser.ms_quant_ratio_getNumeratorSchemaType(self)
    def getNumberOfDenominators(self): return _msparser.ms_quant_ratio_getNumberOfDenominators(self)
    def clearDenominators(self): return _msparser.ms_quant_ratio_clearDenominators(self)
    def appendDenominator(self, *args): return _msparser.ms_quant_ratio_appendDenominator(self, *args)
    def getDenominatorByNumber(self, *args): return _msparser.ms_quant_ratio_getDenominatorByNumber(self, *args)
    def getDenominatorByName(self, *args): return _msparser.ms_quant_ratio_getDenominatorByName(self, *args)
    def updateDenominatorByNumber(self, *args): return _msparser.ms_quant_ratio_updateDenominatorByNumber(self, *args)
    def updateDenominatorByName(self, *args): return _msparser.ms_quant_ratio_updateDenominatorByName(self, *args)
    def deleteDenominatorByNumber(self, *args): return _msparser.ms_quant_ratio_deleteDenominatorByNumber(self, *args)
    def deleteDenominatorByName(self, *args): return _msparser.ms_quant_ratio_deleteDenominatorByName(self, *args)
    def getDenominatorSchemaType(self): return _msparser.ms_quant_ratio_getDenominatorSchemaType(self)
    def haveName(self): return _msparser.ms_quant_ratio_haveName(self)
    def getName(self): return _msparser.ms_quant_ratio_getName(self)
    def setName(self, *args): return _msparser.ms_quant_ratio_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_ratio_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_ratio_getNameSchemaType(self)
ms_quant_ratio_swigregister = _msparser.ms_quant_ratio_swigregister
ms_quant_ratio_swigregister(ms_quant_ratio)

class ms_quant_method(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_method, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_method, name)
    __repr__ = _swig_repr
    COMPATIBLE = _msparser.ms_quant_method_COMPATIBLE
    COMPATIBLE_DIFF_PROTOCOL = _msparser.ms_quant_method_COMPATIBLE_DIFF_PROTOCOL
    COMPATIBLE_DIFF_NUM_COMPONENTS = _msparser.ms_quant_method_COMPATIBLE_DIFF_NUM_COMPONENTS
    COMPATIBLE_MISSING_COMPONENT = _msparser.ms_quant_method_COMPATIBLE_MISSING_COMPONENT
    COMPATIBLE_DIFF_NUM_MOD_GROUPS = _msparser.ms_quant_method_COMPATIBLE_DIFF_NUM_MOD_GROUPS
    COMPATIBLE_MISSING_MOD_GROUP = _msparser.ms_quant_method_COMPATIBLE_MISSING_MOD_GROUP
    COMPATIBLE_DIFF_NUM_LOCAL_MODS = _msparser.ms_quant_method_COMPATIBLE_DIFF_NUM_LOCAL_MODS
    COMPATIBLE_DIFF_LOCAL_MOD = _msparser.ms_quant_method_COMPATIBLE_DIFF_LOCAL_MOD
    COMPATIBLE_DIFF_NUM_MODS = _msparser.ms_quant_method_COMPATIBLE_DIFF_NUM_MODS
    COMPATIBLE_MISSING_MOD = _msparser.ms_quant_method_COMPATIBLE_MISSING_MOD
    COMPATIBLE_MISSING_INTEGRATION = _msparser.ms_quant_method_COMPATIBLE_MISSING_INTEGRATION
    COMPATIBLE_MISSING_INTEGRATION_PARAM = _msparser.ms_quant_method_COMPATIBLE_MISSING_INTEGRATION_PARAM
    COMPATIBLE_DIFF_INTEGRATION_PARAM = _msparser.ms_quant_method_COMPATIBLE_DIFF_INTEGRATION_PARAM
    COMPATIBLE_DIFF_NUM_ISOTOPES = _msparser.ms_quant_method_COMPATIBLE_DIFF_NUM_ISOTOPES
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_method(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_method
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_method_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_method_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_method_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_method_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_method_validateDeep(self, *args)
    def getNumberOfModificationGroups(self): return _msparser.ms_quant_method_getNumberOfModificationGroups(self)
    def clearModificationGroups(self): return _msparser.ms_quant_method_clearModificationGroups(self)
    def appendModificationGroup(self, *args): return _msparser.ms_quant_method_appendModificationGroup(self, *args)
    def getModificationGroupByNumber(self, *args): return _msparser.ms_quant_method_getModificationGroupByNumber(self, *args)
    def getModificationGroupByName(self, *args): return _msparser.ms_quant_method_getModificationGroupByName(self, *args)
    def updateModificationGroupByNumber(self, *args): return _msparser.ms_quant_method_updateModificationGroupByNumber(self, *args)
    def updateModificationGroupByName(self, *args): return _msparser.ms_quant_method_updateModificationGroupByName(self, *args)
    def deleteModificationGroupByNumber(self, *args): return _msparser.ms_quant_method_deleteModificationGroupByNumber(self, *args)
    def deleteModificationGroupByName(self, *args): return _msparser.ms_quant_method_deleteModificationGroupByName(self, *args)
    def getModificationGroupSchemaType(self): return _msparser.ms_quant_method_getModificationGroupSchemaType(self)
    def getNumberOfComponents(self): return _msparser.ms_quant_method_getNumberOfComponents(self)
    def clearComponents(self): return _msparser.ms_quant_method_clearComponents(self)
    def appendComponent(self, *args): return _msparser.ms_quant_method_appendComponent(self, *args)
    def getComponentByNumber(self, *args): return _msparser.ms_quant_method_getComponentByNumber(self, *args)
    def getComponentByName(self, *args): return _msparser.ms_quant_method_getComponentByName(self, *args)
    def updateComponentByNumber(self, *args): return _msparser.ms_quant_method_updateComponentByNumber(self, *args)
    def updateComponentByName(self, *args): return _msparser.ms_quant_method_updateComponentByName(self, *args)
    def deleteComponentByNumber(self, *args): return _msparser.ms_quant_method_deleteComponentByNumber(self, *args)
    def deleteComponentByName(self, *args): return _msparser.ms_quant_method_deleteComponentByName(self, *args)
    def getComponentSchemaType(self): return _msparser.ms_quant_method_getComponentSchemaType(self)
    def getNumberOfReportRatios(self): return _msparser.ms_quant_method_getNumberOfReportRatios(self)
    def clearReportRatios(self): return _msparser.ms_quant_method_clearReportRatios(self)
    def appendReportRatio(self, *args): return _msparser.ms_quant_method_appendReportRatio(self, *args)
    def getReportRatioByNumber(self, *args): return _msparser.ms_quant_method_getReportRatioByNumber(self, *args)
    def getReportRatioByName(self, *args): return _msparser.ms_quant_method_getReportRatioByName(self, *args)
    def updateReportRatioByNumber(self, *args): return _msparser.ms_quant_method_updateReportRatioByNumber(self, *args)
    def updateReportRatioByName(self, *args): return _msparser.ms_quant_method_updateReportRatioByName(self, *args)
    def deleteReportRatioByNumber(self, *args): return _msparser.ms_quant_method_deleteReportRatioByNumber(self, *args)
    def deleteReportRatioByName(self, *args): return _msparser.ms_quant_method_deleteReportRatioByName(self, *args)
    def getReportRatioSchemaType(self): return _msparser.ms_quant_method_getReportRatioSchemaType(self)
    def getNumberOfExclusions(self): return _msparser.ms_quant_method_getNumberOfExclusions(self)
    def clearExclusions(self): return _msparser.ms_quant_method_clearExclusions(self)
    def appendExclusion(self, *args): return _msparser.ms_quant_method_appendExclusion(self, *args)
    def getExclusion(self, *args): return _msparser.ms_quant_method_getExclusion(self, *args)
    def updateExclusion(self, *args): return _msparser.ms_quant_method_updateExclusion(self, *args)
    def deleteExclusion(self, *args): return _msparser.ms_quant_method_deleteExclusion(self, *args)
    def getExclusionSchemaType(self): return _msparser.ms_quant_method_getExclusionSchemaType(self)
    def getNumberOfSeqs(self): return _msparser.ms_quant_method_getNumberOfSeqs(self)
    def clearSeqs(self): return _msparser.ms_quant_method_clearSeqs(self)
    def appendSeq(self, *args): return _msparser.ms_quant_method_appendSeq(self, *args)
    def getSeq(self, *args): return _msparser.ms_quant_method_getSeq(self, *args)
    def updateSeq(self, *args): return _msparser.ms_quant_method_updateSeq(self, *args)
    def deleteSeq(self, *args): return _msparser.ms_quant_method_deleteSeq(self, *args)
    def getSeqSchemaType(self): return _msparser.ms_quant_method_getSeqSchemaType(self)
    def haveComp(self): return _msparser.ms_quant_method_haveComp(self)
    def getComp(self): return _msparser.ms_quant_method_getComp(self)
    def setComp(self, *args): return _msparser.ms_quant_method_setComp(self, *args)
    def dropComp(self): return _msparser.ms_quant_method_dropComp(self)
    def getCompSchemaType(self): return _msparser.ms_quant_method_getCompSchemaType(self)
    def haveQuality(self): return _msparser.ms_quant_method_haveQuality(self)
    def getQuality(self): return _msparser.ms_quant_method_getQuality(self)
    def setQuality(self, *args): return _msparser.ms_quant_method_setQuality(self, *args)
    def dropQuality(self): return _msparser.ms_quant_method_dropQuality(self)
    def getQualitySchemaType(self): return _msparser.ms_quant_method_getQualitySchemaType(self)
    def haveIntegration(self): return _msparser.ms_quant_method_haveIntegration(self)
    def getIntegration(self): return _msparser.ms_quant_method_getIntegration(self)
    def setIntegration(self, *args): return _msparser.ms_quant_method_setIntegration(self, *args)
    def dropIntegration(self): return _msparser.ms_quant_method_dropIntegration(self)
    def getIntegrationSchemaType(self): return _msparser.ms_quant_method_getIntegrationSchemaType(self)
    def haveOutliers(self): return _msparser.ms_quant_method_haveOutliers(self)
    def getOutliers(self): return _msparser.ms_quant_method_getOutliers(self)
    def setOutliers(self, *args): return _msparser.ms_quant_method_setOutliers(self, *args)
    def dropOutliers(self): return _msparser.ms_quant_method_dropOutliers(self)
    def getOutliersSchemaType(self): return _msparser.ms_quant_method_getOutliersSchemaType(self)
    def haveNormalisation(self): return _msparser.ms_quant_method_haveNormalisation(self)
    def getNormalisation(self): return _msparser.ms_quant_method_getNormalisation(self)
    def setNormalisation(self, *args): return _msparser.ms_quant_method_setNormalisation(self, *args)
    def dropNormalisation(self): return _msparser.ms_quant_method_dropNormalisation(self)
    def getNormalisationSchemaType(self): return _msparser.ms_quant_method_getNormalisationSchemaType(self)
    def haveProtocol(self): return _msparser.ms_quant_method_haveProtocol(self)
    def getProtocol(self): return _msparser.ms_quant_method_getProtocol(self)
    def setProtocol(self, *args): return _msparser.ms_quant_method_setProtocol(self, *args)
    def dropProtocol(self): return _msparser.ms_quant_method_dropProtocol(self)
    def getProtocolSchemaType(self): return _msparser.ms_quant_method_getProtocolSchemaType(self)
    def haveName(self): return _msparser.ms_quant_method_haveName(self)
    def getName(self): return _msparser.ms_quant_method_getName(self)
    def setName(self, *args): return _msparser.ms_quant_method_setName(self, *args)
    def dropName(self): return _msparser.ms_quant_method_dropName(self)
    def getNameSchemaType(self): return _msparser.ms_quant_method_getNameSchemaType(self)
    def haveDescription(self): return _msparser.ms_quant_method_haveDescription(self)
    def getDescription(self): return _msparser.ms_quant_method_getDescription(self)
    def setDescription(self, *args): return _msparser.ms_quant_method_setDescription(self, *args)
    def dropDescription(self): return _msparser.ms_quant_method_dropDescription(self)
    def getDescriptionSchemaType(self): return _msparser.ms_quant_method_getDescriptionSchemaType(self)
    def haveConstrainSearch(self): return _msparser.ms_quant_method_haveConstrainSearch(self)
    def isConstrainSearch(self): return _msparser.ms_quant_method_isConstrainSearch(self)
    def setConstrainSearch(self, *args): return _msparser.ms_quant_method_setConstrainSearch(self, *args)
    def dropConstrainSearch(self): return _msparser.ms_quant_method_dropConstrainSearch(self)
    def getConstrainSearchSchemaType(self): return _msparser.ms_quant_method_getConstrainSearchSchemaType(self)
    def haveProteinRatioType(self): return _msparser.ms_quant_method_haveProteinRatioType(self)
    def getProteinRatioType(self): return _msparser.ms_quant_method_getProteinRatioType(self)
    def setProteinRatioType(self, *args): return _msparser.ms_quant_method_setProteinRatioType(self, *args)
    def dropProteinRatioType(self): return _msparser.ms_quant_method_dropProteinRatioType(self)
    def getProteinRatioTypeSchemaType(self): return _msparser.ms_quant_method_getProteinRatioTypeSchemaType(self)
    def haveReportDetail(self): return _msparser.ms_quant_method_haveReportDetail(self)
    def isReportDetail(self): return _msparser.ms_quant_method_isReportDetail(self)
    def setReportDetail(self, *args): return _msparser.ms_quant_method_setReportDetail(self, *args)
    def dropReportDetail(self): return _msparser.ms_quant_method_dropReportDetail(self)
    def getReportDetailSchemaType(self): return _msparser.ms_quant_method_getReportDetailSchemaType(self)
    def haveMinNumPeptides(self): return _msparser.ms_quant_method_haveMinNumPeptides(self)
    def getMinNumPeptides(self): return _msparser.ms_quant_method_getMinNumPeptides(self)
    def setMinNumPeptides(self, *args): return _msparser.ms_quant_method_setMinNumPeptides(self, *args)
    def dropMinNumPeptides(self): return _msparser.ms_quant_method_dropMinNumPeptides(self)
    def getMinNumPeptidesSchemaType(self): return _msparser.ms_quant_method_getMinNumPeptidesSchemaType(self)
    def haveProtScoreType(self): return _msparser.ms_quant_method_haveProtScoreType(self)
    def getProtScoreType(self): return _msparser.ms_quant_method_getProtScoreType(self)
    def setProtScoreType(self, *args): return _msparser.ms_quant_method_setProtScoreType(self, *args)
    def dropProtScoreType(self): return _msparser.ms_quant_method_dropProtScoreType(self)
    def getProtScoreTypeSchemaType(self): return _msparser.ms_quant_method_getProtScoreTypeSchemaType(self)
    def haveSigThresholdValue(self): return _msparser.ms_quant_method_haveSigThresholdValue(self)
    def getSigThresholdValue(self): return _msparser.ms_quant_method_getSigThresholdValue(self)
    def setSigThresholdValue(self, *args): return _msparser.ms_quant_method_setSigThresholdValue(self, *args)
    def dropSigThresholdValue(self): return _msparser.ms_quant_method_dropSigThresholdValue(self)
    def getSigThresholdValueSchemaType(self): return _msparser.ms_quant_method_getSigThresholdValueSchemaType(self)
    def haveShowSubSets(self): return _msparser.ms_quant_method_haveShowSubSets(self)
    def getShowSubSets(self): return _msparser.ms_quant_method_getShowSubSets(self)
    def setShowSubSets(self, *args): return _msparser.ms_quant_method_setShowSubSets(self, *args)
    def dropShowSubSets(self): return _msparser.ms_quant_method_dropShowSubSets(self)
    def getShowSubSetsSchemaType(self): return _msparser.ms_quant_method_getShowSubSetsSchemaType(self)
    def haveRequireBoldRed(self): return _msparser.ms_quant_method_haveRequireBoldRed(self)
    def isRequireBoldRed(self): return _msparser.ms_quant_method_isRequireBoldRed(self)
    def setRequireBoldRed(self, *args): return _msparser.ms_quant_method_setRequireBoldRed(self, *args)
    def dropRequireBoldRed(self): return _msparser.ms_quant_method_dropRequireBoldRed(self)
    def getRequireBoldRedSchemaType(self): return _msparser.ms_quant_method_getRequireBoldRedSchemaType(self)
    def isMethodCompatible(self, *args): return _msparser.ms_quant_method_isMethodCompatible(self, *args)
ms_quant_method_swigregister = _msparser.ms_quant_method_swigregister
ms_quant_method_swigregister(ms_quant_method)

class ms_quant_configfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_configfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_configfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_configfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_configfile
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_configfile_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_configfile_copyFrom(self, *args)
    def setFileName(self, *args): return _msparser.ms_quant_configfile_setFileName(self, *args)
    def getFileName(self): return _msparser.ms_quant_configfile_getFileName(self)
    def setSchemaFileName(self, *args): return _msparser.ms_quant_configfile_setSchemaFileName(self, *args)
    def getSchemaFileName(self): return _msparser.ms_quant_configfile_getSchemaFileName(self)
    def setSchemaDirectory(self, *args): return _msparser.ms_quant_configfile_setSchemaDirectory(self, *args)
    def getSchemaDirectory(self): return _msparser.ms_quant_configfile_getSchemaDirectory(self)
    def setConnectionSettings(self, *args): return _msparser.ms_quant_configfile_setConnectionSettings(self, *args)
    def getConnectionSettings(self): return _msparser.ms_quant_configfile_getConnectionSettings(self)
    def read_file(self): return _msparser.ms_quant_configfile_read_file(self)
    def save_file(self): return _msparser.ms_quant_configfile_save_file(self)
    def read_buffer(self, *args): return _msparser.ms_quant_configfile_read_buffer(self, *args)
    def save_buffer(self): return _msparser.ms_quant_configfile_save_buffer(self)
    def validateDocument(self): return _msparser.ms_quant_configfile_validateDocument(self)
    def getNumberOfMethods(self): return _msparser.ms_quant_configfile_getNumberOfMethods(self)
    def clearMethods(self): return _msparser.ms_quant_configfile_clearMethods(self)
    def appendMethod(self, *args): return _msparser.ms_quant_configfile_appendMethod(self, *args)
    def getMethodByNumber(self, *args): return _msparser.ms_quant_configfile_getMethodByNumber(self, *args)
    def getMethodByName(self, *args): return _msparser.ms_quant_configfile_getMethodByName(self, *args)
    def updateMethodByNumber(self, *args): return _msparser.ms_quant_configfile_updateMethodByNumber(self, *args)
    def updateMethodByName(self, *args): return _msparser.ms_quant_configfile_updateMethodByName(self, *args)
    def deleteMethodByNumber(self, *args): return _msparser.ms_quant_configfile_deleteMethodByNumber(self, *args)
    def deleteMethodByName(self, *args): return _msparser.ms_quant_configfile_deleteMethodByName(self, *args)
    def getMajorVersion(self): return _msparser.ms_quant_configfile_getMajorVersion(self)
    def getMinorVersion(self): return _msparser.ms_quant_configfile_getMinorVersion(self)
ms_quant_configfile_swigregister = _msparser.ms_quant_configfile_swigregister
ms_quant_configfile_swigregister(ms_quant_configfile)

class ms_quant_satellite(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_satellite, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_satellite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_satellite(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_satellite
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_satellite_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_satellite_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_satellite_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_satellite_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_satellite_validateDeep(self, *args)
    def haveModifications(self): return _msparser.ms_quant_satellite_haveModifications(self)
    def getModifications(self): return _msparser.ms_quant_satellite_getModifications(self)
    def setModifications(self, *args): return _msparser.ms_quant_satellite_setModifications(self, *args)
    def dropModifications(self): return _msparser.ms_quant_satellite_dropModifications(self)
    def getModificationsSchemaType(self): return _msparser.ms_quant_satellite_getModificationsSchemaType(self)
ms_quant_satellite_swigregister = _msparser.ms_quant_satellite_swigregister
ms_quant_satellite_swigregister(ms_quant_satellite)

class ms_quant_normalisation_peptide(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_normalisation_peptide, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_normalisation_peptide, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_normalisation_peptide(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_normalisation_peptide
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_normalisation_peptide_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_normalisation_peptide_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_normalisation_peptide_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_normalisation_peptide_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_normalisation_peptide_validateDeep(self, *args)
    def haveSequence(self): return _msparser.ms_quant_normalisation_peptide_haveSequence(self)
    def getSequence(self): return _msparser.ms_quant_normalisation_peptide_getSequence(self)
    def setSequence(self, *args): return _msparser.ms_quant_normalisation_peptide_setSequence(self, *args)
    def dropSequence(self): return _msparser.ms_quant_normalisation_peptide_dropSequence(self)
    def getSequenceSchemaType(self): return _msparser.ms_quant_normalisation_peptide_getSequenceSchemaType(self)
ms_quant_normalisation_peptide_swigregister = _msparser.ms_quant_normalisation_peptide_swigregister
ms_quant_normalisation_peptide_swigregister(ms_quant_normalisation_peptide)

class ms_quant_normalisation_peptides(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_normalisation_peptides, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_normalisation_peptides, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_normalisation_peptides(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_normalisation_peptides
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_normalisation_peptides_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_normalisation_peptides_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_normalisation_peptides_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_normalisation_peptides_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_normalisation_peptides_validateDeep(self, *args)
    def getNumberOfPeptides(self): return _msparser.ms_quant_normalisation_peptides_getNumberOfPeptides(self)
    def clearPeptides(self): return _msparser.ms_quant_normalisation_peptides_clearPeptides(self)
    def appendPeptide(self, *args): return _msparser.ms_quant_normalisation_peptides_appendPeptide(self, *args)
    def getPeptide(self, *args): return _msparser.ms_quant_normalisation_peptides_getPeptide(self, *args)
    def updatePeptide(self, *args): return _msparser.ms_quant_normalisation_peptides_updatePeptide(self, *args)
    def deletePeptide(self, *args): return _msparser.ms_quant_normalisation_peptides_deletePeptide(self, *args)
    def getPeptideSchemaType(self): return _msparser.ms_quant_normalisation_peptides_getPeptideSchemaType(self)
ms_quant_normalisation_peptides_swigregister = _msparser.ms_quant_normalisation_peptides_swigregister
ms_quant_normalisation_peptides_swigregister(ms_quant_normalisation_peptides)

class ms_quant_normalisation_protein(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_normalisation_protein, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_normalisation_protein, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_normalisation_protein(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_normalisation_protein
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_normalisation_protein_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_normalisation_protein_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_normalisation_protein_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_normalisation_protein_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_normalisation_protein_validateDeep(self, *args)
    def haveAccession(self): return _msparser.ms_quant_normalisation_protein_haveAccession(self)
    def getAccession(self): return _msparser.ms_quant_normalisation_protein_getAccession(self)
    def setAccession(self, *args): return _msparser.ms_quant_normalisation_protein_setAccession(self, *args)
    def dropAccession(self): return _msparser.ms_quant_normalisation_protein_dropAccession(self)
    def getAccessionSchemaType(self): return _msparser.ms_quant_normalisation_protein_getAccessionSchemaType(self)
ms_quant_normalisation_protein_swigregister = _msparser.ms_quant_normalisation_protein_swigregister
ms_quant_normalisation_protein_swigregister(ms_quant_normalisation_protein)

class ms_quant_normalisation_proteins(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_normalisation_proteins, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_normalisation_proteins, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_normalisation_proteins(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_normalisation_proteins
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_quant_normalisation_proteins_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_quant_normalisation_proteins_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_quant_normalisation_proteins_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_quant_normalisation_proteins_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_quant_normalisation_proteins_validateDeep(self, *args)
    def getNumberOfProteins(self): return _msparser.ms_quant_normalisation_proteins_getNumberOfProteins(self)
    def clearProteins(self): return _msparser.ms_quant_normalisation_proteins_clearProteins(self)
    def appendProtein(self, *args): return _msparser.ms_quant_normalisation_proteins_appendProtein(self, *args)
    def getProtein(self, *args): return _msparser.ms_quant_normalisation_proteins_getProtein(self, *args)
    def updateProtein(self, *args): return _msparser.ms_quant_normalisation_proteins_updateProtein(self, *args)
    def deleteProtein(self, *args): return _msparser.ms_quant_normalisation_proteins_deleteProtein(self, *args)
    def getProteinSchemaType(self): return _msparser.ms_quant_normalisation_proteins_getProteinSchemaType(self)
ms_quant_normalisation_proteins_swigregister = _msparser.ms_quant_normalisation_proteins_swigregister
ms_quant_normalisation_proteins_swigregister(ms_quant_normalisation_proteins)

class ms_quant_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_stats, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["detectOutliers"] = lambda x: _msparser.ms_quant_stats_detectOutliers
    if _newclass:detectOutliers = staticmethod(_msparser.ms_quant_stats_detectOutliers)
    __swig_getmethods__["testRosners"] = lambda x: _msparser.ms_quant_stats_testRosners
    if _newclass:testRosners = staticmethod(_msparser.ms_quant_stats_testRosners)
    __swig_getmethods__["testDixonsN9"] = lambda x: _msparser.ms_quant_stats_testDixonsN9
    if _newclass:testDixonsN9 = staticmethod(_msparser.ms_quant_stats_testDixonsN9)
    __swig_getmethods__["testGrubbsN2"] = lambda x: _msparser.ms_quant_stats_testGrubbsN2
    if _newclass:testGrubbsN2 = staticmethod(_msparser.ms_quant_stats_testGrubbsN2)
    __swig_getmethods__["testShapiroWilkW"] = lambda x: _msparser.ms_quant_stats_testShapiroWilkW
    if _newclass:testShapiroWilkW = staticmethod(_msparser.ms_quant_stats_testShapiroWilkW)
    __swig_getmethods__["binomialCoefficient"] = lambda x: _msparser.ms_quant_stats_binomialCoefficient
    if _newclass:binomialCoefficient = staticmethod(_msparser.ms_quant_stats_binomialCoefficient)
    __swig_getmethods__["sum"] = lambda x: _msparser.ms_quant_stats_sum
    if _newclass:sum = staticmethod(_msparser.ms_quant_stats_sum)
    __swig_getmethods__["sumsq"] = lambda x: _msparser.ms_quant_stats_sumsq
    if _newclass:sumsq = staticmethod(_msparser.ms_quant_stats_sumsq)
    __swig_getmethods__["meanCentre"] = lambda x: _msparser.ms_quant_stats_meanCentre
    if _newclass:meanCentre = staticmethod(_msparser.ms_quant_stats_meanCentre)
    __swig_getmethods__["logTransform"] = lambda x: _msparser.ms_quant_stats_logTransform
    if _newclass:logTransform = staticmethod(_msparser.ms_quant_stats_logTransform)
    __swig_getmethods__["expTransform"] = lambda x: _msparser.ms_quant_stats_expTransform
    if _newclass:expTransform = staticmethod(_msparser.ms_quant_stats_expTransform)
    __swig_getmethods__["sortedMedian"] = lambda x: _msparser.ms_quant_stats_sortedMedian
    if _newclass:sortedMedian = staticmethod(_msparser.ms_quant_stats_sortedMedian)
    __swig_getmethods__["unsortedMedian"] = lambda x: _msparser.ms_quant_stats_unsortedMedian
    if _newclass:unsortedMedian = staticmethod(_msparser.ms_quant_stats_unsortedMedian)
    __swig_getmethods__["arithmeticMean"] = lambda x: _msparser.ms_quant_stats_arithmeticMean
    if _newclass:arithmeticMean = staticmethod(_msparser.ms_quant_stats_arithmeticMean)
    __swig_getmethods__["weightedArithmeticMean"] = lambda x: _msparser.ms_quant_stats_weightedArithmeticMean
    if _newclass:weightedArithmeticMean = staticmethod(_msparser.ms_quant_stats_weightedArithmeticMean)
    __swig_getmethods__["geometricMean"] = lambda x: _msparser.ms_quant_stats_geometricMean
    if _newclass:geometricMean = staticmethod(_msparser.ms_quant_stats_geometricMean)
    __swig_getmethods__["weightedGeometricMean"] = lambda x: _msparser.ms_quant_stats_weightedGeometricMean
    if _newclass:weightedGeometricMean = staticmethod(_msparser.ms_quant_stats_weightedGeometricMean)
    __swig_getmethods__["arithmeticStandardDeviation"] = lambda x: _msparser.ms_quant_stats_arithmeticStandardDeviation
    if _newclass:arithmeticStandardDeviation = staticmethod(_msparser.ms_quant_stats_arithmeticStandardDeviation)
    __swig_getmethods__["weightedArithmeticStandardDeviation"] = lambda x: _msparser.ms_quant_stats_weightedArithmeticStandardDeviation
    if _newclass:weightedArithmeticStandardDeviation = staticmethod(_msparser.ms_quant_stats_weightedArithmeticStandardDeviation)
    __swig_getmethods__["geometricStandardDeviation"] = lambda x: _msparser.ms_quant_stats_geometricStandardDeviation
    if _newclass:geometricStandardDeviation = staticmethod(_msparser.ms_quant_stats_geometricStandardDeviation)
    __swig_getmethods__["weightedGeometricStandardDeviation"] = lambda x: _msparser.ms_quant_stats_weightedGeometricStandardDeviation
    if _newclass:weightedGeometricStandardDeviation = staticmethod(_msparser.ms_quant_stats_weightedGeometricStandardDeviation)
    __swig_getmethods__["normalCumulativeProbability"] = lambda x: _msparser.ms_quant_stats_normalCumulativeProbability
    if _newclass:normalCumulativeProbability = staticmethod(_msparser.ms_quant_stats_normalCumulativeProbability)
    __swig_getmethods__["normalCriticalValue"] = lambda x: _msparser.ms_quant_stats_normalCriticalValue
    if _newclass:normalCriticalValue = staticmethod(_msparser.ms_quant_stats_normalCriticalValue)
    __swig_getmethods__["studentsCriticalValue"] = lambda x: _msparser.ms_quant_stats_studentsCriticalValue
    if _newclass:studentsCriticalValue = staticmethod(_msparser.ms_quant_stats_studentsCriticalValue)
    __swig_getmethods__["chisqUpperCriticalValue"] = lambda x: _msparser.ms_quant_stats_chisqUpperCriticalValue
    if _newclass:chisqUpperCriticalValue = staticmethod(_msparser.ms_quant_stats_chisqUpperCriticalValue)
    __swig_getmethods__["chisqLowerCriticalValue"] = lambda x: _msparser.ms_quant_stats_chisqLowerCriticalValue
    if _newclass:chisqLowerCriticalValue = staticmethod(_msparser.ms_quant_stats_chisqLowerCriticalValue)
    __swig_getmethods__["snedecorsCriticalValue"] = lambda x: _msparser.ms_quant_stats_snedecorsCriticalValue
    if _newclass:snedecorsCriticalValue = staticmethod(_msparser.ms_quant_stats_snedecorsCriticalValue)
    __swig_getmethods__["calculateNormalMeanPvalue"] = lambda x: _msparser.ms_quant_stats_calculateNormalMeanPvalue
    if _newclass:calculateNormalMeanPvalue = staticmethod(_msparser.ms_quant_stats_calculateNormalMeanPvalue)
    __swig_getmethods__["calculateNormalMedianPvalue"] = lambda x: _msparser.ms_quant_stats_calculateNormalMedianPvalue
    if _newclass:calculateNormalMedianPvalue = staticmethod(_msparser.ms_quant_stats_calculateNormalMedianPvalue)
    __swig_getmethods__["poissonDensity"] = lambda x: _msparser.ms_quant_stats_poissonDensity
    if _newclass:poissonDensity = staticmethod(_msparser.ms_quant_stats_poissonDensity)
ms_quant_stats_swigregister = _msparser.ms_quant_stats_swigregister
ms_quant_stats_swigregister(ms_quant_stats)

def ms_quant_stats_detectOutliers(*args):
  return _msparser.ms_quant_stats_detectOutliers(*args)
ms_quant_stats_detectOutliers = _msparser.ms_quant_stats_detectOutliers

def ms_quant_stats_testRosners(*args):
  return _msparser.ms_quant_stats_testRosners(*args)
ms_quant_stats_testRosners = _msparser.ms_quant_stats_testRosners

def ms_quant_stats_testDixonsN9(*args):
  return _msparser.ms_quant_stats_testDixonsN9(*args)
ms_quant_stats_testDixonsN9 = _msparser.ms_quant_stats_testDixonsN9

def ms_quant_stats_testGrubbsN2(*args):
  return _msparser.ms_quant_stats_testGrubbsN2(*args)
ms_quant_stats_testGrubbsN2 = _msparser.ms_quant_stats_testGrubbsN2

def ms_quant_stats_testShapiroWilkW(*args):
  return _msparser.ms_quant_stats_testShapiroWilkW(*args)
ms_quant_stats_testShapiroWilkW = _msparser.ms_quant_stats_testShapiroWilkW

def ms_quant_stats_binomialCoefficient(*args):
  return _msparser.ms_quant_stats_binomialCoefficient(*args)
ms_quant_stats_binomialCoefficient = _msparser.ms_quant_stats_binomialCoefficient

def ms_quant_stats_sum(*args):
  return _msparser.ms_quant_stats_sum(*args)
ms_quant_stats_sum = _msparser.ms_quant_stats_sum

def ms_quant_stats_sumsq(*args):
  return _msparser.ms_quant_stats_sumsq(*args)
ms_quant_stats_sumsq = _msparser.ms_quant_stats_sumsq

def ms_quant_stats_meanCentre(*args):
  return _msparser.ms_quant_stats_meanCentre(*args)
ms_quant_stats_meanCentre = _msparser.ms_quant_stats_meanCentre

def ms_quant_stats_logTransform(*args):
  return _msparser.ms_quant_stats_logTransform(*args)
ms_quant_stats_logTransform = _msparser.ms_quant_stats_logTransform

def ms_quant_stats_expTransform(*args):
  return _msparser.ms_quant_stats_expTransform(*args)
ms_quant_stats_expTransform = _msparser.ms_quant_stats_expTransform

def ms_quant_stats_sortedMedian(*args):
  return _msparser.ms_quant_stats_sortedMedian(*args)
ms_quant_stats_sortedMedian = _msparser.ms_quant_stats_sortedMedian

def ms_quant_stats_unsortedMedian(*args):
  return _msparser.ms_quant_stats_unsortedMedian(*args)
ms_quant_stats_unsortedMedian = _msparser.ms_quant_stats_unsortedMedian

def ms_quant_stats_arithmeticMean(*args):
  return _msparser.ms_quant_stats_arithmeticMean(*args)
ms_quant_stats_arithmeticMean = _msparser.ms_quant_stats_arithmeticMean

def ms_quant_stats_weightedArithmeticMean(*args):
  return _msparser.ms_quant_stats_weightedArithmeticMean(*args)
ms_quant_stats_weightedArithmeticMean = _msparser.ms_quant_stats_weightedArithmeticMean

def ms_quant_stats_geometricMean(*args):
  return _msparser.ms_quant_stats_geometricMean(*args)
ms_quant_stats_geometricMean = _msparser.ms_quant_stats_geometricMean

def ms_quant_stats_weightedGeometricMean(*args):
  return _msparser.ms_quant_stats_weightedGeometricMean(*args)
ms_quant_stats_weightedGeometricMean = _msparser.ms_quant_stats_weightedGeometricMean

def ms_quant_stats_arithmeticStandardDeviation(*args):
  return _msparser.ms_quant_stats_arithmeticStandardDeviation(*args)
ms_quant_stats_arithmeticStandardDeviation = _msparser.ms_quant_stats_arithmeticStandardDeviation

def ms_quant_stats_weightedArithmeticStandardDeviation(*args):
  return _msparser.ms_quant_stats_weightedArithmeticStandardDeviation(*args)
ms_quant_stats_weightedArithmeticStandardDeviation = _msparser.ms_quant_stats_weightedArithmeticStandardDeviation

def ms_quant_stats_geometricStandardDeviation(*args):
  return _msparser.ms_quant_stats_geometricStandardDeviation(*args)
ms_quant_stats_geometricStandardDeviation = _msparser.ms_quant_stats_geometricStandardDeviation

def ms_quant_stats_weightedGeometricStandardDeviation(*args):
  return _msparser.ms_quant_stats_weightedGeometricStandardDeviation(*args)
ms_quant_stats_weightedGeometricStandardDeviation = _msparser.ms_quant_stats_weightedGeometricStandardDeviation

def ms_quant_stats_normalCumulativeProbability(*args):
  return _msparser.ms_quant_stats_normalCumulativeProbability(*args)
ms_quant_stats_normalCumulativeProbability = _msparser.ms_quant_stats_normalCumulativeProbability

def ms_quant_stats_normalCriticalValue(*args):
  return _msparser.ms_quant_stats_normalCriticalValue(*args)
ms_quant_stats_normalCriticalValue = _msparser.ms_quant_stats_normalCriticalValue

def ms_quant_stats_studentsCriticalValue(*args):
  return _msparser.ms_quant_stats_studentsCriticalValue(*args)
ms_quant_stats_studentsCriticalValue = _msparser.ms_quant_stats_studentsCriticalValue

def ms_quant_stats_chisqUpperCriticalValue(*args):
  return _msparser.ms_quant_stats_chisqUpperCriticalValue(*args)
ms_quant_stats_chisqUpperCriticalValue = _msparser.ms_quant_stats_chisqUpperCriticalValue

def ms_quant_stats_chisqLowerCriticalValue(*args):
  return _msparser.ms_quant_stats_chisqLowerCriticalValue(*args)
ms_quant_stats_chisqLowerCriticalValue = _msparser.ms_quant_stats_chisqLowerCriticalValue

def ms_quant_stats_snedecorsCriticalValue(*args):
  return _msparser.ms_quant_stats_snedecorsCriticalValue(*args)
ms_quant_stats_snedecorsCriticalValue = _msparser.ms_quant_stats_snedecorsCriticalValue

def ms_quant_stats_calculateNormalMeanPvalue(*args):
  return _msparser.ms_quant_stats_calculateNormalMeanPvalue(*args)
ms_quant_stats_calculateNormalMeanPvalue = _msparser.ms_quant_stats_calculateNormalMeanPvalue

def ms_quant_stats_calculateNormalMedianPvalue(*args):
  return _msparser.ms_quant_stats_calculateNormalMedianPvalue(*args)
ms_quant_stats_calculateNormalMedianPvalue = _msparser.ms_quant_stats_calculateNormalMedianPvalue

def ms_quant_stats_poissonDensity(*args):
  return _msparser.ms_quant_stats_poissonDensity(*args)
ms_quant_stats_poissonDensity = _msparser.ms_quant_stats_poissonDensity

class ms_quant_helper(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quant_helper, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quant_helper, name)
    __repr__ = _swig_repr
    PEPTIDE_IS_QUANTIFIABLE = _msparser.ms_quant_helper_PEPTIDE_IS_QUANTIFIABLE
    PEPTIDE_HAS_NO_REQUIRED_FIXEDMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_NO_REQUIRED_FIXEDMOD
    PEPTIDE_HAS_NO_REQUIRED_VARMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_NO_REQUIRED_VARMOD
    PEPTIDE_HAS_EXCLUDED_FIXEDMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_EXCLUDED_FIXEDMOD
    PEPTIDE_HAS_EXCLUDED_LOCAL_FIXEDMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_EXCLUDED_LOCAL_FIXEDMOD
    PEPTIDE_HAS_EXCLUDED_VARMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_EXCLUDED_VARMOD
    PEPTIDE_HAS_UNMODIFIED_SITE = _msparser.ms_quant_helper_PEPTIDE_HAS_UNMODIFIED_SITE
    PEPTIDE_HAS_EXCLUDED_LOCAL_VARMOD = _msparser.ms_quant_helper_PEPTIDE_HAS_EXCLUDED_LOCAL_VARMOD
    PEPTIDE_QUANTIFIABILITY_UNAVAILABLE = _msparser.ms_quant_helper_PEPTIDE_QUANTIFIABILITY_UNAVAILABLE
    PEPTIDE_QUALITY_IS_OK = _msparser.ms_quant_helper_PEPTIDE_QUALITY_IS_OK
    PEPTIDE_CHARGE_BELOW_PRECURSOR_MIN = _msparser.ms_quant_helper_PEPTIDE_CHARGE_BELOW_PRECURSOR_MIN
    PEPTIDE_SCORE_BELOW_SCORE_THR = _msparser.ms_quant_helper_PEPTIDE_SCORE_BELOW_SCORE_THR
    PEPTIDE_EXPECT_ABOVE_THRESHOLD = _msparser.ms_quant_helper_PEPTIDE_EXPECT_ABOVE_THRESHOLD
    PEPTIDE_SCORE_BELOW_IDENTITY_THR = _msparser.ms_quant_helper_PEPTIDE_SCORE_BELOW_IDENTITY_THR
    PEPTIDE_SCORE_BELOW_IDENTITY_THR_NOHOM = _msparser.ms_quant_helper_PEPTIDE_SCORE_BELOW_IDENTITY_THR_NOHOM
    PEPTIDE_SCORE_BELOW_HOMOLOGY_THR = _msparser.ms_quant_helper_PEPTIDE_SCORE_BELOW_HOMOLOGY_THR
    PEPTIDE_HAS_NO_EXCLUSIVE_MODS = _msparser.ms_quant_helper_PEPTIDE_HAS_NO_EXCLUSIVE_MODS
    PEPTIDE_QUALITY_UNAVAILABLE = _msparser.ms_quant_helper_PEPTIDE_QUALITY_UNAVAILABLE
    def __init__(self, *args): 
        this = _msparser.new_ms_quant_helper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_quant_helper
    __del__ = lambda self : None;
    def isPeptideQuantifiable(self, *args): return _msparser.ms_quant_helper_isPeptideQuantifiable(self, *args)
    def isPeptideQualityOK(self, *args): return _msparser.ms_quant_helper_isPeptideQualityOK(self, *args)
    def testProteinTerminusExclusion(self, *args): return _msparser.ms_quant_helper_testProteinTerminusExclusion(self, *args)
ms_quant_helper_swigregister = _msparser.ms_quant_helper_swigregister
ms_quant_helper_swigregister(ms_quant_helper)

class ms_peptide_quant_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_peptide_quant_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_peptide_quant_key, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_peptide_quant_key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_peptide_quant_key
    __del__ = lambda self : None;
    def getQueryAndRank(self): return _msparser.ms_peptide_quant_key_getQueryAndRank(self)
    def getCharge(self): return _msparser.ms_peptide_quant_key_getCharge(self)
    def getID(self): return _msparser.ms_peptide_quant_key_getID(self)
    def getOpaqueString(self, *args): return _msparser.ms_peptide_quant_key_getOpaqueString(self, *args)
    def getOpaqueStringAndID(self, *args): return _msparser.ms_peptide_quant_key_getOpaqueStringAndID(self, *args)
ms_peptide_quant_key_swigregister = _msparser.ms_peptide_quant_key_swigregister
ms_peptide_quant_key_swigregister(ms_peptide_quant_key)

class ms_peptide_quant_key_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_peptide_quant_key_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_peptide_quant_key_vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_peptide_quant_key_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_peptide_quant_key_vector
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_peptide_quant_key_vector_copyFrom(self, *args)
    def size(self): return _msparser.ms_peptide_quant_key_vector_size(self)
    def empty(self): return _msparser.ms_peptide_quant_key_vector_empty(self)
    def push(self, *args): return _msparser.ms_peptide_quant_key_vector_push(self, *args)
    def pop(self): return _msparser.ms_peptide_quant_key_vector_pop(self)
    def get(self, *args): return _msparser.ms_peptide_quant_key_vector_get(self, *args)
    def set(self, *args): return _msparser.ms_peptide_quant_key_vector_set(self, *args)
    def clear(self): return _msparser.ms_peptide_quant_key_vector_clear(self)
    def swap(self, *args): return _msparser.ms_peptide_quant_key_vector_swap(self, *args)
ms_peptide_quant_key_vector_swigregister = _msparser.ms_peptide_quant_key_vector_swigregister
ms_peptide_quant_key_vector_swigregister(ms_peptide_quant_key_vector)

class ms_peptide_quant_ratio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_peptide_quant_ratio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_peptide_quant_ratio, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_peptide_quant_ratio(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_peptide_quant_ratio
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_peptide_quant_ratio_copyFrom(self, *args)
    def isMissing(self): return _msparser.ms_peptide_quant_ratio_isMissing(self)
    def isInfinite(self): return _msparser.ms_peptide_quant_ratio_isInfinite(self)
    def getValue(self): return _msparser.ms_peptide_quant_ratio_getValue(self)
    def getKey(self): return _msparser.ms_peptide_quant_ratio_getKey(self)
    def getRatioName(self): return _msparser.ms_peptide_quant_ratio_getRatioName(self)
    def isExcluded(self): return _msparser.ms_peptide_quant_ratio_isExcluded(self)
    def getWeight(self): return _msparser.ms_peptide_quant_ratio_getWeight(self)
ms_peptide_quant_ratio_swigregister = _msparser.ms_peptide_quant_ratio_swigregister
ms_peptide_quant_ratio_swigregister(ms_peptide_quant_ratio)

class ms_protein_quant_ratio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_protein_quant_ratio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_protein_quant_ratio, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_protein_quant_ratio(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_protein_quant_ratio
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_protein_quant_ratio_copyFrom(self, *args)
    def isMissing(self): return _msparser.ms_protein_quant_ratio_isMissing(self)
    def getAccession(self): return _msparser.ms_protein_quant_ratio_getAccession(self)
    def getDB(self): return _msparser.ms_protein_quant_ratio_getDB(self)
    def getRatioName(self): return _msparser.ms_protein_quant_ratio_getRatioName(self)
    def getValue(self): return _msparser.ms_protein_quant_ratio_getValue(self)
    def getSampleSize(self): return _msparser.ms_protein_quant_ratio_getSampleSize(self)
    def getStandardDeviation(self): return _msparser.ms_protein_quant_ratio_getStandardDeviation(self)
    def getActiveKeys(self): return _msparser.ms_protein_quant_ratio_getActiveKeys(self)
    def getSkippedKeys(self): return _msparser.ms_protein_quant_ratio_getSkippedKeys(self)
    def getOutlierKeys(self): return _msparser.ms_protein_quant_ratio_getOutlierKeys(self)
    def getExcludedKeys(self): return _msparser.ms_protein_quant_ratio_getExcludedKeys(self)
    def getHypothesisPvalue(self): return _msparser.ms_protein_quant_ratio_getHypothesisPvalue(self)
    def isSignificant(self, threshold = 0.05): return _msparser.ms_protein_quant_ratio_isSignificant(self, threshold)
    def getNormalityPvalue(self): return _msparser.ms_protein_quant_ratio_getNormalityPvalue(self)
    def isLogNormal(self, threshold = 0.05): return _msparser.ms_protein_quant_ratio_isLogNormal(self, threshold)
ms_protein_quant_ratio_swigregister = _msparser.ms_protein_quant_ratio_swigregister
ms_protein_quant_ratio_swigregister(ms_protein_quant_ratio)

class ms_quantitation(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_quantitation, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_quantitation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _msparser.delete_ms_quantitation
    __del__ = lambda self : None;
    def hasPeptideRatio(self, *args): return _msparser.ms_quantitation_hasPeptideRatio(self, *args)
    def getPeptideRatio(self, *args): return _msparser.ms_quantitation_getPeptideRatio(self, *args)
    def setPeptideRatioIncluded(self, *args): return _msparser.ms_quantitation_setPeptideRatioIncluded(self, *args)
    def setPeptideRatioExcluded(self, *args): return _msparser.ms_quantitation_setPeptideRatioExcluded(self, *args)
    def isPeptideRatioExcluded(self, *args): return _msparser.ms_quantitation_isPeptideRatioExcluded(self, *args)
    def setQuantOutliers(self, *args): return _msparser.ms_quantitation_setQuantOutliers(self, *args)
    def setMinNumPeptides(self, *args): return _msparser.ms_quantitation_setMinNumPeptides(self, *args)
    def setProteinRatioType(self, *args): return _msparser.ms_quantitation_setProteinRatioType(self, *args)
    def getQuantitationMethod(self): return _msparser.ms_quantitation_getQuantitationMethod(self)
    def getProteinRatio(self, *args): return _msparser.ms_quantitation_getProteinRatio(self, *args)
    def getPeptideQuantKeys(self, *args): return _msparser.ms_quantitation_getPeptideQuantKeys(self, *args)
    def getPeptideRatioNormalisationBase(self, *args): return _msparser.ms_quantitation_getPeptideRatioNormalisationBase(self, *args)
    def setPeptideRatioNormalisationBase(self, *args): return _msparser.ms_quantitation_setPeptideRatioNormalisationBase(self, *args)
    def removePeptideRatioNormalisationBase(self, *args): return _msparser.ms_quantitation_removePeptideRatioNormalisationBase(self, *args)
    def removePeptideRatioNormalisationBases(self): return _msparser.ms_quantitation_removePeptideRatioNormalisationBases(self)
ms_quantitation_swigregister = _msparser.ms_quantitation_swigregister
ms_quantitation_swigregister(ms_quantitation)

class ms_ms2quantitation(ms_quantitation):
    __swig_setmethods__ = {}
    for _s in [ms_quantitation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_ms2quantitation, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quantitation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_ms2quantitation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_ms2quantitation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_ms2quantitation
    __del__ = lambda self : None;
    def hasPeptideRatio(self, *args): return _msparser.ms_ms2quantitation_hasPeptideRatio(self, *args)
    def getPeptideRatio(self, *args): return _msparser.ms_ms2quantitation_getPeptideRatio(self, *args)
    def setPeptideRatioIncluded(self, *args): return _msparser.ms_ms2quantitation_setPeptideRatioIncluded(self, *args)
    def setPeptideRatioExcluded(self, *args): return _msparser.ms_ms2quantitation_setPeptideRatioExcluded(self, *args)
    def isPeptideRatioExcluded(self, *args): return _msparser.ms_ms2quantitation_isPeptideRatioExcluded(self, *args)
    def setProteinRatioType(self, *args): return _msparser.ms_ms2quantitation_setProteinRatioType(self, *args)
    def setQuantOutliers(self, *args): return _msparser.ms_ms2quantitation_setQuantOutliers(self, *args)
    def getProteinRatio(self, *args): return _msparser.ms_ms2quantitation_getProteinRatio(self, *args)
    def setQuantNormalisation(self, *args): return _msparser.ms_ms2quantitation_setQuantNormalisation(self, *args)
    def hasPeptideRatioNormalisation(self): return _msparser.ms_ms2quantitation_hasPeptideRatioNormalisation(self)
    def normalisePeptideRatios(self): return _msparser.ms_ms2quantitation_normalisePeptideRatios(self)
    def getComponentIntensities(self, *args): return _msparser.ms_ms2quantitation_getComponentIntensities(self, *args)
    def getReportRatioNamesInFile(self, *args): return _msparser.ms_ms2quantitation_getReportRatioNamesInFile(self, *args)
    def getReportRatioFromFile(self, *args): return _msparser.ms_ms2quantitation_getReportRatioFromFile(self, *args)
    def setReportRatioInFile(self, *args): return _msparser.ms_ms2quantitation_setReportRatioInFile(self, *args)
    def removeReportRatioInFile(self, *args): return _msparser.ms_ms2quantitation_removeReportRatioInFile(self, *args)
    def getCombinedReportRatioNames(self): return _msparser.ms_ms2quantitation_getCombinedReportRatioNames(self)
    def getCombinedReportRatio(self, *args): return _msparser.ms_ms2quantitation_getCombinedReportRatio(self, *args)
    def removeCombinedReportRatio(self, *args): return _msparser.ms_ms2quantitation_removeCombinedReportRatio(self, *args)
    def setCombinedReportRatio(self, *args): return _msparser.ms_ms2quantitation_setCombinedReportRatio(self, *args)
    def getIntensityNormalisationBase(self, *args): return _msparser.ms_ms2quantitation_getIntensityNormalisationBase(self, *args)
    def setIntensityNormalisationBase(self, *args): return _msparser.ms_ms2quantitation_setIntensityNormalisationBase(self, *args)
    def removeIntensityNormalisationBase(self, *args): return _msparser.ms_ms2quantitation_removeIntensityNormalisationBase(self, *args)
    def removeIntensityNormalisationBases(self): return _msparser.ms_ms2quantitation_removeIntensityNormalisationBases(self)
    def hasIntensityNormalisation(self): return _msparser.ms_ms2quantitation_hasIntensityNormalisation(self)
    def normaliseIntensities(self): return _msparser.ms_ms2quantitation_normaliseIntensities(self)
ms_ms2quantitation_swigregister = _msparser.ms_ms2quantitation_swigregister
ms_ms2quantitation_swigregister(ms_ms2quantitation)

class ms_customquantitation(ms_quantitation):
    __swig_setmethods__ = {}
    for _s in [ms_quantitation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_customquantitation, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_quantitation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_customquantitation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_customquantitation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_customquantitation
    __del__ = lambda self : None;
    def hasPeptideRatio(self, *args): return _msparser.ms_customquantitation_hasPeptideRatio(self, *args)
    def getPeptideRatio(self, *args): return _msparser.ms_customquantitation_getPeptideRatio(self, *args)
    def isPeptideRatioExcluded(self, *args): return _msparser.ms_customquantitation_isPeptideRatioExcluded(self, *args)
    def setPeptideRatioIncluded(self, *args): return _msparser.ms_customquantitation_setPeptideRatioIncluded(self, *args)
    def setPeptideRatioExcluded(self, *args): return _msparser.ms_customquantitation_setPeptideRatioExcluded(self, *args)
    def setProteinRatioType(self, *args): return _msparser.ms_customquantitation_setProteinRatioType(self, *args)
    def setQuantOutliers(self, *args): return _msparser.ms_customquantitation_setQuantOutliers(self, *args)
    def getProteinRatio(self, *args): return _msparser.ms_customquantitation_getProteinRatio(self, *args)
    def setAverageReferenceProtein(self, *args): return _msparser.ms_customquantitation_setAverageReferenceProtein(self, *args)
    def setAverageNumPeptides(self, num = 3): return _msparser.ms_customquantitation_setAverageNumPeptides(self, num)
    def addPeptideRatio(self, *args): return _msparser.ms_customquantitation_addPeptideRatio(self, *args)
    def removePeptideRatio(self, *args): return _msparser.ms_customquantitation_removePeptideRatio(self, *args)
    def clearPeptideRatios(self): return _msparser.ms_customquantitation_clearPeptideRatios(self)
    def addPeptideQuantKey(self, *args): return _msparser.ms_customquantitation_addPeptideQuantKey(self, *args)
    def addPeptideQuantKeys(self, *args): return _msparser.ms_customquantitation_addPeptideQuantKeys(self, *args)
    def removePeptideQuantKey(self, *args): return _msparser.ms_customquantitation_removePeptideQuantKey(self, *args)
    def clearPeptideQuantKeys(self, *args): return _msparser.ms_customquantitation_clearPeptideQuantKeys(self, *args)
    def getUnnormalisedAveragePeptideRatio(self, *args): return _msparser.ms_customquantitation_getUnnormalisedAveragePeptideRatio(self, *args)
ms_customquantitation_swigregister = _msparser.ms_customquantitation_swigregister
ms_customquantitation_swigregister(ms_customquantitation)

class ms_umod_element(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_element, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_element, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_element
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_element_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_element_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_element_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_element_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_element_validateDeep(self, *args)
    def haveTitle(self): return _msparser.ms_umod_element_haveTitle(self)
    def getTitle(self): return _msparser.ms_umod_element_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_umod_element_setTitle(self, *args)
    def dropTitle(self): return _msparser.ms_umod_element_dropTitle(self)
    def getTitleSchemaType(self): return _msparser.ms_umod_element_getTitleSchemaType(self)
    def haveFullName(self): return _msparser.ms_umod_element_haveFullName(self)
    def getFullName(self): return _msparser.ms_umod_element_getFullName(self)
    def setFullName(self, *args): return _msparser.ms_umod_element_setFullName(self, *args)
    def dropFullName(self): return _msparser.ms_umod_element_dropFullName(self)
    def getFullNameSchemaType(self): return _msparser.ms_umod_element_getFullNameSchemaType(self)
    def haveAvgeMass(self): return _msparser.ms_umod_element_haveAvgeMass(self)
    def getAvgeMass(self): return _msparser.ms_umod_element_getAvgeMass(self)
    def getAvgeMassAsNumber(self): return _msparser.ms_umod_element_getAvgeMassAsNumber(self)
    def setAvgeMass(self, *args): return _msparser.ms_umod_element_setAvgeMass(self, *args)
    def dropAvgeMass(self): return _msparser.ms_umod_element_dropAvgeMass(self)
    def getAvgeMassSchemaType(self): return _msparser.ms_umod_element_getAvgeMassSchemaType(self)
    def haveMonoMass(self): return _msparser.ms_umod_element_haveMonoMass(self)
    def getMonoMass(self): return _msparser.ms_umod_element_getMonoMass(self)
    def getMonoMassAsNumber(self): return _msparser.ms_umod_element_getMonoMassAsNumber(self)
    def setMonoMass(self, *args): return _msparser.ms_umod_element_setMonoMass(self, *args)
    def dropMonoMass(self): return _msparser.ms_umod_element_dropMonoMass(self)
    def getMonoMassSchemaType(self): return _msparser.ms_umod_element_getMonoMassSchemaType(self)
ms_umod_element_swigregister = _msparser.ms_umod_element_swigregister
ms_umod_element_swigregister(ms_umod_element)

class ms_umod_modification(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_modification, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_modification, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_modification(*args)
        try: self.this.append(this)
        except: self.this = this
    def updateMasses(self, *args): return _msparser.ms_umod_modification_updateMasses(self, *args)
    __swig_destroy__ = _msparser.delete_ms_umod_modification
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_modification_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_modification_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_modification_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_modification_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_modification_validateDeep(self, *args)
    def getModFileList(self, *args): return _msparser.ms_umod_modification_getModFileList(self, *args)
    def findSpecGroup(self, *args): return _msparser.ms_umod_modification_findSpecGroup(self, *args)
    def getNumberOfSpecificities(self): return _msparser.ms_umod_modification_getNumberOfSpecificities(self)
    def clearSpecificities(self): return _msparser.ms_umod_modification_clearSpecificities(self)
    def appendSpecificity(self, *args): return _msparser.ms_umod_modification_appendSpecificity(self, *args)
    def getSpecificity(self, *args): return _msparser.ms_umod_modification_getSpecificity(self, *args)
    def updateSpecificity(self, *args): return _msparser.ms_umod_modification_updateSpecificity(self, *args)
    def deleteSpecificity(self, *args): return _msparser.ms_umod_modification_deleteSpecificity(self, *args)
    def getSpecificitySchemaType(self): return _msparser.ms_umod_modification_getSpecificitySchemaType(self)
    def haveDelta(self): return _msparser.ms_umod_modification_haveDelta(self)
    def getDelta(self): return _msparser.ms_umod_modification_getDelta(self)
    def setDelta(self, *args): return _msparser.ms_umod_modification_setDelta(self, *args)
    def dropDelta(self): return _msparser.ms_umod_modification_dropDelta(self)
    def getDeltaSchemaType(self): return _msparser.ms_umod_modification_getDeltaSchemaType(self)
    def getNumberOfIgnores(self): return _msparser.ms_umod_modification_getNumberOfIgnores(self)
    def clearIgnores(self): return _msparser.ms_umod_modification_clearIgnores(self)
    def appendIgnore(self, *args): return _msparser.ms_umod_modification_appendIgnore(self, *args)
    def getIgnore(self, *args): return _msparser.ms_umod_modification_getIgnore(self, *args)
    def updateIgnore(self, *args): return _msparser.ms_umod_modification_updateIgnore(self, *args)
    def deleteIgnore(self, *args): return _msparser.ms_umod_modification_deleteIgnore(self, *args)
    def getIgnoreSchemaType(self): return _msparser.ms_umod_modification_getIgnoreSchemaType(self)
    def getNumberOfAltNames(self): return _msparser.ms_umod_modification_getNumberOfAltNames(self)
    def clearAltNames(self): return _msparser.ms_umod_modification_clearAltNames(self)
    def appendAltName(self, *args): return _msparser.ms_umod_modification_appendAltName(self, *args)
    def getAltName(self, *args): return _msparser.ms_umod_modification_getAltName(self, *args)
    def updateAltName(self, *args): return _msparser.ms_umod_modification_updateAltName(self, *args)
    def deleteAltName(self, *args): return _msparser.ms_umod_modification_deleteAltName(self, *args)
    def getAltNameSchemaType(self): return _msparser.ms_umod_modification_getAltNameSchemaType(self)
    def getNumberOfXrefs(self): return _msparser.ms_umod_modification_getNumberOfXrefs(self)
    def clearXrefs(self): return _msparser.ms_umod_modification_clearXrefs(self)
    def appendXref(self, *args): return _msparser.ms_umod_modification_appendXref(self, *args)
    def getXref(self, *args): return _msparser.ms_umod_modification_getXref(self, *args)
    def updateXref(self, *args): return _msparser.ms_umod_modification_updateXref(self, *args)
    def deleteXref(self, *args): return _msparser.ms_umod_modification_deleteXref(self, *args)
    def getXrefSchemaType(self): return _msparser.ms_umod_modification_getXrefSchemaType(self)
    def haveMiscNotes(self): return _msparser.ms_umod_modification_haveMiscNotes(self)
    def getMiscNotes(self): return _msparser.ms_umod_modification_getMiscNotes(self)
    def setMiscNotes(self, *args): return _msparser.ms_umod_modification_setMiscNotes(self, *args)
    def dropMiscNotes(self): return _msparser.ms_umod_modification_dropMiscNotes(self)
    def getMiscNotesSchemaType(self): return _msparser.ms_umod_modification_getMiscNotesSchemaType(self)
    def haveTitle(self): return _msparser.ms_umod_modification_haveTitle(self)
    def getTitle(self): return _msparser.ms_umod_modification_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_umod_modification_setTitle(self, *args)
    def dropTitle(self): return _msparser.ms_umod_modification_dropTitle(self)
    def getTitleSchemaType(self): return _msparser.ms_umod_modification_getTitleSchemaType(self)
    def haveFullName(self): return _msparser.ms_umod_modification_haveFullName(self)
    def getFullName(self): return _msparser.ms_umod_modification_getFullName(self)
    def setFullName(self, *args): return _msparser.ms_umod_modification_setFullName(self, *args)
    def dropFullName(self): return _msparser.ms_umod_modification_dropFullName(self)
    def getFullNameSchemaType(self): return _msparser.ms_umod_modification_getFullNameSchemaType(self)
    def haveApproved(self): return _msparser.ms_umod_modification_haveApproved(self)
    def isApproved(self): return _msparser.ms_umod_modification_isApproved(self)
    def setApproved(self, *args): return _msparser.ms_umod_modification_setApproved(self, *args)
    def dropApproved(self): return _msparser.ms_umod_modification_dropApproved(self)
    def getApprovedSchemaType(self): return _msparser.ms_umod_modification_getApprovedSchemaType(self)
    def haveUsernameOfPoster(self): return _msparser.ms_umod_modification_haveUsernameOfPoster(self)
    def getUsernameOfPoster(self): return _msparser.ms_umod_modification_getUsernameOfPoster(self)
    def setUsernameOfPoster(self, *args): return _msparser.ms_umod_modification_setUsernameOfPoster(self, *args)
    def dropUsernameOfPoster(self): return _msparser.ms_umod_modification_dropUsernameOfPoster(self)
    def getUsernameOfPosterSchemaType(self): return _msparser.ms_umod_modification_getUsernameOfPosterSchemaType(self)
    def haveGroupOfPoster(self): return _msparser.ms_umod_modification_haveGroupOfPoster(self)
    def getGroupOfPoster(self): return _msparser.ms_umod_modification_getGroupOfPoster(self)
    def setGroupOfPoster(self, *args): return _msparser.ms_umod_modification_setGroupOfPoster(self, *args)
    def dropGroupOfPoster(self): return _msparser.ms_umod_modification_dropGroupOfPoster(self)
    def getGroupOfPosterSchemaType(self): return _msparser.ms_umod_modification_getGroupOfPosterSchemaType(self)
    def haveDateTimePosted(self): return _msparser.ms_umod_modification_haveDateTimePosted(self)
    def getDateTimePosted(self): return _msparser.ms_umod_modification_getDateTimePosted(self)
    def setDateTimePosted(self, *args): return _msparser.ms_umod_modification_setDateTimePosted(self, *args)
    def dropDateTimePosted(self): return _msparser.ms_umod_modification_dropDateTimePosted(self)
    def getDateTimePostedSchemaType(self): return _msparser.ms_umod_modification_getDateTimePostedSchemaType(self)
    def haveDateTimeModified(self): return _msparser.ms_umod_modification_haveDateTimeModified(self)
    def getDateTimeModified(self): return _msparser.ms_umod_modification_getDateTimeModified(self)
    def setDateTimeModified(self, *args): return _msparser.ms_umod_modification_setDateTimeModified(self, *args)
    def dropDateTimeModified(self): return _msparser.ms_umod_modification_dropDateTimeModified(self)
    def getDateTimeModifiedSchemaType(self): return _msparser.ms_umod_modification_getDateTimeModifiedSchemaType(self)
    def haveRecordID(self): return _msparser.ms_umod_modification_haveRecordID(self)
    def getRecordID(self): return _msparser.ms_umod_modification_getRecordID(self)
    def setRecordID(self, *args): return _msparser.ms_umod_modification_setRecordID(self, *args)
    def dropRecordID(self): return _msparser.ms_umod_modification_dropRecordID(self)
    def getRecordIDSchemaType(self): return _msparser.ms_umod_modification_getRecordIDSchemaType(self)
ms_umod_modification_swigregister = _msparser.ms_umod_modification_swigregister
ms_umod_modification_swigregister(ms_umod_modification)

class ms_umod_aminoacid(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_aminoacid, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_aminoacid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_aminoacid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_aminoacid
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_aminoacid_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_aminoacid_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_aminoacid_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_aminoacid_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_aminoacid_validateDeep(self, *args)
    def getNumberOfElemRefs(self): return _msparser.ms_umod_aminoacid_getNumberOfElemRefs(self)
    def clearElemRefs(self): return _msparser.ms_umod_aminoacid_clearElemRefs(self)
    def appendElemRef(self, *args): return _msparser.ms_umod_aminoacid_appendElemRef(self, *args)
    def getElemRef(self, *args): return _msparser.ms_umod_aminoacid_getElemRef(self, *args)
    def updateElemRef(self, *args): return _msparser.ms_umod_aminoacid_updateElemRef(self, *args)
    def deleteElemRef(self, *args): return _msparser.ms_umod_aminoacid_deleteElemRef(self, *args)
    def getElemRefSchemaType(self): return _msparser.ms_umod_aminoacid_getElemRefSchemaType(self)
    def haveTitle(self): return _msparser.ms_umod_aminoacid_haveTitle(self)
    def getTitle(self): return _msparser.ms_umod_aminoacid_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_umod_aminoacid_setTitle(self, *args)
    def dropTitle(self): return _msparser.ms_umod_aminoacid_dropTitle(self)
    def getTitleSchemaType(self): return _msparser.ms_umod_aminoacid_getTitleSchemaType(self)
    def haveThreeLetter(self): return _msparser.ms_umod_aminoacid_haveThreeLetter(self)
    def getThreeLetter(self): return _msparser.ms_umod_aminoacid_getThreeLetter(self)
    def setThreeLetter(self, *args): return _msparser.ms_umod_aminoacid_setThreeLetter(self, *args)
    def dropThreeLetter(self): return _msparser.ms_umod_aminoacid_dropThreeLetter(self)
    def getThreeLetterSchemaType(self): return _msparser.ms_umod_aminoacid_getThreeLetterSchemaType(self)
    def haveFullName(self): return _msparser.ms_umod_aminoacid_haveFullName(self)
    def getFullName(self): return _msparser.ms_umod_aminoacid_getFullName(self)
    def setFullName(self, *args): return _msparser.ms_umod_aminoacid_setFullName(self, *args)
    def dropFullName(self): return _msparser.ms_umod_aminoacid_dropFullName(self)
    def getFullNameSchemaType(self): return _msparser.ms_umod_aminoacid_getFullNameSchemaType(self)
    def haveAvgeMass(self): return _msparser.ms_umod_aminoacid_haveAvgeMass(self)
    def getAvgeMass(self): return _msparser.ms_umod_aminoacid_getAvgeMass(self)
    def setAvgeMass(self, *args): return _msparser.ms_umod_aminoacid_setAvgeMass(self, *args)
    def dropAvgeMass(self): return _msparser.ms_umod_aminoacid_dropAvgeMass(self)
    def getAvgeMassSchemaType(self): return _msparser.ms_umod_aminoacid_getAvgeMassSchemaType(self)
    def haveMonoMass(self): return _msparser.ms_umod_aminoacid_haveMonoMass(self)
    def getMonoMass(self): return _msparser.ms_umod_aminoacid_getMonoMass(self)
    def setMonoMass(self, *args): return _msparser.ms_umod_aminoacid_setMonoMass(self, *args)
    def dropMonoMass(self): return _msparser.ms_umod_aminoacid_dropMonoMass(self)
    def getMonoMassSchemaType(self): return _msparser.ms_umod_aminoacid_getMonoMassSchemaType(self)
ms_umod_aminoacid_swigregister = _msparser.ms_umod_aminoacid_swigregister
ms_umod_aminoacid_swigregister(ms_umod_aminoacid)

class ms_umod_modbrick(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_modbrick, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_modbrick, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_modbrick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_modbrick
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_modbrick_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_modbrick_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_modbrick_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_modbrick_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_modbrick_validateDeep(self, *args)
    def getNumberOfElemRefs(self): return _msparser.ms_umod_modbrick_getNumberOfElemRefs(self)
    def clearElemRefs(self): return _msparser.ms_umod_modbrick_clearElemRefs(self)
    def appendElemRef(self, *args): return _msparser.ms_umod_modbrick_appendElemRef(self, *args)
    def getElemRef(self, *args): return _msparser.ms_umod_modbrick_getElemRef(self, *args)
    def updateElemRef(self, *args): return _msparser.ms_umod_modbrick_updateElemRef(self, *args)
    def deleteElemRef(self, *args): return _msparser.ms_umod_modbrick_deleteElemRef(self, *args)
    def getElemRefSchemaType(self): return _msparser.ms_umod_modbrick_getElemRefSchemaType(self)
    def haveTitle(self): return _msparser.ms_umod_modbrick_haveTitle(self)
    def getTitle(self): return _msparser.ms_umod_modbrick_getTitle(self)
    def setTitle(self, *args): return _msparser.ms_umod_modbrick_setTitle(self, *args)
    def dropTitle(self): return _msparser.ms_umod_modbrick_dropTitle(self)
    def getTitleSchemaType(self): return _msparser.ms_umod_modbrick_getTitleSchemaType(self)
    def haveFullName(self): return _msparser.ms_umod_modbrick_haveFullName(self)
    def getFullName(self): return _msparser.ms_umod_modbrick_getFullName(self)
    def setFullName(self, *args): return _msparser.ms_umod_modbrick_setFullName(self, *args)
    def dropFullName(self): return _msparser.ms_umod_modbrick_dropFullName(self)
    def getFullNameSchemaType(self): return _msparser.ms_umod_modbrick_getFullNameSchemaType(self)
    def haveAvgeMass(self): return _msparser.ms_umod_modbrick_haveAvgeMass(self)
    def getAvgeMass(self): return _msparser.ms_umod_modbrick_getAvgeMass(self)
    def setAvgeMass(self, *args): return _msparser.ms_umod_modbrick_setAvgeMass(self, *args)
    def dropAvgeMass(self): return _msparser.ms_umod_modbrick_dropAvgeMass(self)
    def getAvgeMassSchemaType(self): return _msparser.ms_umod_modbrick_getAvgeMassSchemaType(self)
    def haveMonoMass(self): return _msparser.ms_umod_modbrick_haveMonoMass(self)
    def getMonoMass(self): return _msparser.ms_umod_modbrick_getMonoMass(self)
    def setMonoMass(self, *args): return _msparser.ms_umod_modbrick_setMonoMass(self, *args)
    def dropMonoMass(self): return _msparser.ms_umod_modbrick_dropMonoMass(self)
    def getMonoMassSchemaType(self): return _msparser.ms_umod_modbrick_getMonoMassSchemaType(self)
ms_umod_modbrick_swigregister = _msparser.ms_umod_modbrick_swigregister
ms_umod_modbrick_swigregister(ms_umod_modbrick)

class ms_umod_specificity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_specificity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_specificity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_specificity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_specificity
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_specificity_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_specificity_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_specificity_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_specificity_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_specificity_validateDeep(self, *args)
    def getNumberOfNeutralLosses(self): return _msparser.ms_umod_specificity_getNumberOfNeutralLosses(self)
    def clearNeutralLosses(self): return _msparser.ms_umod_specificity_clearNeutralLosses(self)
    def appendNeutralLoss(self, *args): return _msparser.ms_umod_specificity_appendNeutralLoss(self, *args)
    def getNeutralLoss(self, *args): return _msparser.ms_umod_specificity_getNeutralLoss(self, *args)
    def updateNeutralLoss(self, *args): return _msparser.ms_umod_specificity_updateNeutralLoss(self, *args)
    def deleteNeutralLoss(self, *args): return _msparser.ms_umod_specificity_deleteNeutralLoss(self, *args)
    def getNeutralLossSchemaType(self): return _msparser.ms_umod_specificity_getNeutralLossSchemaType(self)
    def getNumberOfPepNeutralLosses(self): return _msparser.ms_umod_specificity_getNumberOfPepNeutralLosses(self)
    def clearPepNeutralLosses(self): return _msparser.ms_umod_specificity_clearPepNeutralLosses(self)
    def appendPepNeutralLoss(self, *args): return _msparser.ms_umod_specificity_appendPepNeutralLoss(self, *args)
    def getPepNeutralLoss(self, *args): return _msparser.ms_umod_specificity_getPepNeutralLoss(self, *args)
    def updatePepNeutralLoss(self, *args): return _msparser.ms_umod_specificity_updatePepNeutralLoss(self, *args)
    def deletePepNeutralLoss(self, *args): return _msparser.ms_umod_specificity_deletePepNeutralLoss(self, *args)
    def getPepNeutralLossSchemaType(self): return _msparser.ms_umod_specificity_getPepNeutralLossSchemaType(self)
    def haveMiscNotes(self): return _msparser.ms_umod_specificity_haveMiscNotes(self)
    def getMiscNotes(self): return _msparser.ms_umod_specificity_getMiscNotes(self)
    def setMiscNotes(self, *args): return _msparser.ms_umod_specificity_setMiscNotes(self, *args)
    def dropMiscNotes(self): return _msparser.ms_umod_specificity_dropMiscNotes(self)
    def getMiscNotesSchemaType(self): return _msparser.ms_umod_specificity_getMiscNotesSchemaType(self)
    def haveHidden(self): return _msparser.ms_umod_specificity_haveHidden(self)
    def isHidden(self): return _msparser.ms_umod_specificity_isHidden(self)
    def setHidden(self, *args): return _msparser.ms_umod_specificity_setHidden(self, *args)
    def dropHidden(self): return _msparser.ms_umod_specificity_dropHidden(self)
    def getHiddenSchemaType(self): return _msparser.ms_umod_specificity_getHiddenSchemaType(self)
    def haveSite(self): return _msparser.ms_umod_specificity_haveSite(self)
    def getSite(self): return _msparser.ms_umod_specificity_getSite(self)
    def setSite(self, *args): return _msparser.ms_umod_specificity_setSite(self, *args)
    def dropSite(self): return _msparser.ms_umod_specificity_dropSite(self)
    def getSiteSchemaType(self): return _msparser.ms_umod_specificity_getSiteSchemaType(self)
    def havePosition(self): return _msparser.ms_umod_specificity_havePosition(self)
    def getPosition(self): return _msparser.ms_umod_specificity_getPosition(self)
    def setPosition(self, *args): return _msparser.ms_umod_specificity_setPosition(self, *args)
    def dropPosition(self): return _msparser.ms_umod_specificity_dropPosition(self)
    def getPositionSchemaType(self): return _msparser.ms_umod_specificity_getPositionSchemaType(self)
    def haveClassification(self): return _msparser.ms_umod_specificity_haveClassification(self)
    def getClassification(self): return _msparser.ms_umod_specificity_getClassification(self)
    def setClassification(self, *args): return _msparser.ms_umod_specificity_setClassification(self, *args)
    def dropClassification(self): return _msparser.ms_umod_specificity_dropClassification(self)
    def getClassificationSchemaType(self): return _msparser.ms_umod_specificity_getClassificationSchemaType(self)
    def haveSpecGroup(self): return _msparser.ms_umod_specificity_haveSpecGroup(self)
    def getSpecGroup(self): return _msparser.ms_umod_specificity_getSpecGroup(self)
    def setSpecGroup(self, *args): return _msparser.ms_umod_specificity_setSpecGroup(self, *args)
    def dropSpecGroup(self): return _msparser.ms_umod_specificity_dropSpecGroup(self)
    def getSpecGroupSchemaType(self): return _msparser.ms_umod_specificity_getSpecGroupSchemaType(self)
ms_umod_specificity_swigregister = _msparser.ms_umod_specificity_swigregister
ms_umod_specificity_swigregister(ms_umod_specificity)

class ms_umod_composition(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_composition, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_composition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_composition(*args)
        try: self.this.append(this)
        except: self.this = this
    def updateMasses(self, *args): return _msparser.ms_umod_composition_updateMasses(self, *args)
    __swig_destroy__ = _msparser.delete_ms_umod_composition
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_composition_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_composition_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_composition_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_composition_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_composition_validateDeep(self, *args)
    def getNumberOfElemRefs(self): return _msparser.ms_umod_composition_getNumberOfElemRefs(self)
    def clearElemRefs(self): return _msparser.ms_umod_composition_clearElemRefs(self)
    def appendElemRef(self, *args): return _msparser.ms_umod_composition_appendElemRef(self, *args)
    def getElemRef(self, *args): return _msparser.ms_umod_composition_getElemRef(self, *args)
    def updateElemRef(self, *args): return _msparser.ms_umod_composition_updateElemRef(self, *args)
    def deleteElemRef(self, *args): return _msparser.ms_umod_composition_deleteElemRef(self, *args)
    def getElemRefSchemaType(self): return _msparser.ms_umod_composition_getElemRefSchemaType(self)
    def haveCompositionString(self): return _msparser.ms_umod_composition_haveCompositionString(self)
    def getCompositionString(self): return _msparser.ms_umod_composition_getCompositionString(self)
    def setCompositionString(self, *args): return _msparser.ms_umod_composition_setCompositionString(self, *args)
    def dropCompositionString(self): return _msparser.ms_umod_composition_dropCompositionString(self)
    def getCompositionStringSchemaType(self): return _msparser.ms_umod_composition_getCompositionStringSchemaType(self)
    def haveAvgeMass(self): return _msparser.ms_umod_composition_haveAvgeMass(self)
    def getAvgeMass(self): return _msparser.ms_umod_composition_getAvgeMass(self)
    def setAvgeMass(self, *args): return _msparser.ms_umod_composition_setAvgeMass(self, *args)
    def dropAvgeMass(self): return _msparser.ms_umod_composition_dropAvgeMass(self)
    def getAvgeMassSchemaType(self): return _msparser.ms_umod_composition_getAvgeMassSchemaType(self)
    def haveMonoMass(self): return _msparser.ms_umod_composition_haveMonoMass(self)
    def getMonoMass(self): return _msparser.ms_umod_composition_getMonoMass(self)
    def setMonoMass(self, *args): return _msparser.ms_umod_composition_setMonoMass(self, *args)
    def dropMonoMass(self): return _msparser.ms_umod_composition_dropMonoMass(self)
    def getMonoMassSchemaType(self): return _msparser.ms_umod_composition_getMonoMassSchemaType(self)
ms_umod_composition_swigregister = _msparser.ms_umod_composition_swigregister
ms_umod_composition_swigregister(ms_umod_composition)

class ms_umod_neutralloss(ms_umod_composition):
    __swig_setmethods__ = {}
    for _s in [ms_umod_composition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_neutralloss, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_umod_composition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_neutralloss, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_neutralloss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_neutralloss
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_neutralloss_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_neutralloss_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_neutralloss_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_neutralloss_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_neutralloss_validateDeep(self, *args)
    def haveFlag(self): return _msparser.ms_umod_neutralloss_haveFlag(self)
    def isFlag(self): return _msparser.ms_umod_neutralloss_isFlag(self)
    def setFlag(self, *args): return _msparser.ms_umod_neutralloss_setFlag(self, *args)
    def dropFlag(self): return _msparser.ms_umod_neutralloss_dropFlag(self)
    def getFlagSchemaType(self): return _msparser.ms_umod_neutralloss_getFlagSchemaType(self)
ms_umod_neutralloss_swigregister = _msparser.ms_umod_neutralloss_swigregister
ms_umod_neutralloss_swigregister(ms_umod_neutralloss)

class ms_umod_elemref(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_elemref, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_elemref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_elemref(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_elemref
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_elemref_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_elemref_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_elemref_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_elemref_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_elemref_validateDeep(self, *args)
    def haveSymbol(self): return _msparser.ms_umod_elemref_haveSymbol(self)
    def getSymbol(self): return _msparser.ms_umod_elemref_getSymbol(self)
    def setSymbol(self, *args): return _msparser.ms_umod_elemref_setSymbol(self, *args)
    def dropSymbol(self): return _msparser.ms_umod_elemref_dropSymbol(self)
    def getSymbolSchemaType(self): return _msparser.ms_umod_elemref_getSymbolSchemaType(self)
    def haveNumber(self): return _msparser.ms_umod_elemref_haveNumber(self)
    def getNumber(self): return _msparser.ms_umod_elemref_getNumber(self)
    def setNumber(self, *args): return _msparser.ms_umod_elemref_setNumber(self, *args)
    def dropNumber(self): return _msparser.ms_umod_elemref_dropNumber(self)
    def getNumberSchemaType(self): return _msparser.ms_umod_elemref_getNumberSchemaType(self)
ms_umod_elemref_swigregister = _msparser.ms_umod_elemref_swigregister
ms_umod_elemref_swigregister(ms_umod_elemref)

class ms_umod_xref(ms_xml_IValidatable):
    __swig_setmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_umod_xref, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_xml_IValidatable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_umod_xref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_umod_xref(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_umod_xref
    __del__ = lambda self : None;
    def defaultValues(self): return _msparser.ms_umod_xref_defaultValues(self)
    def copyFrom(self, *args): return _msparser.ms_umod_xref_copyFrom(self, *args)
    def getSchemaType(self): return _msparser.ms_umod_xref_getSchemaType(self)
    def validateShallow(self, *args): return _msparser.ms_umod_xref_validateShallow(self, *args)
    def validateDeep(self, *args): return _msparser.ms_umod_xref_validateDeep(self, *args)
    def haveText(self): return _msparser.ms_umod_xref_haveText(self)
    def getText(self): return _msparser.ms_umod_xref_getText(self)
    def setText(self, *args): return _msparser.ms_umod_xref_setText(self, *args)
    def dropText(self): return _msparser.ms_umod_xref_dropText(self)
    def getTextSchemaType(self): return _msparser.ms_umod_xref_getTextSchemaType(self)
    def haveSource(self): return _msparser.ms_umod_xref_haveSource(self)
    def getSource(self): return _msparser.ms_umod_xref_getSource(self)
    def setSource(self, *args): return _msparser.ms_umod_xref_setSource(self, *args)
    def dropSource(self): return _msparser.ms_umod_xref_dropSource(self)
    def getSourceSchemaType(self): return _msparser.ms_umod_xref_getSourceSchemaType(self)
    def haveUrl(self): return _msparser.ms_umod_xref_haveUrl(self)
    def getUrl(self): return _msparser.ms_umod_xref_getUrl(self)
    def setUrl(self, *args): return _msparser.ms_umod_xref_setUrl(self, *args)
    def dropUrl(self): return _msparser.ms_umod_xref_dropUrl(self)
    def getUrlSchemaType(self): return _msparser.ms_umod_xref_getUrlSchemaType(self)
ms_umod_xref_swigregister = _msparser.ms_umod_xref_swigregister
ms_umod_xref_swigregister(ms_umod_xref)

class ms_peptide(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_peptide, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_peptide, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_peptide(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_peptide
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_peptide_copyFrom(self, *args)
    def clearReloadableInfo(self): return _msparser.ms_peptide_clearReloadableInfo(self)
    def getQuery(self): return _msparser.ms_peptide_getQuery(self)
    def getRank(self): return _msparser.ms_peptide_getRank(self)
    def setRank(self, *args): return _msparser.ms_peptide_setRank(self, *args)
    def getPrettyRank(self): return _msparser.ms_peptide_getPrettyRank(self)
    def setPrettyRank(self, *args): return _msparser.ms_peptide_setPrettyRank(self, *args)
    def getAnyMatch(self): return _msparser.ms_peptide_getAnyMatch(self)
    def getMissedCleavages(self): return _msparser.ms_peptide_getMissedCleavages(self)
    def getMrCalc(self): return _msparser.ms_peptide_getMrCalc(self)
    def getDelta(self): return _msparser.ms_peptide_getDelta(self)
    def getObserved(self): return _msparser.ms_peptide_getObserved(self)
    def getMrExperimental(self): return _msparser.ms_peptide_getMrExperimental(self)
    def getCharge(self): return _msparser.ms_peptide_getCharge(self)
    def getNumIonsMatched(self): return _msparser.ms_peptide_getNumIonsMatched(self)
    def getPeptideStr(self, substituteAmbiguous = True): return _msparser.ms_peptide_getPeptideStr(self, substituteAmbiguous)
    def getPeptideLength(self): return _msparser.ms_peptide_getPeptideLength(self)
    def getPeaksUsedFromIons1(self): return _msparser.ms_peptide_getPeaksUsedFromIons1(self)
    def getPeaksUsedFromIons2(self): return _msparser.ms_peptide_getPeaksUsedFromIons2(self)
    def getPeaksUsedFromIons3(self): return _msparser.ms_peptide_getPeaksUsedFromIons3(self)
    def getVarModsStr(self): return _msparser.ms_peptide_getVarModsStr(self)
    def setVarModsStr(self, *args): return _msparser.ms_peptide_setVarModsStr(self, *args)
    def getSummedModsStr(self): return _msparser.ms_peptide_getSummedModsStr(self)
    def setSummedModsStr(self, *args): return _msparser.ms_peptide_setSummedModsStr(self, *args)
    def getIonsScore(self): return _msparser.ms_peptide_getIonsScore(self)
    def getSeriesUsedStr(self): return _msparser.ms_peptide_getSeriesUsedStr(self)
    def isSamePeptideStr(self, *args): return _msparser.ms_peptide_isSamePeptideStr(self, *args)
    def isSameVarModsStr(self, *args): return _msparser.ms_peptide_isSameVarModsStr(self, *args)
    def isSameSummedModsStr(self, *args): return _msparser.ms_peptide_isSameSummedModsStr(self, *args)
    def getFirstProtAppearedIn(self): return _msparser.ms_peptide_getFirstProtAppearedIn(self)
    def setFirstProtAppearedIn(self, *args): return _msparser.ms_peptide_setFirstProtAppearedIn(self, *args)
    def getIonsIntensity(self): return _msparser.ms_peptide_getIonsIntensity(self)
    def setIonsIntensity(self, *args): return _msparser.ms_peptide_setIonsIntensity(self, *args)
    def getProtein(self, *args): return _msparser.ms_peptide_getProtein(self, *args)
    def getProteins(self): return _msparser.ms_peptide_getProteins(self)
    def getNumProteins(self): return _msparser.ms_peptide_getNumProteins(self)
    def addProtein(self, *args): return _msparser.ms_peptide_addProtein(self, *args)
    def getAmbiguityString(self): return _msparser.ms_peptide_getAmbiguityString(self)
    def setAmbiguityString(self, *args): return _msparser.ms_peptide_setAmbiguityString(self, *args)
    def getPrimaryNlStr(self): return _msparser.ms_peptide_getPrimaryNlStr(self)
    def setPrimaryNlStr(self, *args): return _msparser.ms_peptide_setPrimaryNlStr(self, *args)
    def getSummedModsNlStr(self): return _msparser.ms_peptide_getSummedModsNlStr(self)
    def setSummedModsNlStr(self, *args): return _msparser.ms_peptide_setSummedModsNlStr(self, *args)
    def getIsFromErrorTolerant(self): return _msparser.ms_peptide_getIsFromErrorTolerant(self)
    def setIsFromErrorTolerant(self, *args): return _msparser.ms_peptide_setIsFromErrorTolerant(self, *args)
    def getComponentStr(self): return _msparser.ms_peptide_getComponentStr(self)
    def setComponentStr(self, *args): return _msparser.ms_peptide_setComponentStr(self, *args)
    def getLessThanMinPepLen(self): return _msparser.ms_peptide_getLessThanMinPepLen(self)
    def getNum13C(self, *args): return _msparser.ms_peptide_getNum13C(self, *args)
    def setPercolatorScores(self, *args): return _msparser.ms_peptide_setPercolatorScores(self, *args)
    def anyPercolatorResults(self): return _msparser.ms_peptide_anyPercolatorResults(self)
    def getPercolatorScores(self): return _msparser.ms_peptide_getPercolatorScores(self)
ms_peptide_swigregister = _msparser.ms_peptide_swigregister
ms_peptide_swigregister(ms_peptide)

def ms_peptide_0():
    val = _msparser.new_ms_peptide_0()
    return val

class ms_mascotresfile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_mascotresfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_mascotresfile, name)
    __repr__ = _swig_repr
    SEC_PARAMETERS = _msparser.ms_mascotresfile_SEC_PARAMETERS
    SEC_HEADER = _msparser.ms_mascotresfile_SEC_HEADER
    SEC_MASSES = _msparser.ms_mascotresfile_SEC_MASSES
    SEC_SUMMARY = _msparser.ms_mascotresfile_SEC_SUMMARY
    SEC_MIXTURE = _msparser.ms_mascotresfile_SEC_MIXTURE
    SEC_PEPTIDES = _msparser.ms_mascotresfile_SEC_PEPTIDES
    SEC_PROTEINS = _msparser.ms_mascotresfile_SEC_PROTEINS
    SEC_QUERY1 = _msparser.ms_mascotresfile_SEC_QUERY1
    SEC_QUANTITATION = _msparser.ms_mascotresfile_SEC_QUANTITATION
    SEC_UNIMOD = _msparser.ms_mascotresfile_SEC_UNIMOD
    SEC_ENZYME = _msparser.ms_mascotresfile_SEC_ENZYME
    SEC_TAXONOMY = _msparser.ms_mascotresfile_SEC_TAXONOMY
    SEC_DECOYSUMMARY = _msparser.ms_mascotresfile_SEC_DECOYSUMMARY
    SEC_DECOYMIXTURE = _msparser.ms_mascotresfile_SEC_DECOYMIXTURE
    SEC_DECOYPEPTIDES = _msparser.ms_mascotresfile_SEC_DECOYPEPTIDES
    SEC_DECOYPROTEINS = _msparser.ms_mascotresfile_SEC_DECOYPROTEINS
    SEC_ERRTOLSUMMARY = _msparser.ms_mascotresfile_SEC_ERRTOLSUMMARY
    SEC_ERRTOLPEPTIDES = _msparser.ms_mascotresfile_SEC_ERRTOLPEPTIDES
    SEC_INDEX = _msparser.ms_mascotresfile_SEC_INDEX
    SEC_NUMSECTIONS = _msparser.ms_mascotresfile_SEC_NUMSECTIONS
    ERR_NO_ERROR = _msparser.ms_mascotresfile_ERR_NO_ERROR
    ERR_NOMEM = _msparser.ms_mascotresfile_ERR_NOMEM
    ERR_NOSUCHFILE = _msparser.ms_mascotresfile_ERR_NOSUCHFILE
    ERR_READINGFILE = _msparser.ms_mascotresfile_ERR_READINGFILE
    ERR_QUERYOUTOFRANGE = _msparser.ms_mascotresfile_ERR_QUERYOUTOFRANGE
    ERR_MISSINGENTRY = _msparser.ms_mascotresfile_ERR_MISSINGENTRY
    ERR_PEPSUMMPEPGET = _msparser.ms_mascotresfile_ERR_PEPSUMMPEPGET
    ERR_PEPTIDESTR = _msparser.ms_mascotresfile_ERR_PEPTIDESTR
    ERR_ACCINPEPTIDESTR = _msparser.ms_mascotresfile_ERR_ACCINPEPTIDESTR
    ERR_PROTSUMM = _msparser.ms_mascotresfile_ERR_PROTSUMM
    ERR_PROTSUMMPEP = _msparser.ms_mascotresfile_ERR_PROTSUMMPEP
    ERR_ADDPEPTIDES = _msparser.ms_mascotresfile_ERR_ADDPEPTIDES
    ERR_MISSINGHIT = _msparser.ms_mascotresfile_ERR_MISSINGHIT
    ERR_MISSINGSECTION = _msparser.ms_mascotresfile_ERR_MISSINGSECTION
    ERR_MISSINGSECTIONEND = _msparser.ms_mascotresfile_ERR_MISSINGSECTIONEND
    ERR_MALFORMED_ERR_TOL = _msparser.ms_mascotresfile_ERR_MALFORMED_ERR_TOL
    ERR_NO_ERR_TOL_PARENT = _msparser.ms_mascotresfile_ERR_NO_ERR_TOL_PARENT
    ERR_NULL_ACC_PEP_SUM = _msparser.ms_mascotresfile_ERR_NULL_ACC_PEP_SUM
    ERR_NULL_ACC_PROT_SUM = _msparser.ms_mascotresfile_ERR_NULL_ACC_PROT_SUM
    ERR_DUPE_ACCESSION = _msparser.ms_mascotresfile_ERR_DUPE_ACCESSION
    ERR_UNASSIGNED_PROG = _msparser.ms_mascotresfile_ERR_UNASSIGNED_PROG
    ERR_UNASSIGNED_RANGE = _msparser.ms_mascotresfile_ERR_UNASSIGNED_RANGE
    ERR_UNASSIGNED_UNK = _msparser.ms_mascotresfile_ERR_UNASSIGNED_UNK
    ERR_NO_UNIGENE_FILE = _msparser.ms_mascotresfile_ERR_NO_UNIGENE_FILE
    ERR_DUPLICATE_KEY = _msparser.ms_mascotresfile_ERR_DUPLICATE_KEY
    ERR_OLDRESULTSFILE = _msparser.ms_mascotresfile_ERR_OLDRESULTSFILE
    ERR_MALFORMED_TAG = _msparser.ms_mascotresfile_ERR_MALFORMED_TAG
    ERR_MALFORMED_DRANGE = _msparser.ms_mascotresfile_ERR_MALFORMED_DRANGE
    ERR_INVALID_NUMQUERIES = _msparser.ms_mascotresfile_ERR_INVALID_NUMQUERIES
    ERR_MALFORMED_TERMS = _msparser.ms_mascotresfile_ERR_MALFORMED_TERMS
    ERR_INVALID_RESFILE = _msparser.ms_mascotresfile_ERR_INVALID_RESFILE
    ERR_INVALID_PROTDB = _msparser.ms_mascotresfile_ERR_INVALID_PROTDB
    ERR_UNIGENE_MULTIDB = _msparser.ms_mascotresfile_ERR_UNIGENE_MULTIDB
    ERR_INVALID_CACHE_DIR = _msparser.ms_mascotresfile_ERR_INVALID_CACHE_DIR
    ERR_FAIL_OPEN_DAT_FILE = _msparser.ms_mascotresfile_ERR_FAIL_OPEN_DAT_FILE
    ERR_MISSING_CDB_FILE = _msparser.ms_mascotresfile_ERR_MISSING_CDB_FILE
    ERR_FAIL_MK_CACHE_DIR = _msparser.ms_mascotresfile_ERR_FAIL_MK_CACHE_DIR
    ERR_FAIL_MK_CDB_FILE = _msparser.ms_mascotresfile_ERR_FAIL_MK_CDB_FILE
    ERR_FAIL_CLOSE_FILE = _msparser.ms_mascotresfile_ERR_FAIL_CLOSE_FILE
    ERR_FAIL_CDB_INIT = _msparser.ms_mascotresfile_ERR_FAIL_CDB_INIT
    ERR_INVALID_CDB_FILE = _msparser.ms_mascotresfile_ERR_INVALID_CDB_FILE
    ERR_WRITE_CDB_FILE = _msparser.ms_mascotresfile_ERR_WRITE_CDB_FILE
    ERR_CDB_TOO_LARGE = _msparser.ms_mascotresfile_ERR_CDB_TOO_LARGE
    ERR_NEED_64_BIT = _msparser.ms_mascotresfile_ERR_NEED_64_BIT
    ERR_CDB_64_BIT_REMAKE = _msparser.ms_mascotresfile_ERR_CDB_64_BIT_REMAKE
    ERR_CDB_OLD_VER_RETRY = _msparser.ms_mascotresfile_ERR_CDB_OLD_VER_RETRY
    ERR_CDB_OLD_VER_NO_RETRY = _msparser.ms_mascotresfile_ERR_CDB_OLD_VER_NO_RETRY
    ERR_CDB_INCOMPLETE_RETRY = _msparser.ms_mascotresfile_ERR_CDB_INCOMPLETE_RETRY
    ERR_CDB_INCOMPLETE_NO_RETRY = _msparser.ms_mascotresfile_ERR_CDB_INCOMPLETE_NO_RETRY
    ERR_CDB_BEING_CREATED = _msparser.ms_mascotresfile_ERR_CDB_BEING_CREATED
    ERR_CDB_FAIL_REMOVE = _msparser.ms_mascotresfile_ERR_CDB_FAIL_REMOVE
    ERR_CDB_FAIL_LOCK = _msparser.ms_mascotresfile_ERR_CDB_FAIL_LOCK
    ERR_CDB_FAIL_UNLOCK = _msparser.ms_mascotresfile_ERR_CDB_FAIL_UNLOCK
    ERR_CDB_SOURCE_CHANGE_RETRY = _msparser.ms_mascotresfile_ERR_CDB_SOURCE_CHANGE_RETRY
    ERR_CDB_SOURCE_CHANGE_NO_RETRY = _msparser.ms_mascotresfile_ERR_CDB_SOURCE_CHANGE_NO_RETRY
    ERR_MISSING_PERCOLATOR_FILE = _msparser.ms_mascotresfile_ERR_MISSING_PERCOLATOR_FILE
    ERR_CANNOT_APPEND_RESFILE = _msparser.ms_mascotresfile_ERR_CANNOT_APPEND_RESFILE
    ERR_CANNOT_APPEND_RESFILE_NO_FNAMES = _msparser.ms_mascotresfile_ERR_CANNOT_APPEND_RESFILE_NO_FNAMES
    ERR_RESULTS_NOT_CREATED = _msparser.ms_mascotresfile_ERR_RESULTS_NOT_CREATED
    ERR_LASTONE = _msparser.ms_mascotresfile_ERR_LASTONE
    RESFILE_NOFLAG = _msparser.ms_mascotresfile_RESFILE_NOFLAG
    RESFILE_USE_CACHE = _msparser.ms_mascotresfile_RESFILE_USE_CACHE
    RESFILE_CACHE_IGNORE_ACC_DUPES = _msparser.ms_mascotresfile_RESFILE_CACHE_IGNORE_ACC_DUPES
    RESFILE_USE_PARENT_PARAMS = _msparser.ms_mascotresfile_RESFILE_USE_PARENT_PARAMS
    PERCOLATOR_INPUT_FILE = _msparser.ms_mascotresfile_PERCOLATOR_INPUT_FILE
    PERCOLATOR_OUTPUT_TARGET = _msparser.ms_mascotresfile_PERCOLATOR_OUTPUT_TARGET
    PERCOLATOR_OUTPUT_DECOY = _msparser.ms_mascotresfile_PERCOLATOR_OUTPUT_DECOY
    KA_CREATEINDEX_CI = _msparser.ms_mascotresfile_KA_CREATEINDEX_CI
    KA_READFILE_RF = _msparser.ms_mascotresfile_KA_READFILE_RF
    KA_ASSIGNPROTEINS_AP = _msparser.ms_mascotresfile_KA_ASSIGNPROTEINS_AP
    KA_GROUPPROTEINS_GP = _msparser.ms_mascotresfile_KA_GROUPPROTEINS_GP
    KA_UNASSIGNEDLIST_UL = _msparser.ms_mascotresfile_KA_UNASSIGNEDLIST_UL
    KA_QUANTITATION = _msparser.ms_mascotresfile_KA_QUANTITATION
    KA_CREATECACHE_CC = _msparser.ms_mascotresfile_KA_CREATECACHE_CC
    KA_THRESHFORFDR_FDR = _msparser.ms_mascotresfile_KA_THRESHFORFDR_FDR
    KA_LAST = _msparser.ms_mascotresfile_KA_LAST
    XML_SCHEMA_QUANTITATION = _msparser.ms_mascotresfile_XML_SCHEMA_QUANTITATION
    XML_SCHEMA_UNIMOD = _msparser.ms_mascotresfile_XML_SCHEMA_UNIMOD
    XML_SCHEMA_LAST = _msparser.ms_mascotresfile_XML_SCHEMA_LAST
    def __init__(self, *args): 
        this = _msparser.new_ms_mascotresfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_mascotresfile
    __del__ = lambda self : None;
    def getMSParserVersion(self): return _msparser.ms_mascotresfile_getMSParserVersion(self)
    def versionGreaterOrEqual(self, *args): return _msparser.ms_mascotresfile_versionGreaterOrEqual(self, *args)
    def appendResfile(self, *args): return _msparser.ms_mascotresfile_appendResfile(self, *args)
    def getResfile(self, *args): return _msparser.ms_mascotresfile_getResfile(self, *args)
    def getNumberOfResfiles(self): return _msparser.ms_mascotresfile_getNumberOfResfiles(self)
    def doesSectionExist(self, *args): return _msparser.ms_mascotresfile_doesSectionExist(self, *args)
    def anyPeptideSummaryMatches(self, *args): return _msparser.ms_mascotresfile_anyPeptideSummaryMatches(self, *args)
    def getSectionValue(self, *args): return _msparser.ms_mascotresfile_getSectionValue(self, *args)
    def getSectionValueInt(self, *args): return _msparser.ms_mascotresfile_getSectionValueInt(self, *args)
    def getSectionValueDouble(self, *args): return _msparser.ms_mascotresfile_getSectionValueDouble(self, *args)
    def getSectionValueStr(self, *args): return _msparser.ms_mascotresfile_getSectionValueStr(self, *args)
    def getQuerySectionValue(self, *args): return _msparser.ms_mascotresfile_getQuerySectionValue(self, *args)
    def getQuerySectionValueInt(self, *args): return _msparser.ms_mascotresfile_getQuerySectionValueInt(self, *args)
    def getQuerySectionValueDouble(self, *args): return _msparser.ms_mascotresfile_getQuerySectionValueDouble(self, *args)
    def getQuerySectionValueStr(self, *args): return _msparser.ms_mascotresfile_getQuerySectionValueStr(self, *args)
    def getJobNumber(self, resfileID = 1): return _msparser.ms_mascotresfile_getJobNumber(self, resfileID)
    def enumerateSectionKeys(self, *args): return _msparser.ms_mascotresfile_enumerateSectionKeys(self, *args)
    def enumerateQuerySectionKeys(self, *args): return _msparser.ms_mascotresfile_enumerateQuerySectionKeys(self, *args)
    def getNumberOfErrors(self): return _msparser.ms_mascotresfile_getNumberOfErrors(self)
    def getErrorNumber(self, *args): return _msparser.ms_mascotresfile_getErrorNumber(self, *args)
    def getLastError(self): return _msparser.ms_mascotresfile_getLastError(self)
    def getErrorString(self, *args): return _msparser.ms_mascotresfile_getErrorString(self, *args)
    def getLastErrorString(self): return _msparser.ms_mascotresfile_getLastErrorString(self)
    def resetKeepAlive(self, *args): return _msparser.ms_mascotresfile_resetKeepAlive(self, *args)
    def getNextSubStr(self, *args): return _msparser.ms_mascotresfile_getNextSubStr(self, *args)
    def getNumQueries(self, resfileID = 0): return _msparser.ms_mascotresfile_getNumQueries(self, resfileID)
    def getNumHits(self, *args): return _msparser.ms_mascotresfile_getNumHits(self, *args)
    def getNumSeqs(self, idx = 0): return _msparser.ms_mascotresfile_getNumSeqs(self, idx)
    def getNumSeqsAfterTax(self, idx = 0): return _msparser.ms_mascotresfile_getNumSeqsAfterTax(self, idx)
    def getNumEtSeqsSearched(self, idx = 0): return _msparser.ms_mascotresfile_getNumEtSeqsSearched(self, idx)
    def getNumResidues(self, idx = 0): return _msparser.ms_mascotresfile_getNumResidues(self, idx)
    def getExecTime(self): return _msparser.ms_mascotresfile_getExecTime(self)
    def getDate(self): return _msparser.ms_mascotresfile_getDate(self)
    def getMascotVer(self): return _msparser.ms_mascotresfile_getMascotVer(self)
    def getFastaVer(self, idx = 1): return _msparser.ms_mascotresfile_getFastaVer(self, idx)
    def getFastaPath(self, idx = 1): return _msparser.ms_mascotresfile_getFastaPath(self, idx)
    def getUniqueTaskID(self): return _msparser.ms_mascotresfile_getUniqueTaskID(self)
    def isPMF(self): return _msparser.ms_mascotresfile_isPMF(self)
    def isMSMS(self): return _msparser.ms_mascotresfile_isMSMS(self)
    def isSQ(self): return _msparser.ms_mascotresfile_isSQ(self)
    def isErrorTolerant(self): return _msparser.ms_mascotresfile_isErrorTolerant(self)
    def anyPMF(self): return _msparser.ms_mascotresfile_anyPMF(self)
    def anyMSMS(self): return _msparser.ms_mascotresfile_anyMSMS(self)
    def anySQ(self): return _msparser.ms_mascotresfile_anySQ(self)
    def anyTag(self): return _msparser.ms_mascotresfile_anyTag(self)
    def getObservedMass(self, *args): return _msparser.ms_mascotresfile_getObservedMass(self, *args)
    def getObservedCharge(self, *args): return _msparser.ms_mascotresfile_getObservedCharge(self, *args)
    def getObservedMrValue(self, *args): return _msparser.ms_mascotresfile_getObservedMrValue(self, *args)
    def getObservedIntensity(self, *args): return _msparser.ms_mascotresfile_getObservedIntensity(self, *args)
    def getRepeatSearchString(self, *args): return _msparser.ms_mascotresfile_getRepeatSearchString(self, *args)
    def getFileName(self, id = 1): return _msparser.ms_mascotresfile_getFileName(self, id)
    def params(self): return _msparser.ms_mascotresfile_params(self)
    def getQuantitation(self, *args): return _msparser.ms_mascotresfile_getQuantitation(self, *args)
    def getQuantitationMethod(self, *args): return _msparser.ms_mascotresfile_getQuantitationMethod(self, *args)
    def setXMLschemaFilePath(self, *args): return _msparser.ms_mascotresfile_setXMLschemaFilePath(self, *args)
    def getXMLschemaFilePath(self, *args): return _msparser.ms_mascotresfile_getXMLschemaFilePath(self, *args)
    def getUnimod(self, *args): return _msparser.ms_mascotresfile_getUnimod(self, *args)
    def getMasses(self, *args): return _msparser.ms_mascotresfile_getMasses(self, *args)
    def getEnzyme(self, *args): return _msparser.ms_mascotresfile_getEnzyme(self, *args)
    def getTaxonomy(self, *args): return _msparser.ms_mascotresfile_getTaxonomy(self, *args)
    def getKeepAlive(self, *args): return _msparser.ms_mascotresfile_getKeepAlive(self, *args)
    def outputKeepAlive(self, *args): return _msparser.ms_mascotresfile_outputKeepAlive(self, *args)
    def getCacheDirectory(self, processed = True): return _msparser.ms_mascotresfile_getCacheDirectory(self, processed)
    def getCacheFileName(self): return _msparser.ms_mascotresfile_getCacheFileName(self)
    __swig_getmethods__["willCreateCache"] = lambda x: _msparser.ms_mascotresfile_willCreateCache
    if _newclass:willCreateCache = staticmethod(_msparser.ms_mascotresfile_willCreateCache)
    def get_ms_mascotresults_params(self, *args): return _msparser.ms_mascotresfile_get_ms_mascotresults_params(self, *args)
    __swig_getmethods__["staticGetPercolatorFileNames"] = lambda x: _msparser.ms_mascotresfile_staticGetPercolatorFileNames
    if _newclass:staticGetPercolatorFileNames = staticmethod(_msparser.ms_mascotresfile_staticGetPercolatorFileNames)
    def setPercolatorFeatures(self, *args): return _msparser.ms_mascotresfile_setPercolatorFeatures(self, *args)
    def getPercolatorFileNames(self): return _msparser.ms_mascotresfile_getPercolatorFileNames(self)
    def getSrcQueryAndFileIdForMultiFile(self, *args): return _msparser.ms_mascotresfile_getSrcQueryAndFileIdForMultiFile(self, *args)
    def getMultiFileQueryNumber(self, *args): return _msparser.ms_mascotresfile_getMultiFileQueryNumber(self, *args)
    def appendErrors(self, *args): return _msparser.ms_mascotresfile_appendErrors(self, *args)
    def getEncodedPercolatorFeatures(self): return _msparser.ms_mascotresfile_getEncodedPercolatorFeatures(self)
ms_mascotresfile_swigregister = _msparser.ms_mascotresfile_swigregister
ms_mascotresfile_swigregister(ms_mascotresfile)

def ms_mascotresfile_willCreateCache(*args):
  return _msparser.ms_mascotresfile_willCreateCache(*args)
ms_mascotresfile_willCreateCache = _msparser.ms_mascotresfile_willCreateCache

def ms_mascotresfile_staticGetPercolatorFileNames(*args):
  return _msparser.ms_mascotresfile_staticGetPercolatorFileNames(*args)
ms_mascotresfile_staticGetPercolatorFileNames = _msparser.ms_mascotresfile_staticGetPercolatorFileNames

class ms_protein(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_protein, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_protein, name)
    __repr__ = _swig_repr
    GROUP_UNKNOWN = _msparser.ms_protein_GROUP_UNKNOWN
    GROUP_NO = _msparser.ms_protein_GROUP_NO
    GROUP_SUBSET = _msparser.ms_protein_GROUP_SUBSET
    GROUP_COMPLETE = _msparser.ms_protein_GROUP_COMPLETE
    GROUP_FAMILY = _msparser.ms_protein_GROUP_FAMILY
    DUPE_NotDuplicate = _msparser.ms_protein_DUPE_NotDuplicate
    DUPE_Duplicate = _msparser.ms_protein_DUPE_Duplicate
    DUPE_DuplicateSameQuery = _msparser.ms_protein_DUPE_DuplicateSameQuery
    DUPE_HighestScoringDuplicate = _msparser.ms_protein_DUPE_HighestScoringDuplicate
    MASS_NON_SELECT_NON_MATCH = _msparser.ms_protein_MASS_NON_SELECT_NON_MATCH
    MASS_SELECT_NON_MATCH = _msparser.ms_protein_MASS_SELECT_NON_MATCH
    MASS_NON_SELECT_MATCH = _msparser.ms_protein_MASS_NON_SELECT_MATCH
    MASS_SELECT_MATCH = _msparser.ms_protein_MASS_SELECT_MATCH
    DPF_SEQUENCE = _msparser.ms_protein_DPF_SEQUENCE
    DPF_CHARGE = _msparser.ms_protein_DPF_CHARGE
    DPF_MODS = _msparser.ms_protein_DPF_MODS
    DPF_UNIQUE = _msparser.ms_protein_DPF_UNIQUE
    def __init__(self, *args): 
        this = _msparser.new_ms_protein(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_protein
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_protein_copyFrom(self, *args)
    def getAccession(self): return _msparser.ms_protein_getAccession(self)
    def getDB(self): return _msparser.ms_protein_getDB(self)
    def setDB(self, *args): return _msparser.ms_protein_setDB(self, *args)
    def getScore(self): return _msparser.ms_protein_getScore(self)
    def getNonMudpitScore(self): return _msparser.ms_protein_getNonMudpitScore(self)
    def getNumPeptides(self): return _msparser.ms_protein_getNumPeptides(self)
    def getNumDisplayPeptides(self, aboveThreshold = False): return _msparser.ms_protein_getNumDisplayPeptides(self, aboveThreshold)
    def getGrouping(self): return _msparser.ms_protein_getGrouping(self)
    def setGrouping(self, *args): return _msparser.ms_protein_setGrouping(self, *args)
    def getForCache(self, *args): return _msparser.ms_protein_getForCache(self, *args)
    def setFromCache(self, *args): return _msparser.ms_protein_setFromCache(self, *args)
    def getPeptideQuery(self, *args): return _msparser.ms_protein_getPeptideQuery(self, *args)
    def getPeptideP(self, *args): return _msparser.ms_protein_getPeptideP(self, *args)
    def getPepNumber(self, *args): return _msparser.ms_protein_getPepNumber(self, *args)
    def getPeptideFrame(self, *args): return _msparser.ms_protein_getPeptideFrame(self, *args)
    def getPeptideStart(self, *args): return _msparser.ms_protein_getPeptideStart(self, *args)
    def getPeptideEnd(self, *args): return _msparser.ms_protein_getPeptideEnd(self, *args)
    def getPeptideMultiplicity(self, *args): return _msparser.ms_protein_getPeptideMultiplicity(self, *args)
    def getPeptideDuplicate(self, *args): return _msparser.ms_protein_getPeptideDuplicate(self, *args)
    def getPeptideIonsScore(self, *args): return _msparser.ms_protein_getPeptideIonsScore(self, *args)
    def getPeptideIsBold(self, *args): return _msparser.ms_protein_getPeptideIsBold(self, *args)
    def setPeptideIsBold(self, *args): return _msparser.ms_protein_setPeptideIsBold(self, *args)
    def getPeptideShowCheckbox(self, *args): return _msparser.ms_protein_getPeptideShowCheckbox(self, *args)
    def setPeptideShowCheckbox(self, *args): return _msparser.ms_protein_setPeptideShowCheckbox(self, *args)
    def getPeptideComponentID(self, *args): return _msparser.ms_protein_getPeptideComponentID(self, *args)
    def getPeptideResidueBefore(self, *args): return _msparser.ms_protein_getPeptideResidueBefore(self, *args)
    def getPeptideResidueAfter(self, *args): return _msparser.ms_protein_getPeptideResidueAfter(self, *args)
    def isASimilarProtein(self, *args): return _msparser.ms_protein_isASimilarProtein(self, *args)
    def getSimilarProteinName(self): return _msparser.ms_protein_getSimilarProteinName(self)
    def getSimilarProteinDB(self): return _msparser.ms_protein_getSimilarProteinDB(self)
    def isSimilarProtein(self, *args): return _msparser.ms_protein_isSimilarProtein(self, *args)
    def getSimilarProteins(self, *args): return _msparser.ms_protein_getSimilarProteins(self, *args)
    def setSimilarProtein(self, *args): return _msparser.ms_protein_setSimilarProtein(self, *args)
    def addOnePeptide(self, *args): return _msparser.ms_protein_addOnePeptide(self, *args)
    def getCoverage(self): return _msparser.ms_protein_getCoverage(self)
    def anyMatchToQuery(self, *args): return _msparser.ms_protein_anyMatchToQuery(self, *args)
    def anyMatchToQueryAndP(self, *args): return _msparser.ms_protein_anyMatchToQueryAndP(self, *args)
    def getUnmatchedMasses(self, *args): return _msparser.ms_protein_getUnmatchedMasses(self, *args)
    def getMasses(self, *args): return _msparser.ms_protein_getMasses(self, *args)
    def getFrame(self): return _msparser.ms_protein_getFrame(self)
    def anyBoldRedPeptides(self, *args): return _msparser.ms_protein_anyBoldRedPeptides(self, *args)
    def isUnigene(self): return _msparser.ms_protein_isUnigene(self)
    def setIsUnigeneEntry(self): return _msparser.ms_protein_setIsUnigeneEntry(self)
    def isPMFMixture(self): return _msparser.ms_protein_isPMFMixture(self)
    def setIsPMFMixture(self): return _msparser.ms_protein_setIsPMFMixture(self)
    def sortPeptides(self, *args): return _msparser.ms_protein_sortPeptides(self, *args)
    def getNumComponents(self): return _msparser.ms_protein_getNumComponents(self)
    def getComponent(self, *args): return _msparser.ms_protein_getComponent(self, *args)
    def getProteinSummaryHit(self): return _msparser.ms_protein_getProteinSummaryHit(self)
    def getRMSDeltas(self, *args): return _msparser.ms_protein_getRMSDeltas(self, *args)
    def getHitNumber(self): return _msparser.ms_protein_getHitNumber(self)
    def setHitNumber(self, *args): return _msparser.ms_protein_setHitNumber(self, *args)
    def getLongestPeptideLen(self): return _msparser.ms_protein_getLongestPeptideLen(self)
    def getNumDistinctPeptides(self, *args): return _msparser.ms_protein_getNumDistinctPeptides(self, *args)
    def getLongestSigPeptideLen(self): return _msparser.ms_protein_getLongestSigPeptideLen(self)
    def getNumObservedForEmPAI(self): return _msparser.ms_protein_getNumObservedForEmPAI(self)
    def getAccessionStr(self): return _msparser.ms_protein_getAccessionStr(self)
ms_protein_swigregister = _msparser.ms_protein_swigregister
ms_protein_swigregister(ms_protein)

class ms_mascotresults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_mascotresults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_mascotresults, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MSRES_NOFLAG = _msparser.ms_mascotresults_MSRES_NOFLAG
    MSRES_GROUP_PROTEINS = _msparser.ms_mascotresults_MSRES_GROUP_PROTEINS
    MSRES_SHOW_SUBSETS = _msparser.ms_mascotresults_MSRES_SHOW_SUBSETS
    MSRES_SUBSETS_DIFF_PROT = _msparser.ms_mascotresults_MSRES_SUBSETS_DIFF_PROT
    MSRES_REQUIRE_BOLD_RED = _msparser.ms_mascotresults_MSRES_REQUIRE_BOLD_RED
    MSRES_SHOW_ALL_FROM_ERR_TOL = _msparser.ms_mascotresults_MSRES_SHOW_ALL_FROM_ERR_TOL
    MSRES_IGNORE_PMF_MIXTURE = _msparser.ms_mascotresults_MSRES_IGNORE_PMF_MIXTURE
    MSRES_MUDPIT_PROTEIN_SCORE = _msparser.ms_mascotresults_MSRES_MUDPIT_PROTEIN_SCORE
    MSRES_DECOY = _msparser.ms_mascotresults_MSRES_DECOY
    MSRES_INTEGRATED_ERR_TOL = _msparser.ms_mascotresults_MSRES_INTEGRATED_ERR_TOL
    MSRES_ERR_TOL = _msparser.ms_mascotresults_MSRES_ERR_TOL
    MSRES_MAXHITS_OVERRIDES_MINPROB = _msparser.ms_mascotresults_MSRES_MAXHITS_OVERRIDES_MINPROB
    MSRES_CLUSTER_PROTEINS = _msparser.ms_mascotresults_MSRES_CLUSTER_PROTEINS
    MSRES_DUPE_INCL_IN_SCORE_NONE = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_NONE
    MSRES_DUPE_INCL_IN_SCORE_A = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_A
    MSRES_DUPE_INCL_IN_SCORE_B = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_B
    MSRES_DUPE_INCL_IN_SCORE_C = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_C
    MSRES_DUPE_INCL_IN_SCORE_D = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_D
    MSRES_DUPE_INCL_IN_SCORE_E = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_E
    MSRES_DUPE_INCL_IN_SCORE_F = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_F
    MSRES_DUPE_INCL_IN_SCORE_G = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_G
    MSRES_DUPE_INCL_IN_SCORE_H = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_H
    MSRES_DUPE_INCL_IN_SCORE_I = _msparser.ms_mascotresults_MSRES_DUPE_INCL_IN_SCORE_I
    MSRES_DUPE_REMOVE_NONE = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_NONE
    MSRES_DUPE_REMOVE_A = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_A
    MSRES_DUPE_REMOVE_B = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_B
    MSRES_DUPE_REMOVE_C = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_C
    MSRES_DUPE_REMOVE_D = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_D
    MSRES_DUPE_REMOVE_E = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_E
    MSRES_DUPE_REMOVE_F = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_F
    MSRES_DUPE_REMOVE_G = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_G
    MSRES_DUPE_REMOVE_H = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_H
    MSRES_DUPE_REMOVE_I = _msparser.ms_mascotresults_MSRES_DUPE_REMOVE_I
    MSRES_DUPE_DEFAULT = _msparser.ms_mascotresults_MSRES_DUPE_DEFAULT
    QUERY = _msparser.ms_mascotresults_QUERY
    SCORE = _msparser.ms_mascotresults_SCORE
    INTENSITY = _msparser.ms_mascotresults_INTENSITY
    dupe_query_same = _msparser.ms_mascotresults_dupe_query_same
    dupe_seq_same = _msparser.ms_mascotresults_dupe_seq_same
    dupe_mods_same = _msparser.ms_mascotresults_dupe_mods_same
    dupe_pos_same = _msparser.ms_mascotresults_dupe_pos_same
    TCM_FIRST_VALUE = _msparser.ms_mascotresults_TCM_FIRST_VALUE
    TCM_PAIRWISE_SINGLE = _msparser.ms_mascotresults_TCM_PAIRWISE_SINGLE
    TCM_PAIRWISE_MAXIMUM = _msparser.ms_mascotresults_TCM_PAIRWISE_MAXIMUM
    TCM_PAIRWISE_AVERAGE = _msparser.ms_mascotresults_TCM_PAIRWISE_AVERAGE
    TCM_LAST_VALUE = _msparser.ms_mascotresults_TCM_LAST_VALUE
    FT_PEPTIDE_EXP_MZ = _msparser.ms_mascotresults_FT_PEPTIDE_EXP_MZ
    FT_PEPTIDE_EXP_MR = _msparser.ms_mascotresults_FT_PEPTIDE_EXP_MR
    FT_PEPTIDE_CALC_MZ = _msparser.ms_mascotresults_FT_PEPTIDE_CALC_MZ
    FT_PEPTIDE_CALC_MR = _msparser.ms_mascotresults_FT_PEPTIDE_CALC_MR
    FT_PEPTIDE_STRING = _msparser.ms_mascotresults_FT_PEPTIDE_STRING
    FT_PEPTIDE_QUERY = _msparser.ms_mascotresults_FT_PEPTIDE_QUERY
    FT_PEPTIDE_VARMOD = _msparser.ms_mascotresults_FT_PEPTIDE_VARMOD
    FT_PEPTIDE_FIXMOD = _msparser.ms_mascotresults_FT_PEPTIDE_FIXMOD
    FT_PEPTIDE_FIND_MASK = _msparser.ms_mascotresults_FT_PEPTIDE_FIND_MASK
    FT_PROTEIN_ACCESSION = _msparser.ms_mascotresults_FT_PROTEIN_ACCESSION
    FT_PROTEIN_DESCRIPTION = _msparser.ms_mascotresults_FT_PROTEIN_DESCRIPTION
    FC_COMPLETESTR = _msparser.ms_mascotresults_FC_COMPLETESTR
    FC_SUBSTR = _msparser.ms_mascotresults_FC_SUBSTR
    FC_STARTSTR = _msparser.ms_mascotresults_FC_STARTSTR
    FC_STRTOK = _msparser.ms_mascotresults_FC_STRTOK
    FC_MASK_STR_PART = _msparser.ms_mascotresults_FC_MASK_STR_PART
    FC_CASE_INSENSITIVE = _msparser.ms_mascotresults_FC_CASE_INSENSITIVE
    FC_CASE_SENSITIVE = _msparser.ms_mascotresults_FC_CASE_SENSITIVE
    FC_MASK_CASE = _msparser.ms_mascotresults_FC_MASK_CASE
    FC_FORWARD = _msparser.ms_mascotresults_FC_FORWARD
    FC_REVERSE = _msparser.ms_mascotresults_FC_REVERSE
    FC_MASK_DIRECTION = _msparser.ms_mascotresults_FC_MASK_DIRECTION
    FC_RESTRICT_TO_HIT = _msparser.ms_mascotresults_FC_RESTRICT_TO_HIT
    FC_LOOP_INTO_UNASSIGNED = _msparser.ms_mascotresults_FC_LOOP_INTO_UNASSIGNED
    FC_LOOP_FROM_UNASSIGNED = _msparser.ms_mascotresults_FC_LOOP_FROM_UNASSIGNED
    FC_UNASSIGNED_MASK = _msparser.ms_mascotresults_FC_UNASSIGNED_MASK
    FC_SEARCH_ALL_RANKS = _msparser.ms_mascotresults_FC_SEARCH_ALL_RANKS
    FC_ALL_PEPTITDES = _msparser.ms_mascotresults_FC_ALL_PEPTITDES
    FC_SIGNIFICANT_PEPTIDES = _msparser.ms_mascotresults_FC_SIGNIFICANT_PEPTIDES
    FC_SCORING_MASK = _msparser.ms_mascotresults_FC_SCORING_MASK
    FC_PROTEIN_IGN_SAMESETS = _msparser.ms_mascotresults_FC_PROTEIN_IGN_SAMESETS
    FC_PROTEIN_IGN_SUBSETS = _msparser.ms_mascotresults_FC_PROTEIN_IGN_SUBSETS
    FC_PROTEIN_IGN_FAMILY = _msparser.ms_mascotresults_FC_PROTEIN_IGN_FAMILY
    FC_PROTEIN_IGN_MASK = _msparser.ms_mascotresults_FC_PROTEIN_IGN_MASK
    FC_PROTEIN_INC_ALT_ACC = _msparser.ms_mascotresults_FC_PROTEIN_INC_ALT_ACC
    IH_INCLUDE_TOP_MATCHES = _msparser.ms_mascotresults_IH_INCLUDE_TOP_MATCHES
    IH_INCLUDE_TOP_10_MATCHES = _msparser.ms_mascotresults_IH_INCLUDE_TOP_10_MATCHES
    UPR_WITHIN_FAMILY = _msparser.ms_mascotresults_UPR_WITHIN_FAMILY
    UPR_WITHIN_FAMILY_MEMBER = _msparser.ms_mascotresults_UPR_WITHIN_FAMILY_MEMBER
    UPR_IGNORE_SUBSET_PROTEINS = _msparser.ms_mascotresults_UPR_IGNORE_SUBSET_PROTEINS
    UPR_DEFAULT = _msparser.ms_mascotresults_UPR_DEFAULT
    TT_HOMOLOGY = _msparser.ms_mascotresults_TT_HOMOLOGY
    TT_IDENTITY = _msparser.ms_mascotresults_TT_IDENTITY
    TT_PEPSUM_DEFAULT = _msparser.ms_mascotresults_TT_PEPSUM_DEFAULT
    __swig_destroy__ = _msparser.delete_ms_mascotresults
    __del__ = lambda self : None;
    def createSummary(self): return _msparser.ms_mascotresults_createSummary(self)
    def getCreateSummaryProgress(self, *args): return _msparser.ms_mascotresults_getCreateSummaryProgress(self, *args)
    def cancelCreateSummary(self, newValue = True): return _msparser.ms_mascotresults_cancelCreateSummary(self, newValue)
    def getHit(self, *args): return _msparser.ms_mascotresults_getHit(self, *args)
    def freeHit(self, *args): return _msparser.ms_mascotresults_freeHit(self, *args)
    def getNumberOfHits(self): return _msparser.ms_mascotresults_getNumberOfHits(self)
    def getNumberOfFamilyMembers(self): return _msparser.ms_mascotresults_getNumberOfFamilyMembers(self)
    def getProteinDescription(self, *args): return _msparser.ms_mascotresults_getProteinDescription(self, *args)
    def getProteinMass(self, *args): return _msparser.ms_mascotresults_getProteinMass(self, *args)
    def getProteinEmPAI(self, *args): return _msparser.ms_mascotresults_getProteinEmPAI(self, *args)
    def isEmPAIallowed(self): return _msparser.ms_mascotresults_isEmPAIallowed(self)
    def anyEmPAI(self): return _msparser.ms_mascotresults_anyEmPAI(self)
    def getSequenceMass(self, *args): return _msparser.ms_mascotresults_getSequenceMass(self, *args)
    def getProteinTaxonomyIDs(self, *args): return _msparser.ms_mascotresults_getProteinTaxonomyIDs(self, *args)
    def getProtein(self, *args): return _msparser.ms_mascotresults_getProtein(self, *args)
    def getComponentProtein(self, *args): return _msparser.ms_mascotresults_getComponentProtein(self, *args)
    def getNextSimilarProtein(self, *args): return _msparser.ms_mascotresults_getNextSimilarProtein(self, *args)
    def getNextSimilarProteinOf(self, *args): return _msparser.ms_mascotresults_getNextSimilarProteinOf(self, *args)
    def getNextFamilyProtein(self, *args): return _msparser.ms_mascotresults_getNextFamilyProtein(self, *args)
    def getNextSubsetProtein(self, *args): return _msparser.ms_mascotresults_getNextSubsetProtein(self, *args)
    def getNextSubsetProteinOf(self, *args): return _msparser.ms_mascotresults_getNextSubsetProteinOf(self, *args)
    def getPeptide(self, *args): return _msparser.ms_mascotresults_getPeptide(self, *args)
    def getPeptide_1(self, *args): return _msparser.ms_mascotresults_getPeptide_1(self, *args)
    def getIonsScore(self, *args): return _msparser.ms_mascotresults_getIonsScore(self, *args)
    def isPeptideUnique(self, *args): return _msparser.ms_mascotresults_isPeptideUnique(self, *args)
    def getQmatch(self, *args): return _msparser.ms_mascotresults_getQmatch(self, *args)
    def getPeptideIdentityThreshold(self, *args): return _msparser.ms_mascotresults_getPeptideIdentityThreshold(self, *args)
    def getAvePeptideIdentityThreshold(self, *args): return _msparser.ms_mascotresults_getAvePeptideIdentityThreshold(self, *args)
    def getMaxPeptideIdentityThreshold(self, *args): return _msparser.ms_mascotresults_getMaxPeptideIdentityThreshold(self, *args)
    def getPeptideThreshold(self, *args): return _msparser.ms_mascotresults_getPeptideThreshold(self, *args)
    ETPEP_YES = _msparser.ms_mascotresults_ETPEP_YES
    ETPEP_NO = _msparser.ms_mascotresults_ETPEP_NO
    ETPEP_UNKNOWN = _msparser.ms_mascotresults_ETPEP_UNKNOWN
    def getProteinScoreCutoff(self, *args): return _msparser.ms_mascotresults_getProteinScoreCutoff(self, *args)
    def getProteinThreshold(self, *args): return _msparser.ms_mascotresults_getProteinThreshold(self, *args)
    def getHomologyThreshold(self, *args): return _msparser.ms_mascotresults_getHomologyThreshold(self, *args)
    def getHomologyThresholdForHistogram(self, *args): return _msparser.ms_mascotresults_getHomologyThresholdForHistogram(self, *args)
    def getProbFromScore(self, *args): return _msparser.ms_mascotresults_getProbFromScore(self, *args)
    def getPeptideExpectationValue(self, *args): return _msparser.ms_mascotresults_getPeptideExpectationValue(self, *args)
    def getProbOfPepBeingRandomMatch(self, *args): return _msparser.ms_mascotresults_getProbOfPepBeingRandomMatch(self, *args)
    def getProteinExpectationValue(self, *args): return _msparser.ms_mascotresults_getProteinExpectationValue(self, *args)
    def getProbOfProteinBeingRandomMatch(self, *args): return _msparser.ms_mascotresults_getProbOfProteinBeingRandomMatch(self, *args)
    def getProteinsWithThisPepMatch(self, *args): return _msparser.ms_mascotresults_getProteinsWithThisPepMatch(self, *args)
    def getAllProteinsWithThisPepMatch(self, *args): return _msparser.ms_mascotresults_getAllProteinsWithThisPepMatch(self, *args)
    def getAllFamilyMembersWithThisPepMatch(self, *args): return _msparser.ms_mascotresults_getAllFamilyMembersWithThisPepMatch(self, *args)
    def getErrTolModString(self, *args): return _msparser.ms_mascotresults_getErrTolModString(self, *args)
    def getErrTolModMasterString(self, *args): return _msparser.ms_mascotresults_getErrTolModMasterString(self, *args)
    def getErrTolModSlaveString(self, *args): return _msparser.ms_mascotresults_getErrTolModSlaveString(self, *args)
    def getErrTolModPepString(self, *args): return _msparser.ms_mascotresults_getErrTolModPepString(self, *args)
    def getErrTolModReqPepString(self, *args): return _msparser.ms_mascotresults_getErrTolModReqPepString(self, *args)
    def getErrTolModName(self, *args): return _msparser.ms_mascotresults_getErrTolModName(self, *args)
    def getErrTolModDelta(self, *args): return _msparser.ms_mascotresults_getErrTolModDelta(self, *args)
    def getErrTolModNeutralLoss(self, *args): return _msparser.ms_mascotresults_getErrTolModNeutralLoss(self, *args)
    def getErrTolModMasterNeutralLoss(self, *args): return _msparser.ms_mascotresults_getErrTolModMasterNeutralLoss(self, *args)
    def getErrTolModSlaveNeutralLoss(self, *args): return _msparser.ms_mascotresults_getErrTolModSlaveNeutralLoss(self, *args)
    def getErrTolModPepNeutralLoss(self, *args): return _msparser.ms_mascotresults_getErrTolModPepNeutralLoss(self, *args)
    def getErrTolModReqPepNeutralLoss(self, *args): return _msparser.ms_mascotresults_getErrTolModReqPepNeutralLoss(self, *args)
    def getReadableVarMods(self, *args): return _msparser.ms_mascotresults_getReadableVarMods(self, *args)
    def anyNumDiscoveredMods(self): return _msparser.ms_mascotresults_anyNumDiscoveredMods(self)
    def getNumDiscoveredFixedMods(self, *args): return _msparser.ms_mascotresults_getNumDiscoveredFixedMods(self, *args)
    def getNumDiscoveredVariableMods(self, *args): return _msparser.ms_mascotresults_getNumDiscoveredVariableMods(self, *args)
    def getDiscoveredErrTolModNames(self): return _msparser.ms_mascotresults_getDiscoveredErrTolModNames(self)
    def getNumDiscoveredErrTolMods(self, *args): return _msparser.ms_mascotresults_getNumDiscoveredErrTolMods(self, *args)
    def getNumDiscoveredNonSpecCleavage(self): return _msparser.ms_mascotresults_getNumDiscoveredNonSpecCleavage(self)
    def getTagString(self, *args): return _msparser.ms_mascotresults_getTagString(self, *args)
    def getTagStart(self, *args): return _msparser.ms_mascotresults_getTagStart(self, *args)
    def getTagEnd(self, *args): return _msparser.ms_mascotresults_getTagEnd(self, *args)
    def getTagSeries(self, *args): return _msparser.ms_mascotresults_getTagSeries(self, *args)
    def getTagDeltaRangeStart(self, *args): return _msparser.ms_mascotresults_getTagDeltaRangeStart(self, *args)
    def getTagDeltaRangeEnd(self, *args): return _msparser.ms_mascotresults_getTagDeltaRangeEnd(self, *args)
    def getTerminalResiduesString(self, *args): return _msparser.ms_mascotresults_getTerminalResiduesString(self, *args)
    def getComponentString(self, *args): return _msparser.ms_mascotresults_getComponentString(self, *args)
    def getMaxRankValue(self): return _msparser.ms_mascotresults_getMaxRankValue(self)
    def getIonsScoreHistogram(self, *args): return _msparser.ms_mascotresults_getIonsScoreHistogram(self, *args)
    def createUnassignedList(self, *args): return _msparser.ms_mascotresults_createUnassignedList(self, *args)
    def getNumberOfUnassigned(self): return _msparser.ms_mascotresults_getNumberOfUnassigned(self)
    def getUnassigned(self, *args): return _msparser.ms_mascotresults_getUnassigned(self, *args)
    def getUnassignedIsBold(self, *args): return _msparser.ms_mascotresults_getUnassignedIsBold(self, *args)
    def getUnassignedShowCheckbox(self, *args): return _msparser.ms_mascotresults_getUnassignedShowCheckbox(self, *args)
    def getTreeClusterNodes(self, *args): return _msparser.ms_mascotresults_getTreeClusterNodes(self, *args)
    def findProteins(self, *args): return _msparser.ms_mascotresults_findProteins(self, *args)
    def findProteinsByAccession(self, *args): return _msparser.ms_mascotresults_findProteinsByAccession(self, *args)
    def findProteinsByDescription(self, *args): return _msparser.ms_mascotresults_findProteinsByDescription(self, *args)
    def findPeptides(self, *args): return _msparser.ms_mascotresults_findPeptides(self, *args)
    def getProteinScoreForHistogram(self, *args): return _msparser.ms_mascotresults_getProteinScoreForHistogram(self, *args)
    def isNA(self): return _msparser.ms_mascotresults_isNA(self)
    def getFlags(self): return _msparser.ms_mascotresults_getFlags(self)
    def getFlags2(self): return _msparser.ms_mascotresults_getFlags2(self)
    def getMinPepLenInPepSummary(self): return _msparser.ms_mascotresults_getMinPepLenInPepSummary(self)
    def getNumHitsAboveIdentity(self, *args): return _msparser.ms_mascotresults_getNumHitsAboveIdentity(self, *args)
    def getNumDecoyHitsAboveIdentity(self, *args): return _msparser.ms_mascotresults_getNumDecoyHitsAboveIdentity(self, *args)
    def getNumHitsAboveHomology(self, *args): return _msparser.ms_mascotresults_getNumHitsAboveHomology(self, *args)
    def getNumDecoyHitsAboveHomology(self, *args): return _msparser.ms_mascotresults_getNumDecoyHitsAboveHomology(self, *args)
    def setSubsetsThreshold(self, *args): return _msparser.ms_mascotresults_setSubsetsThreshold(self, *args)
    def getProbabilityThreshold(self): return _msparser.ms_mascotresults_getProbabilityThreshold(self)
    def getThresholdForFDRAboveIdentity(self, *args): return _msparser.ms_mascotresults_getThresholdForFDRAboveIdentity(self, *args)
    def getThresholdForFDRAboveHomology(self, *args): return _msparser.ms_mascotresults_getThresholdForFDRAboveHomology(self, *args)
    def getPepsWithSameScore(self, *args): return _msparser.ms_mascotresults_getPepsWithSameScore(self, *args)
    def getComponentIntensity(self, *args): return _msparser.ms_mascotresults_getComponentIntensity(self, *args)
    def queryRemoveThisPeptide(self, *args): return _msparser.ms_mascotresults_queryRemoveThisPeptide(self, *args)
    def queryScoreThisPeptide(self, *args): return _msparser.ms_mascotresults_queryScoreThisPeptide(self, *args)
    def loadPepMatchesForProteinFromCache(self, *args): return _msparser.ms_mascotresults_loadPepMatchesForProteinFromCache(self, *args)
    def isValidQandP(self, *args): return _msparser.ms_mascotresults_isValidQandP(self, *args)
ms_mascotresults_swigregister = _msparser.ms_mascotresults_swigregister
ms_mascotresults_swigregister(ms_mascotresults)

class ms_proteinsummary(ms_mascotresults):
    __swig_setmethods__ = {}
    for _s in [ms_mascotresults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_proteinsummary, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_mascotresults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_proteinsummary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_proteinsummary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_proteinsummary
    __del__ = lambda self : None;
    def getPeptide(self, *args): return _msparser.ms_proteinsummary_getPeptide(self, *args)
    def getIonsScore(self, *args): return _msparser.ms_proteinsummary_getIonsScore(self, *args)
    def isPeptideUnique(self, *args): return _msparser.ms_proteinsummary_isPeptideUnique(self, *args)
    def getPeptide_1(self, *args): return _msparser.ms_proteinsummary_getPeptide_1(self, *args)
    def getProteinsWithThisPepMatch(self, *args): return _msparser.ms_proteinsummary_getProteinsWithThisPepMatch(self, *args)
    def getAllProteinsWithThisPepMatch(self, *args): return _msparser.ms_proteinsummary_getAllProteinsWithThisPepMatch(self, *args)
    def getAllFamilyMembersWithThisPepMatch(self, *args): return _msparser.ms_proteinsummary_getAllFamilyMembersWithThisPepMatch(self, *args)
    def getErrTolModString(self, *args): return _msparser.ms_proteinsummary_getErrTolModString(self, *args)
    def getErrTolModMasterString(self, *args): return _msparser.ms_proteinsummary_getErrTolModMasterString(self, *args)
    def getErrTolModSlaveString(self, *args): return _msparser.ms_proteinsummary_getErrTolModSlaveString(self, *args)
    def getErrTolModPepString(self, *args): return _msparser.ms_proteinsummary_getErrTolModPepString(self, *args)
    def getErrTolModReqPepString(self, *args): return _msparser.ms_proteinsummary_getErrTolModReqPepString(self, *args)
    def getTagString(self, *args): return _msparser.ms_proteinsummary_getTagString(self, *args)
    def getTagDeltaRangeStart(self, *args): return _msparser.ms_proteinsummary_getTagDeltaRangeStart(self, *args)
    def getTagDeltaRangeEnd(self, *args): return _msparser.ms_proteinsummary_getTagDeltaRangeEnd(self, *args)
    def getTerminalResiduesString(self, *args): return _msparser.ms_proteinsummary_getTerminalResiduesString(self, *args)
    def getComponentString(self, *args): return _msparser.ms_proteinsummary_getComponentString(self, *args)
    def getProteinScoreCutoff(self, *args): return _msparser.ms_proteinsummary_getProteinScoreCutoff(self, *args)
    def getNumPmfQueriesUsed(self): return _msparser.ms_proteinsummary_getNumPmfQueriesUsed(self)
    def isPmfQueryUsed(self, *args): return _msparser.ms_proteinsummary_isPmfQueryUsed(self, *args)
    def getPepsWithSameScore(self, *args): return _msparser.ms_proteinsummary_getPepsWithSameScore(self, *args)
    def getComponentIntensity(self, *args): return _msparser.ms_proteinsummary_getComponentIntensity(self, *args)
    def isValidQandP(self, *args): return _msparser.ms_proteinsummary_isValidQandP(self, *args)
ms_proteinsummary_swigregister = _msparser.ms_proteinsummary_swigregister
ms_proteinsummary_swigregister(ms_proteinsummary)

class ms_peptidesummary(ms_mascotresults):
    __swig_setmethods__ = {}
    for _s in [ms_mascotresults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_peptidesummary, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_mascotresults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_peptidesummary, name)
    __repr__ = _swig_repr
    QL_FIRST = _msparser.ms_peptidesummary_QL_FIRST
    QL_ALL = _msparser.ms_peptidesummary_QL_ALL
    QL_UNASSIGNED = _msparser.ms_peptidesummary_QL_UNASSIGNED
    QL_BELOW_IDENTITY = _msparser.ms_peptidesummary_QL_BELOW_IDENTITY
    QL_BELOW_HOMOLOGY = _msparser.ms_peptidesummary_QL_BELOW_HOMOLOGY
    QL_IGNORE_IONS_SCORE_BELOW = _msparser.ms_peptidesummary_QL_IGNORE_IONS_SCORE_BELOW
    QL_LAST = _msparser.ms_peptidesummary_QL_LAST
    MSPEPSUM_NONE = _msparser.ms_peptidesummary_MSPEPSUM_NONE
    MSPEPSUM_PERCOLATOR = _msparser.ms_peptidesummary_MSPEPSUM_PERCOLATOR
    MSPEPSUM_USE_CACHE = _msparser.ms_peptidesummary_MSPEPSUM_USE_CACHE
    MSPEPSUM_SINGLE_HIT_DBIDX = _msparser.ms_peptidesummary_MSPEPSUM_SINGLE_HIT_DBIDX
    MSPEPSUM_USE_HOMOLOGY_THRESH = _msparser.ms_peptidesummary_MSPEPSUM_USE_HOMOLOGY_THRESH
    MSPEPSUM_NO_PROTEIN_GROUPING = _msparser.ms_peptidesummary_MSPEPSUM_NO_PROTEIN_GROUPING
    MSPEPSUM_DISCARD_RELOADABLE = _msparser.ms_peptidesummary_MSPEPSUM_DISCARD_RELOADABLE
    MSPEPSUM_DEFERRED_CREATE = _msparser.ms_peptidesummary_MSPEPSUM_DEFERRED_CREATE
    BUGFIX_10780 = _msparser.ms_peptidesummary_BUGFIX_10780
    BUGFIX_10995 = _msparser.ms_peptidesummary_BUGFIX_10995
    BUGFIX_11002 = _msparser.ms_peptidesummary_BUGFIX_11002
    BUGFIX_11018 = _msparser.ms_peptidesummary_BUGFIX_11018
    BUGFIX_11235 = _msparser.ms_peptidesummary_BUGFIX_11235
    BUGFIX_11254 = _msparser.ms_peptidesummary_BUGFIX_11254
    BUGFIX_11344 = _msparser.ms_peptidesummary_BUGFIX_11344
    BUGFIX_11411 = _msparser.ms_peptidesummary_BUGFIX_11411
    BUGFIX_11425 = _msparser.ms_peptidesummary_BUGFIX_11425
    BUGFIX_11438 = _msparser.ms_peptidesummary_BUGFIX_11438
    BUGFIX_11483 = _msparser.ms_peptidesummary_BUGFIX_11483
    def __init__(self, *args): 
        this = _msparser.new_ms_peptidesummary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_peptidesummary
    __del__ = lambda self : None;
    def createSummary(self): return _msparser.ms_peptidesummary_createSummary(self)
    def anyEmPAI(self): return _msparser.ms_peptidesummary_anyEmPAI(self)
    def getProteinEmPAI(self, *args): return _msparser.ms_peptidesummary_getProteinEmPAI(self, *args)
    def getHit(self, *args): return _msparser.ms_peptidesummary_getHit(self, *args)
    def freeHit(self, *args): return _msparser.ms_peptidesummary_freeHit(self, *args)
    PEPS_PER_QUERY = _msparser.ms_peptidesummary_PEPS_PER_QUERY
    def getPeptide(self, *args): return _msparser.ms_peptidesummary_getPeptide(self, *args)
    def getPeptide_1(self, *args): return _msparser.ms_peptidesummary_getPeptide_1(self, *args)
    def getIonsScore(self, *args): return _msparser.ms_peptidesummary_getIonsScore(self, *args)
    def isPeptideUnique(self, *args): return _msparser.ms_peptidesummary_isPeptideUnique(self, *args)
    def getProteinsWithThisPepMatch(self, *args): return _msparser.ms_peptidesummary_getProteinsWithThisPepMatch(self, *args)
    def getAllProteinsWithThisPepMatch(self, *args): return _msparser.ms_peptidesummary_getAllProteinsWithThisPepMatch(self, *args)
    def getAllFamilyMembersWithThisPepMatch(self, *args): return _msparser.ms_peptidesummary_getAllFamilyMembersWithThisPepMatch(self, *args)
    def getErrTolModString(self, *args): return _msparser.ms_peptidesummary_getErrTolModString(self, *args)
    def getErrTolModMasterString(self, *args): return _msparser.ms_peptidesummary_getErrTolModMasterString(self, *args)
    def getErrTolModSlaveString(self, *args): return _msparser.ms_peptidesummary_getErrTolModSlaveString(self, *args)
    def getErrTolModPepString(self, *args): return _msparser.ms_peptidesummary_getErrTolModPepString(self, *args)
    def getErrTolModReqPepString(self, *args): return _msparser.ms_peptidesummary_getErrTolModReqPepString(self, *args)
    def getTagString(self, *args): return _msparser.ms_peptidesummary_getTagString(self, *args)
    def getTagDeltaRangeStart(self, *args): return _msparser.ms_peptidesummary_getTagDeltaRangeStart(self, *args)
    def getTagDeltaRangeEnd(self, *args): return _msparser.ms_peptidesummary_getTagDeltaRangeEnd(self, *args)
    def getTerminalResiduesString(self, *args): return _msparser.ms_peptidesummary_getTerminalResiduesString(self, *args)
    def getComponentString(self, *args): return _msparser.ms_peptidesummary_getComponentString(self, *args)
    def getProteinScoreCutoff(self, *args): return _msparser.ms_peptidesummary_getProteinScoreCutoff(self, *args)
    def getSrcRank(self, *args): return _msparser.ms_peptidesummary_getSrcRank(self, *args)
    def getSrcSection(self, *args): return _msparser.ms_peptidesummary_getSrcSection(self, *args)
    def getQueryList(self, *args): return _msparser.ms_peptidesummary_getQueryList(self, *args)
    def getPepsWithSameScore(self, *args): return _msparser.ms_peptidesummary_getPepsWithSameScore(self, *args)
    def getComponentIntensity(self, *args): return _msparser.ms_peptidesummary_getComponentIntensity(self, *args)
    def findProteins(self, *args): return _msparser.ms_peptidesummary_findProteins(self, *args)
    def findProteinsByAccession(self, *args): return _msparser.ms_peptidesummary_findProteinsByAccession(self, *args)
    def findProteinsByDescription(self, *args): return _msparser.ms_peptidesummary_findProteinsByDescription(self, *args)
    def findPeptides(self, *args): return _msparser.ms_peptidesummary_findPeptides(self, *args)
    def getProtein(self, *args): return _msparser.ms_peptidesummary_getProtein(self, *args)
    def getComponentProtein(self, *args): return _msparser.ms_peptidesummary_getComponentProtein(self, *args)
    def getTreeClusterNodes(self, *args): return _msparser.ms_peptidesummary_getTreeClusterNodes(self, *args)
    __swig_getmethods__["willCreateCache"] = lambda x: _msparser.ms_peptidesummary_willCreateCache
    if _newclass:willCreateCache = staticmethod(_msparser.ms_peptidesummary_willCreateCache)
    def getCacheFileName(self): return _msparser.ms_peptidesummary_getCacheFileName(self)
    def isDataCached(self, *args): return _msparser.ms_peptidesummary_isDataCached(self, *args)
    def loadPepMatchesForProteinFromCache(self, *args): return _msparser.ms_peptidesummary_loadPepMatchesForProteinFromCache(self, *args)
    def isValidQandP(self, *args): return _msparser.ms_peptidesummary_isValidQandP(self, *args)
    def dumpCDB(self, *args): return _msparser.ms_peptidesummary_dumpCDB(self, *args)
ms_peptidesummary_swigregister = _msparser.ms_peptidesummary_swigregister
ms_peptidesummary_swigregister(ms_peptidesummary)

def ms_peptidesummary_willCreateCache(*args):
  return _msparser.ms_peptidesummary_willCreateCache(*args)
ms_peptidesummary_willCreateCache = _msparser.ms_peptidesummary_willCreateCache

class ms_inputquery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_inputquery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_inputquery, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_inputquery(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_inputquery
    __del__ = lambda self : None;
    def getStringTitle(self, *args): return _msparser.ms_inputquery_getStringTitle(self, *args)
    def getCharge(self): return _msparser.ms_inputquery_getCharge(self)
    def getSeq(self, *args): return _msparser.ms_inputquery_getSeq(self, *args)
    def getComp(self, *args): return _msparser.ms_inputquery_getComp(self, *args)
    def getTag(self, *args): return _msparser.ms_inputquery_getTag(self, *args)
    def getMassMin(self): return _msparser.ms_inputquery_getMassMin(self)
    def getMassMax(self): return _msparser.ms_inputquery_getMassMax(self)
    def getNumVals(self): return _msparser.ms_inputquery_getNumVals(self)
    def getNumUsed(self): return _msparser.ms_inputquery_getNumUsed(self)
    def getStringIons1(self): return _msparser.ms_inputquery_getStringIons1(self)
    def getStringIons2(self): return _msparser.ms_inputquery_getStringIons2(self)
    def getStringIons3(self): return _msparser.ms_inputquery_getStringIons3(self)
    def getIntMax(self): return _msparser.ms_inputquery_getIntMax(self)
    def getIntMin(self): return _msparser.ms_inputquery_getIntMin(self)
    def getPeakList(self, *args): return _msparser.ms_inputquery_getPeakList(self, *args)
    def getPeakMass(self, *args): return _msparser.ms_inputquery_getPeakMass(self, *args)
    def getPeakIntensity(self, *args): return _msparser.ms_inputquery_getPeakIntensity(self, *args)
    def getNumberOfPeaks(self, *args): return _msparser.ms_inputquery_getNumberOfPeaks(self, *args)
    def getTotalIonsIntensity(self): return _msparser.ms_inputquery_getTotalIonsIntensity(self)
    def getPepTol(self): return _msparser.ms_inputquery_getPepTol(self)
    def getPepTolUnits(self): return _msparser.ms_inputquery_getPepTolUnits(self)
    def getPepTolString(self): return _msparser.ms_inputquery_getPepTolString(self)
    def getINSTRUMENT(self, unescaped = True): return _msparser.ms_inputquery_getINSTRUMENT(self, unescaped)
    def getRULES(self): return _msparser.ms_inputquery_getRULES(self)
    def getMinInternalMass(self): return _msparser.ms_inputquery_getMinInternalMass(self)
    def getMaxInternalMass(self): return _msparser.ms_inputquery_getMaxInternalMass(self)
    def getIT_MODS(self, unescaped = True): return _msparser.ms_inputquery_getIT_MODS(self, unescaped)
    def getScanNumbers(self, *args): return _msparser.ms_inputquery_getScanNumbers(self, *args)
    def getRawScans(self, *args): return _msparser.ms_inputquery_getRawScans(self, *args)
    def getRetentionTimes(self, *args): return _msparser.ms_inputquery_getRetentionTimes(self, *args)
    def getRawfile(self): return _msparser.ms_inputquery_getRawfile(self)
    def getLocus(self): return _msparser.ms_inputquery_getLocus(self)
    def getIndex(self): return _msparser.ms_inputquery_getIndex(self)
ms_inputquery_swigregister = _msparser.ms_inputquery_swigregister
ms_inputquery_swigregister(ms_inputquery)

class ms_searchparams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_searchparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_searchparams, name)
    __repr__ = _swig_repr
    MSM_NOT_PERMITTED = _msparser.ms_searchparams_MSM_NOT_PERMITTED
    MSM_EXCLUSIVE_PLUS_VARIABLE = _msparser.ms_searchparams_MSM_EXCLUSIVE_PLUS_VARIABLE
    def __init__(self, *args): 
        this = _msparser.new_ms_searchparams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_searchparams
    __del__ = lambda self : None;
    def getLICENSE(self): return _msparser.ms_searchparams_getLICENSE(self)
    def getCOM(self): return _msparser.ms_searchparams_getCOM(self)
    def getSEG(self): return _msparser.ms_searchparams_getSEG(self)
    def getTOL(self): return _msparser.ms_searchparams_getTOL(self)
    def getTOLU(self): return _msparser.ms_searchparams_getTOLU(self)
    def getITOL(self): return _msparser.ms_searchparams_getITOL(self)
    def getITOLU(self): return _msparser.ms_searchparams_getITOLU(self)
    def getPFA(self): return _msparser.ms_searchparams_getPFA(self)
    def getDB(self, idx = 1): return _msparser.ms_searchparams_getDB(self, idx)
    def getNumberOfDatabases(self): return _msparser.ms_searchparams_getNumberOfDatabases(self)
    def getMODS(self): return _msparser.ms_searchparams_getMODS(self)
    def getMASS(self): return _msparser.ms_searchparams_getMASS(self)
    def getMassType(self): return _msparser.ms_searchparams_getMassType(self)
    def getCLE(self): return _msparser.ms_searchparams_getCLE(self)
    def getFILENAME(self): return _msparser.ms_searchparams_getFILENAME(self)
    def getQUE(self): return _msparser.ms_searchparams_getQUE(self)
    def getSEARCH(self): return _msparser.ms_searchparams_getSEARCH(self)
    def getUSERNAME(self): return _msparser.ms_searchparams_getUSERNAME(self)
    def getUSEREMAIL(self): return _msparser.ms_searchparams_getUSEREMAIL(self)
    def getUSERID(self): return _msparser.ms_searchparams_getUSERID(self)
    def getCHARGE(self): return _msparser.ms_searchparams_getCHARGE(self)
    def getINTERMEDIATE(self): return _msparser.ms_searchparams_getINTERMEDIATE(self)
    def getREPORT(self): return _msparser.ms_searchparams_getREPORT(self)
    def getOVERVIEW(self): return _msparser.ms_searchparams_getOVERVIEW(self)
    def getFORMAT(self): return _msparser.ms_searchparams_getFORMAT(self)
    def getFORMVER(self): return _msparser.ms_searchparams_getFORMVER(self)
    def getIT_MODS(self): return _msparser.ms_searchparams_getIT_MODS(self)
    def getUSERField(self, *args): return _msparser.ms_searchparams_getUSERField(self, *args)
    def getAllUSERParams(self): return _msparser.ms_searchparams_getAllUSERParams(self)
    def getPRECURSOR(self): return _msparser.ms_searchparams_getPRECURSOR(self)
    def getTAXONOMY(self): return _msparser.ms_searchparams_getTAXONOMY(self)
    def getREPTYPE(self): return _msparser.ms_searchparams_getREPTYPE(self)
    def getACCESSION(self): return _msparser.ms_searchparams_getACCESSION(self)
    def getSUBCLUSTER(self): return _msparser.ms_searchparams_getSUBCLUSTER(self)
    def getICAT(self): return _msparser.ms_searchparams_getICAT(self)
    def getINSTRUMENT(self): return _msparser.ms_searchparams_getINSTRUMENT(self)
    def getERRORTOLERANT(self): return _msparser.ms_searchparams_getERRORTOLERANT(self)
    def getRULES(self): return _msparser.ms_searchparams_getRULES(self)
    def getMinInternalMass(self): return _msparser.ms_searchparams_getMinInternalMass(self)
    def getMaxInternalMass(self): return _msparser.ms_searchparams_getMaxInternalMass(self)
    def getResidueMass(self, *args): return _msparser.ms_searchparams_getResidueMass(self, *args)
    def getCTermMass(self): return _msparser.ms_searchparams_getCTermMass(self)
    def getNTermMass(self): return _msparser.ms_searchparams_getNTermMass(self)
    def getHydrogenMass(self): return _msparser.ms_searchparams_getHydrogenMass(self)
    def getOxygenMass(self): return _msparser.ms_searchparams_getOxygenMass(self)
    def getCarbonMass(self): return _msparser.ms_searchparams_getCarbonMass(self)
    def getNitrogenMass(self): return _msparser.ms_searchparams_getNitrogenMass(self)
    def getElectronMass(self): return _msparser.ms_searchparams_getElectronMass(self)
    def getVarModsName(self, *args): return _msparser.ms_searchparams_getVarModsName(self, *args)
    def getVarModsDelta(self, *args): return _msparser.ms_searchparams_getVarModsDelta(self, *args)
    def getVarModsNeutralLoss(self, *args): return _msparser.ms_searchparams_getVarModsNeutralLoss(self, *args)
    def getVarModsNeutralLosses(self, *args): return _msparser.ms_searchparams_getVarModsNeutralLosses(self, *args)
    def getVarModsPepNeutralLoss(self, *args): return _msparser.ms_searchparams_getVarModsPepNeutralLoss(self, *args)
    def getVarModsReqPepNeutralLoss(self, *args): return _msparser.ms_searchparams_getVarModsReqPepNeutralLoss(self, *args)
    def getFixedModsName(self, *args): return _msparser.ms_searchparams_getFixedModsName(self, *args)
    def getFixedModsDelta(self, *args): return _msparser.ms_searchparams_getFixedModsDelta(self, *args)
    def getFixedModsNeutralLoss(self, *args): return _msparser.ms_searchparams_getFixedModsNeutralLoss(self, *args)
    def getFixedModsResidues(self, *args): return _msparser.ms_searchparams_getFixedModsResidues(self, *args)
    def getErrTolParentFilename(self): return _msparser.ms_searchparams_getErrTolParentFilename(self)
    def getQUANTITATION(self): return _msparser.ms_searchparams_getQUANTITATION(self)
    def getPEP_ISOTOPE_ERROR(self): return _msparser.ms_searchparams_getPEP_ISOTOPE_ERROR(self)
    def getDECOY(self): return _msparser.ms_searchparams_getDECOY(self)
    def getMULTI_SITE_MODS(self): return _msparser.ms_searchparams_getMULTI_SITE_MODS(self)
ms_searchparams_swigregister = _msparser.ms_searchparams_swigregister
ms_searchparams_swigregister(ms_searchparams)

class ms_unigene_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_unigene_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_unigene_entry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_unigene_entry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_unigene_entry
    __del__ = lambda self : None;
    def getNumAccessions(self): return _msparser.ms_unigene_entry_getNumAccessions(self)
    def getID(self): return _msparser.ms_unigene_entry_getID(self)
    def getTitle(self): return _msparser.ms_unigene_entry_getTitle(self)
    def getGene(self): return _msparser.ms_unigene_entry_getGene(self)
    def getCytoBand(self): return _msparser.ms_unigene_entry_getCytoBand(self)
    def getLocusLink(self): return _msparser.ms_unigene_entry_getLocusLink(self)
    def getExpress(self): return _msparser.ms_unigene_entry_getExpress(self)
    def getChromosome(self): return _msparser.ms_unigene_entry_getChromosome(self)
    def getFileOffset(self): return _msparser.ms_unigene_entry_getFileOffset(self)
ms_unigene_entry_swigregister = _msparser.ms_unigene_entry_swigregister
ms_unigene_entry_swigregister(ms_unigene_entry)

class ms_unigene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_unigene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_unigene, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_unigene(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_unigene
    __del__ = lambda self : None;
    def findEntry(self, *args): return _msparser.ms_unigene_findEntry(self, *args)
    def getUnigeneForAccession(self, *args): return _msparser.ms_unigene_getUnigeneForAccession(self, *args)
ms_unigene_swigregister = _msparser.ms_unigene_swigregister
ms_unigene_swigregister(ms_unigene)

class ms_aahelper(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_aahelper, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_aahelper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_aahelper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_aahelper
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_aahelper_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_aahelper_defaultValues(self)
    def setEnzyme(self, *args): return _msparser.ms_aahelper_setEnzyme(self, *args)
    def getEnzyme(self): return _msparser.ms_aahelper_getEnzyme(self)
    def setMasses(self, *args): return _msparser.ms_aahelper_setMasses(self, *args)
    def getMasses(self): return _msparser.ms_aahelper_getMasses(self)
    def setAvailableModifications(self, *args): return _msparser.ms_aahelper_setAvailableModifications(self, *args)
    def getFixedMods(self): return _msparser.ms_aahelper_getFixedMods(self)
    def getVarMods(self): return _msparser.ms_aahelper_getVarMods(self)
    def startIteratePeptides(self, *args): return _msparser.ms_aahelper_startIteratePeptides(self, *args)
    def getNextPeptide(self): return _msparser.ms_aahelper_getNextPeptide(self)
    def getPepStart(self): return _msparser.ms_aahelper_getPepStart(self)
    def getPepEnd(self): return _msparser.ms_aahelper_getPepEnd(self)
    def getMissed(self): return _msparser.ms_aahelper_getMissed(self)
    def stopIteratePeptides(self): return _msparser.ms_aahelper_stopIteratePeptides(self)
    def calcPeptideMZ(self, *args): return _msparser.ms_aahelper_calcPeptideMZ(self, *args)
    def createPeptide(self, *args): return _msparser.ms_aahelper_createPeptide(self, *args)
    def calcFragments(self, *args): return _msparser.ms_aahelper_calcFragments(self, *args)
    def calcFragmentsEx(self, *args): return _msparser.ms_aahelper_calcFragmentsEx(self, *args)
    def convertPrimaryNlVectorToString(self, *args): return _msparser.ms_aahelper_convertPrimaryNlVectorToString(self, *args)
    def convertPrimaryNlStringToVector(self, *args): return _msparser.ms_aahelper_convertPrimaryNlStringToVector(self, *args)
ms_aahelper_swigregister = _msparser.ms_aahelper_swigregister
ms_aahelper_swigregister(ms_aahelper)

class ms_zip(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_zip, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_zip, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_zip(*args)
        try: self.this.append(this)
        except: self.this = this
    def copyFrom(self, *args): return _msparser.ms_zip_copyFrom(self, *args)
    __swig_destroy__ = _msparser.delete_ms_zip
    __del__ = lambda self : None;
    def compressMore(self, *args): return _msparser.ms_zip_compressMore(self, *args)
    def getZipped(self, *args): return _msparser.ms_zip_getZipped(self, *args)
    def getUnZipped(self, *args): return _msparser.ms_zip_getUnZipped(self, *args)
    def getZippedLen(self): return _msparser.ms_zip_getZippedLen(self)
    def getUnZippedLen(self): return _msparser.ms_zip_getUnZippedLen(self)
    MAX_UNCOMPRESSED_SIZE = _msparser.ms_zip_MAX_UNCOMPRESSED_SIZE
ms_zip_swigregister = _msparser.ms_zip_swigregister
ms_zip_swigregister(ms_zip)

class ms_shapiro_wilk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_shapiro_wilk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_shapiro_wilk, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _msparser.delete_ms_shapiro_wilk
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _msparser.new_ms_shapiro_wilk(*args)
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _msparser.ms_shapiro_wilk_calculate(self, *args)
    def appendSampleValue(self, *args): return _msparser.ms_shapiro_wilk_appendSampleValue(self, *args)
    def clearSampleValues(self): return _msparser.ms_shapiro_wilk_clearSampleValues(self)
    def getResult(self): return _msparser.ms_shapiro_wilk_getResult(self)
    def getPValue(self): return _msparser.ms_shapiro_wilk_getPValue(self)
    def getErrorCode(self): return _msparser.ms_shapiro_wilk_getErrorCode(self)
    __swig_getmethods__["swilk"] = lambda x: _msparser.ms_shapiro_wilk_swilk
    if _newclass:swilk = staticmethod(_msparser.ms_shapiro_wilk_swilk)
ms_shapiro_wilk_swigregister = _msparser.ms_shapiro_wilk_swigregister
ms_shapiro_wilk_swigregister(ms_shapiro_wilk)

def ms_shapiro_wilk_swilk(*args):
  return _msparser.ms_shapiro_wilk_swilk(*args)
ms_shapiro_wilk_swilk = _msparser.ms_shapiro_wilk_swilk

class ms_obofile(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_obofile, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_obofile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_obofile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_obofile
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_obofile_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_obofile_defaultValues(self)
    def getItemFromId(self, *args): return _msparser.ms_obofile_getItemFromId(self, *args)
    def findIDFromTagValue(self, *args): return _msparser.ms_obofile_findIDFromTagValue(self, *args)
    def parseLine(self, *args): return _msparser.ms_obofile_parseLine(self, *args)
    def getNumberOfEntries(self): return _msparser.ms_obofile_getNumberOfEntries(self)
ms_obofile_swigregister = _msparser.ms_obofile_swigregister
ms_obofile_swigregister(ms_obofile)

class ms_treecluster(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_treecluster, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_treecluster, name)
    __repr__ = _swig_repr
    TCD_CORRELATION = _msparser.ms_treecluster_TCD_CORRELATION
    TCD_ABS_CORRELATION = _msparser.ms_treecluster_TCD_ABS_CORRELATION
    TCD_UNCENTERED_CORRELATION = _msparser.ms_treecluster_TCD_UNCENTERED_CORRELATION
    TCD_ABS_UNCENTERED_CORRELATION = _msparser.ms_treecluster_TCD_ABS_UNCENTERED_CORRELATION
    TCD_SPEARMANS_RANK_CORRELATION = _msparser.ms_treecluster_TCD_SPEARMANS_RANK_CORRELATION
    TCD_KENDALLS_TAU_CORRELATION = _msparser.ms_treecluster_TCD_KENDALLS_TAU_CORRELATION
    TCD_EUCLIDEAN = _msparser.ms_treecluster_TCD_EUCLIDEAN
    TCD_CITY_BLOCK = _msparser.ms_treecluster_TCD_CITY_BLOCK
    def __init__(self, *args): 
        this = _msparser.new_ms_treecluster(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_treecluster
    __del__ = lambda self : None;
    def copyFrom(self, *args): return _msparser.ms_treecluster_copyFrom(self, *args)
    def defaultValues(self): return _msparser.ms_treecluster_defaultValues(self)
    def setRow(self, *args): return _msparser.ms_treecluster_setRow(self, *args)
    def cluster(self, *args): return _msparser.ms_treecluster_cluster(self, *args)
ms_treecluster_swigregister = _msparser.ms_treecluster_swigregister
ms_treecluster_swigregister(ms_treecluster)

class ms_http_helper_handles(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_helper_handles, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_helper_handles, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _msparser.delete_ms_http_helper_handles
    __del__ = lambda self : None;
    def getRequestData(self, *args): return _msparser.ms_http_helper_handles_getRequestData(self, *args)
    def closeHandles(self): return _msparser.ms_http_helper_handles_closeHandles(self)
    def __init__(self): 
        this = _msparser.new_ms_http_helper_handles()
        try: self.this.append(this)
        except: self.this = this
ms_http_helper_handles_swigregister = _msparser.ms_http_helper_handles_swigregister
ms_http_helper_handles_swigregister(ms_http_helper_handles)

class ms_http_helper_progress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_helper_progress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_helper_progress, name)
    __repr__ = _swig_repr
    def setAbort(self): return _msparser.ms_http_helper_progress_setAbort(self)
    def isAbortSet(self): return _msparser.ms_http_helper_progress_isAbortSet(self)
    def isStarted(self): return _msparser.ms_http_helper_progress_isStarted(self)
    def current(self): return _msparser.ms_http_helper_progress_current(self)
    def total(self): return _msparser.ms_http_helper_progress_total(self)
    def proportion(self): return _msparser.ms_http_helper_progress_proportion(self)
    def isComplete(self): return _msparser.ms_http_helper_progress_isComplete(self)
    def __init__(self): 
        this = _msparser.new_ms_http_helper_progress()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_helper_progress
    __del__ = lambda self : None;
ms_http_helper_progress_swigregister = _msparser.ms_http_helper_progress_swigregister
ms_http_helper_progress_swigregister(ms_http_helper_progress)

class ms_http_helper_return(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_helper_return, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_helper_return, name)
    __repr__ = _swig_repr
    ERR_NONE = _msparser.ms_http_helper_return_ERR_NONE
    ERR_ABORTEDBYUSER = _msparser.ms_http_helper_return_ERR_ABORTEDBYUSER
    ERR_SYSTEM = _msparser.ms_http_helper_return_ERR_SYSTEM
    ERR_HTTP = _msparser.ms_http_helper_return_ERR_HTTP
    ERR_UNSPECIFIED = _msparser.ms_http_helper_return_ERR_UNSPECIFIED
    __swig_getmethods__["httpError"] = lambda x: _msparser.ms_http_helper_return_httpError
    if _newclass:httpError = staticmethod(_msparser.ms_http_helper_return_httpError)
    __swig_getmethods__["unspecifiedError"] = lambda x: _msparser.ms_http_helper_return_unspecifiedError
    if _newclass:unspecifiedError = staticmethod(_msparser.ms_http_helper_return_unspecifiedError)
    __swig_getmethods__["abortedByUser"] = lambda x: _msparser.ms_http_helper_return_abortedByUser
    if _newclass:abortedByUser = staticmethod(_msparser.ms_http_helper_return_abortedByUser)
    def isOk(self): return _msparser.ms_http_helper_return_isOk(self)
    def errorType(self): return _msparser.ms_http_helper_return_errorType(self)
    def systemError(self, *args): return _msparser.ms_http_helper_return_systemError(self, *args)
    def httpStatusCode(self): return _msparser.ms_http_helper_return_httpStatusCode(self)
    def errorText(self): return _msparser.ms_http_helper_return_errorText(self)
    def __init__(self): 
        this = _msparser.new_ms_http_helper_return()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_helper_return
    __del__ = lambda self : None;
ms_http_helper_return_swigregister = _msparser.ms_http_helper_return_swigregister
ms_http_helper_return_swigregister(ms_http_helper_return)

def ms_http_helper_return_httpError(*args):
  return _msparser.ms_http_helper_return_httpError(*args)
ms_http_helper_return_httpError = _msparser.ms_http_helper_return_httpError

def ms_http_helper_return_unspecifiedError():
  return _msparser.ms_http_helper_return_unspecifiedError()
ms_http_helper_return_unspecifiedError = _msparser.ms_http_helper_return_unspecifiedError

def ms_http_helper_return_abortedByUser():
  return _msparser.ms_http_helper_return_abortedByUser()
ms_http_helper_return_abortedByUser = _msparser.ms_http_helper_return_abortedByUser

class ms_http_helper(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_helper, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_helper, name)
    __repr__ = _swig_repr
    FM_binary = _msparser.ms_http_helper_FM_binary
    FM_text = _msparser.ms_http_helper_FM_text
    __swig_getmethods__["yieldToCom"] = lambda x: _msparser.ms_http_helper_yieldToCom
    if _newclass:yieldToCom = staticmethod(_msparser.ms_http_helper_yieldToCom)
    def getProxyConfig(self, *args): return _msparser.ms_http_helper_getProxyConfig(self, *args)
    def __init__(self, *args): 
        this = _msparser.new_ms_http_helper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_helper
    __del__ = lambda self : None;
    def baseUrl(self): return _msparser.ms_http_helper_baseUrl(self)
    def connectionSettings(self): return _msparser.ms_http_helper_connectionSettings(self)
    def httpGetString(self, *args): return _msparser.ms_http_helper_httpGetString(self, *args)
    def httpPostFile(self, *args): return _msparser.ms_http_helper_httpPostFile(self, *args)
    def httpGetFile(self, *args): return _msparser.ms_http_helper_httpGetFile(self, *args)
ms_http_helper_swigregister = _msparser.ms_http_helper_swigregister
ms_http_helper_swigregister(ms_http_helper)

def ms_http_helper_yieldToCom():
  return _msparser.ms_http_helper_yieldToCom()
ms_http_helper_yieldToCom = _msparser.ms_http_helper_yieldToCom

class ms_http_helper_response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_helper_response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_helper_response, name)
    __repr__ = _swig_repr
    S_SUCCESS = _msparser.ms_http_helper_response_S_SUCCESS
    S_LOGINERROR = _msparser.ms_http_helper_response_S_LOGINERROR
    S_PARSERERROR = _msparser.ms_http_helper_response_S_PARSERERROR
    S_SERVERERROR = _msparser.ms_http_helper_response_S_SERVERERROR
    S_MISSING = _msparser.ms_http_helper_response_S_MISSING
    L_SUCCESS = _msparser.ms_http_helper_response_L_SUCCESS
    L_PARAMETER = _msparser.ms_http_helper_response_L_PARAMETER
    L_NOT_AUTHORISED = _msparser.ms_http_helper_response_L_NOT_AUTHORISED
    L_SECURITYENABLED = _msparser.ms_http_helper_response_L_SECURITYENABLED
    L_WEBAUTHENTICATIONDISABLED = _msparser.ms_http_helper_response_L_WEBAUTHENTICATIONDISABLED
    L_GUESTLOGINDISABLED = _msparser.ms_http_helper_response_L_GUESTLOGINDISABLED
    def __init__(self, *args): 
        this = _msparser.new_ms_http_helper_response(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_helper_response
    __del__ = lambda self : None;
    def status(self): return _msparser.ms_http_helper_response_status(self)
    def loginError(self): return _msparser.ms_http_helper_response_loginError(self)
    def parserError(self): return _msparser.ms_http_helper_response_parserError(self)
    def hasErrorText(self): return _msparser.ms_http_helper_response_hasErrorText(self)
    def errorText(self): return _msparser.ms_http_helper_response_errorText(self)
    def hasSessionId(self): return _msparser.ms_http_helper_response_hasSessionId(self)
    def sessionId(self): return _msparser.ms_http_helper_response_sessionId(self)
    def hasTaskId(self): return _msparser.ms_http_helper_response_hasTaskId(self)
    def taskId(self): return _msparser.ms_http_helper_response_taskId(self)
    def text(self): return _msparser.ms_http_helper_response_text(self)
    def FindValue(self, *args): return _msparser.ms_http_helper_response_FindValue(self, *args)
ms_http_helper_response_swigregister = _msparser.ms_http_helper_response_swigregister
ms_http_helper_response_swigregister(ms_http_helper_response)

class ms_http_client(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_client, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_client, name)
    __repr__ = _swig_repr
    L_SUCCESS = _msparser.ms_http_client_L_SUCCESS
    L_SECURITYDISABLED = _msparser.ms_http_client_L_SECURITYDISABLED
    L_UNKNOWNUSER = _msparser.ms_http_client_L_UNKNOWNUSER
    L_INCORRECTPASSWORD = _msparser.ms_http_client_L_INCORRECTPASSWORD
    L_PASSWORDEXPIRED = _msparser.ms_http_client_L_PASSWORDEXPIRED
    L_WEBAUTHENTICATIONFAILED = _msparser.ms_http_client_L_WEBAUTHENTICATIONFAILED
    L_GUESTLOGINDISABLED = _msparser.ms_http_client_L_GUESTLOGINDISABLED
    L_UNSPECIFIEDERROR = _msparser.ms_http_client_L_UNSPECIFIEDERROR
    CP_SUCCESS = _msparser.ms_http_client_CP_SUCCESS
    CP_UNKNOWNUSER = _msparser.ms_http_client_CP_UNKNOWNUSER
    CP_INCORRECTPASSWORD = _msparser.ms_http_client_CP_INCORRECTPASSWORD
    CP_BADNEWPASSWORD = _msparser.ms_http_client_CP_BADNEWPASSWORD
    CP_UNSPECIFIEDERROR = _msparser.ms_http_client_CP_UNSPECIFIEDERROR
    def __init__(self, *args): 
        this = _msparser.new_ms_http_client(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_client
    __del__ = lambda self : None;
    def baseUrl(self): return _msparser.ms_http_client_baseUrl(self)
    def connectionSettings(self): return _msparser.ms_http_client_connectionSettings(self)
    def setBaseUrl(self, *args): return _msparser.ms_http_client_setBaseUrl(self, *args)
    def setConnectionSettings(self, *args): return _msparser.ms_http_client_setConnectionSettings(self, *args)
    def getIsDatabaseActive(self, *args): return _msparser.ms_http_client_getIsDatabaseActive(self, *args)
    def getVersion(self, *args): return _msparser.ms_http_client_getVersion(self, *args)
    def getOsName(self, *args): return _msparser.ms_http_client_getOsName(self, *args)
    def userLogin(self, *args): return _msparser.ms_http_client_userLogin(self, *args)
    def changePassword(self, *args): return _msparser.ms_http_client_changePassword(self, *args)
ms_http_client_swigregister = _msparser.ms_http_client_swigregister
ms_http_client_swigregister(ms_http_client)

class ms_http_client_session(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_client_session, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_client_session, name)
    __repr__ = _swig_repr
    SHOW_PI = _msparser.ms_http_client_session_SHOW_PI
    SHOW_TITLE = _msparser.ms_http_client_session_SHOW_TITLE
    SHOW_LENGTH = _msparser.ms_http_client_session_SHOW_LENGTH
    SHOW_SEQUENCE = _msparser.ms_http_client_session_SHOW_SEQUENCE
    SHOW_REFERENCE = _msparser.ms_http_client_session_SHOW_REFERENCE
    SHOW_NONE = _msparser.ms_http_client_session_SHOW_NONE
    SHOW_ALL = _msparser.ms_http_client_session_SHOW_ALL
    def __init__(self, *args): 
        this = _msparser.new_ms_http_client_session(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_client_session
    __del__ = lambda self : None;
    def sessionId(self): return _msparser.ms_http_client_session_sessionId(self)
    def getIsPermitted(self, *args): return _msparser.ms_http_client_session_getIsPermitted(self, *args)
    def submitSearch(self, *args): return _msparser.ms_http_client_session_submitSearch(self, *args)
    def getSequenceFile(self, *args): return _msparser.ms_http_client_session_getSequenceFile(self, *args)
    def logout(self): return _msparser.ms_http_client_session_logout(self)
    def getIsXmlUploadedList(self, *args): return _msparser.ms_http_client_session_getIsXmlUploadedList(self, *args)
ms_http_client_session_swigregister = _msparser.ms_http_client_session_swigregister
ms_http_client_session_swigregister(ms_http_client_session)

class ms_http_client_search(ms_errors):
    __swig_setmethods__ = {}
    for _s in [ms_errors]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_client_search, name, value)
    __swig_getmethods__ = {}
    for _s in [ms_errors]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_client_search, name)
    __repr__ = _swig_repr
    SS_UNKNOWN = _msparser.ms_http_client_search_SS_UNKNOWN
    SS_ASSIGNED = _msparser.ms_http_client_search_SS_ASSIGNED
    SS_QUEUED = _msparser.ms_http_client_search_SS_QUEUED
    SS_RUNNING = _msparser.ms_http_client_search_SS_RUNNING
    SS_COMPLETE = _msparser.ms_http_client_search_SS_COMPLETE
    SS_KILLED = _msparser.ms_http_client_search_SS_KILLED
    SS_NOTRUNNING = _msparser.ms_http_client_search_SS_NOTRUNNING
    SS_NICED = _msparser.ms_http_client_search_SS_NICED
    UR_SUCCESS = _msparser.ms_http_client_search_UR_SUCCESS
    UR_ACCESS_DENIED = _msparser.ms_http_client_search_UR_ACCESS_DENIED
    UR_INVALID_TASKID = _msparser.ms_http_client_search_UR_INVALID_TASKID
    UR_NO_RESULT_FILENAME = _msparser.ms_http_client_search_UR_NO_RESULT_FILENAME
    UR_NO_RESULT_FILE = _msparser.ms_http_client_search_UR_NO_RESULT_FILE
    UR_FILE_ALREADY_EXISTS = _msparser.ms_http_client_search_UR_FILE_ALREADY_EXISTS
    UR_ERROR = _msparser.ms_http_client_search_UR_ERROR
    DO_NORMAL = _msparser.ms_http_client_search_DO_NORMAL
    DO_WITH_IONS = _msparser.ms_http_client_search_DO_WITH_IONS
    RT_auto = _msparser.ms_http_client_search_RT_auto
    RT_file = _msparser.ms_http_client_search_RT_file
    def __init__(self, *args): 
        this = _msparser.new_ms_http_client_search(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _msparser.delete_ms_http_client_search
    __del__ = lambda self : None;
    def sessionId(self): return _msparser.ms_http_client_search_sessionId(self)
    def searchTaskId(self): return _msparser.ms_http_client_search_searchTaskId(self)
    def getStatus(self, *args): return _msparser.ms_http_client_search_getStatus(self, *args)
    def getResultsFilename(self, *args): return _msparser.ms_http_client_search_getResultsFilename(self, *args)
    def downloadResultsFile(self, *args): return _msparser.ms_http_client_search_downloadResultsFile(self, *args)
    def downloadDaemonResultsFile(self, *args): return _msparser.ms_http_client_search_downloadDaemonResultsFile(self, *args)
    def downloadPercolatorFile(self, *args): return _msparser.ms_http_client_search_downloadPercolatorFile(self, *args)
    def downloadXmlResultsFile(self, *args): return _msparser.ms_http_client_search_downloadXmlResultsFile(self, *args)
    def uploadDistillerXmlResultsFile(self, *args): return _msparser.ms_http_client_search_uploadDistillerXmlResultsFile(self, *args)
ms_http_client_search_swigregister = _msparser.ms_http_client_search_swigregister
ms_http_client_search_swigregister(ms_http_client_search)

class ms_http_client_mime_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_client_mime_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_client_mime_item, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _msparser.new_ms_http_client_mime_item(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _msparser.ms_http_client_mime_item_name(self)
    def value(self): return _msparser.ms_http_client_mime_item_value(self)
    def hasFilename(self): return _msparser.ms_http_client_mime_item_hasFilename(self)
    def filename(self): return _msparser.ms_http_client_mime_item_filename(self)
    def contentType(self): return _msparser.ms_http_client_mime_item_contentType(self)
    def setName(self, *args): return _msparser.ms_http_client_mime_item_setName(self, *args)
    def setValue(self, *args): return _msparser.ms_http_client_mime_item_setValue(self, *args)
    def setValueWithFilename(self, *args): return _msparser.ms_http_client_mime_item_setValueWithFilename(self, *args)
    __swig_destroy__ = _msparser.delete_ms_http_client_mime_item
    __del__ = lambda self : None;
ms_http_client_mime_item_swigregister = _msparser.ms_http_client_mime_item_swigregister
ms_http_client_mime_item_swigregister(ms_http_client_mime_item)

class ms_http_client_mime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_http_client_mime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_http_client_mime, name)
    __repr__ = _swig_repr
    CT_MIXED = _msparser.ms_http_client_mime_CT_MIXED
    CT_FORMDATA = _msparser.ms_http_client_mime_CT_FORMDATA
    CONTENT_CONTINUES = _msparser.ms_http_client_mime_CONTENT_CONTINUES
    CONTENT_TERMINATES = _msparser.ms_http_client_mime_CONTENT_TERMINATES
    __swig_getmethods__["formatHeader"] = lambda x: _msparser.ms_http_client_mime_formatHeader
    if _newclass:formatHeader = staticmethod(_msparser.ms_http_client_mime_formatHeader)
    __swig_destroy__ = _msparser.delete_ms_http_client_mime
    __del__ = lambda self : None;
    def append(self, *args): return _msparser.ms_http_client_mime_append(self, *args)
    def appendFile(self, *args): return _msparser.ms_http_client_mime_appendFile(self, *args)
    def count(self): return _msparser.ms_http_client_mime_count(self)
    def name(self, *args): return _msparser.ms_http_client_mime_name(self, *args)
    def value(self, *args): return _msparser.ms_http_client_mime_value(self, *args)
    def hasFilename(self, *args): return _msparser.ms_http_client_mime_hasFilename(self, *args)
    def filename(self, *args): return _msparser.ms_http_client_mime_filename(self, *args)
    def setValue(self, *args): return _msparser.ms_http_client_mime_setValue(self, *args)
    def setValueWithFilename(self, *args): return _msparser.ms_http_client_mime_setValueWithFilename(self, *args)
    def erase(self, *args): return _msparser.ms_http_client_mime_erase(self, *args)
    def format(self, *args): return _msparser.ms_http_client_mime_format(self, *args)
    def __init__(self): 
        this = _msparser.new_ms_http_client_mime()
        try: self.this.append(this)
        except: self.this = this
ms_http_client_mime_swigregister = _msparser.ms_http_client_mime_swigregister
ms_http_client_mime_swigregister(ms_http_client_mime)

def ms_http_client_mime_formatHeader(*args):
  return _msparser.ms_http_client_mime_formatHeader(*args)
ms_http_client_mime_formatHeader = _msparser.ms_http_client_mime_formatHeader

# This file is compatible with both classic and new-style classes.


